@startuml

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam packageStyle rectangle

  class TestServerConfig {
    +server_id: str
    +command
    +url
  }

package "tests.test_assessment" {
  class TestDefaultPattern {
    +pattern
    --
    +test_default_pattern_init()
  }

  class TestDefaultDetectionResult {
    +result
    +result
    +critical_pattern
    +high_pattern
    +critical_defaults
    +result
    +critical_pattern
    +high_pattern
    +high_defaults
    +result
    +auth_pattern
    +config_pattern
    +auth_defaults
    +config_defaults
    +encryption_defaults
    +result
    +result
    +critical_pattern
    +high_pattern
    +medium_pattern
    +result
    +critical_pattern
    --
    +test_default_detection_result_init()
    +test_critical_defaults_property()
    +test_high_defaults_property()
    +test_get_defaults_by_category()
    +test_calculate_risk_score_no_defaults()
    +test_calculate_risk_score_with_defaults()
    +test_calculate_risk_score_maximum()
  }

  class TestDefaultConfigurationDetector {
    +server_info
    +pattern_categories
    +result
    +server_info
    +result
    +port_defaults
    +ports_to_test
    +server_info
    +result
    +port_defaults
    +security_config
    +result
    +pattern_ids
    +auth_config
    +result
    +auth_disabled
    +auth_config
    +result
    +auth_patterns
    +config_data
    +temp_path
    +result
    +pattern_ids
    +default_filenames
    +temp_path
    +new_path
    +result
    +file_defaults
    +env_vars
    +result
    +debug_defaults
    +command_lines
    +result
    +npx_defaults
    +result
    +critical_pattern
    +auth_pattern
    +config_pattern
    +recommendations_text
    +result
    +pattern
    +findings
    +finding
    +invalid_result
    --
    +detector()
    +sample_detection_result()
    +test_detector_init(detector)
    +test_get_assessment_type(detector)
    +test_assess_basic_functionality(detector, sample_detection_result)
    +test_analyze_server_defaults_default_port(detector)
    +test_analyze_server_defaults_multiple_ports(detector)
    +test_analyze_security_config_defaults(detector)
    +test_analyze_auth_config_defaults_disabled(detector)
    +test_analyze_auth_config_defaults_weak_password(detector)
    +test_analyze_configuration_file_defaults_json(detector)
    +test_analyze_configuration_file_defaults_filename(detector)
    +test_analyze_environment_defaults(detector)
    +test_analyze_command_line_defaults(detector)
    +test_generate_default_recommendations(detector)
    +test_convert_defaults_to_findings(detector)
    +test_assess_with_exception(detector)
  }

  class TestConvenienceFunctions {
    +vector_string: str
    +score
    +test_cases
    +level
    --
    +test_calculate_cvss_score()
    +test_get_risk_level_from_score()
  }

  class TestDefaultPatterns {
    +default_ports
    +server_info
    +result
    +port_patterns
    +test_configs
    +result
    +password_patterns
    +test_configs
    +result
    +api_key_patterns
    +test_configs
    +result
    +ssl_patterns
    +test_configs
    +result
    +debug_patterns
    +test_configs
    +result
    +cors_patterns
    --
    +detector()
    +test_default_port_patterns(detector)
    +test_default_password_patterns(detector)
    +test_default_api_key_patterns(detector)
    +test_default_ssl_disabled_patterns(detector)
    +test_default_debug_enabled_patterns(detector)
    +test_default_cors_wildcard_patterns(detector)
  }

  class TestConfigurationIssue {
    +issue
    --
    +test_configuration_issue_init()
  }

  class TestSecurityConfiguration {
    +config
    +config
    +critical_issue
    +high_issue
    +critical_issues
    +config
    +critical_issue
    +high_issue
    +high_issues
    +config
    +auth_issue
    +network_issue
    +auth_issues
    +network_issues
    +encryption_issues
    +config
    +config
    +critical_issue
    +high_issue
    +medium_issue
    +config
    +critical_issue
    --
    +test_security_configuration_init()
    +test_critical_issues_property()
    +test_high_issues_property()
    +test_get_issues_by_category()
    +test_calculate_security_score_no_issues()
    +test_calculate_security_score_with_issues()
    +test_calculate_security_score_minimum()
  }

  class TestConfigurationAnalyzer {
    +server_info
    +result
    +server_info
    +config
    +insecure_issues
    +server_info
    +config
    +port_issues
    +server_info
    +config
    +binding_issues
    +security_info
    +config
    +auth_issues
    +security_info
    +config
    +weak_auth_issues
    +security_info
    +config
    +tls_issues
    +security_info
    +config
    +weak_tls_issues
    +env_vars
    +config
    +debug_issues
    +env_vars
    +config
    +url_issues
    +command_line: str
    +config
    +flag_issues
    +high_severity_issues
    +medium_severity_issues
    +config_data
    +temp_path
    +config
    +secret_issues
    +config_data
    +temp_path
    +config
    +config
    +http_issues
    +config
    +ws_issues
    +config
    +transport_issues
    +config
    +critical_issue
    +auth_issue
    +network_issue
    +recommendations_text
    +config
    +issue
    +findings
    +finding
    +nested_dict
    +flattened
    +expected
    +invalid_result
    --
    +analyzer()
    +sample_detection_result()
    +test_analyzer_init(analyzer)
    +test_get_assessment_type(analyzer)
    +test_assess_basic_functionality(analyzer, sample_detection_result)
    +test_analyze_server_configuration_insecure_transport(analyzer)
    +test_analyze_server_configuration_default_port(analyzer)
    +test_analyze_server_configuration_open_binding(analyzer)
    +test_analyze_security_info_no_authentication(analyzer)
    +test_analyze_security_info_weak_authentication(analyzer)
    +test_analyze_security_info_tls_disabled(analyzer)
    +test_analyze_security_info_weak_tls_version(analyzer)
    +test_analyze_environment_variables_debug_enabled(analyzer)
    +test_analyze_environment_variables_insecure_url(analyzer)
    +test_analyze_command_line_insecure_flags(analyzer)
    +test_analyze_configuration_file_json(analyzer)
    +test_analyze_configuration_file_yaml(analyzer)
    +test_analyze_transport_security_http(analyzer)
    +test_analyze_transport_security_websocket(analyzer)
    +test_analyze_transport_security_stdio(analyzer)
    +test_generate_recommendations(analyzer)
    +test_convert_issues_to_findings(analyzer)
    +test_flatten_dict(analyzer)
    +test_assess_with_exception(analyzer)
  }

  class TestSecurityRules {
    +test_configs
    +config
    +auth_issues
    +test_configs
    +config
    +encryption_issues
    +test_configs
    +config
    +network_issues
    +test_configs
    +config
    +logging_issues
    --
    +analyzer()
    +test_authentication_rules(analyzer)
    +test_encryption_rules(analyzer)
    +test_network_rules(analyzer)
    +test_logging_rules(analyzer)
  }

  class TestAuthenticationIssue {
    +issue
    --
    +test_authentication_issue_init()
  }

  class TestAuthenticationConfiguration {
    +config
    +config
    +critical_issue
    +high_issue
    +critical_issues
    +config
    +critical_issue
    +high_issue
    +high_issues
    +config
    +auth_issue
    +password_issue
    +auth_issues
    +password_issues
    +token_issues
    +config
    +config
    +critical_issue
    +high_issue
    +medium_issue
    +config
    +config
    +critical_issue
    --
    +test_authentication_configuration_init()
    +test_critical_issues_property()
    +test_high_issues_property()
    +test_get_issues_by_category()
    +test_calculate_security_score_no_issues()
    +test_calculate_security_score_with_issues()
    +test_calculate_security_score_with_bonuses()
    +test_calculate_security_score_minimum()
  }

  class TestAuthenticationAnalyzer {
    +server_info
    +rule_categories
    +result
    +weak_passwords
    +strong_passwords
    +weak_credentials
    +strong_credentials
    +server_info
    +config
    +auth_issues
    +server_info
    +config
    +transport_issues
    +auth_config
    +config
    +policy_issues
    +weak_password_issues
    +auth_config
    +config
    +token_issues
    +jwt_issues
    +auth_config
    +config
    +session_issues
    +config_data
    +temp_path
    +config
    +file_issues
    +env_vars
    +config
    +env_issues
    +other_var_issues
    +command_lines
    +config
    +cmd_issues
    +credentials
    +content
    +config
    +basic_auth_issues
    +header
    +payload
    +signature: str
    +test_jwt
    +prod_payload
    +prod_jwt
    +config
    +critical_issue
    +weak_password_issue
    +token_issue
    +recommendations_text
    +config
    +issue
    +findings
    +finding
    +invalid_result
    --
    +analyzer()
    +sample_detection_result()
    +test_analyzer_init(analyzer)
    +test_get_assessment_type(analyzer)
    +test_assess_basic_functionality(analyzer, sample_detection_result)
    +test_is_weak_password(analyzer)
    +test_is_weak_credential(analyzer)
    +test_analyze_server_authentication_no_auth(analyzer)
    +test_analyze_server_authentication_no_transport_encryption(analyzer)
    +test_analyze_passwords(analyzer)
    +test_analyze_tokens(analyzer)
    +test_analyze_sessions(analyzer)
    +test_analyze_config_file_auth(analyzer)
    +test_analyze_environment_auth(analyzer)
    +test_analyze_command_line_auth(analyzer)
    +test_analyze_file_content_auth_basic_auth(analyzer)
    +test_is_test_jwt(analyzer)
    +test_generate_auth_recommendations(analyzer)
    +test_convert_issues_to_findings(analyzer)
    +test_assess_with_exception(analyzer)
  }

  class TestAuthenticationRules {
    +test_configs
    +config
    +no_auth_issues
    +test_configs
    +config
    +weak_password_issues
    +test_configs
    +config
    +weak_token_issues
    +test_configs
    +config
    +jwt_issues
    --
    +analyzer()
    +test_no_authentication_rules(analyzer)
    +test_weak_password_rules(analyzer)
    +test_weak_token_rules(analyzer)
    +test_oauth_jwt_issues_rules(analyzer)
  }

  class TestTransportSecurityAssessor {
    +failed_result
    +result
    +no_server_result
    +result
    +mock_session
    +result
    +unencrypted_findings
    +finding
    +mock_session
    +mock_response
    +result
    +header_findings
    +expected_headers
    +found_headers
    +mock_session
    +mock_response
    +result
    +method_findings
    +finding
    +ws_detection_result
    +result
    +unencrypted_findings
    +finding
    +ws_server_no_origin
    +ws_detection_result
    +result
    +origin_findings
    +finding
    +elevated_process
    +stdio_server
    +stdio_detection_result
    +result
    +privilege_findings
    +finding
    +credential_process
    +stdio_server
    +stdio_detection_result
    +result
    +cmdline_findings
    +finding
    +https_server
    +https_detection_result
    +mock_context
    +mock_sock
    +mock_ssock
    +result
    +tls_findings
    +finding
    +https_server
    +https_detection_result
    +mock_context
    +mock_sock
    +mock_ssock
    +result
    +cipher_findings
    +finding
    +all_interfaces_server
    +all_interfaces_detection_result
    +result
    +bind_findings
    +finding
    +insecure_port_server
    +insecure_port_detection_result
    +result
    +port_findings
    +finding
    +insecure_config_server
    +insecure_config_detection_result
    +result
    +protocol_findings
    +found_protocols
    +findings
    +vulnerabilities
    +critical_vuln
    +high_vuln
    +encryption_finding
    +vector
    +auth_finding
    +vector
    +critical_finding
    +score
    +low_finding
    +score
    +findings
    +recommendations
    +findings
    +compliance_status
    +result
    +result
    +mock_context
    +mock_sock
    +mock_ssock
    +result
    +result
    +root_process
    +admin_process
    +user_process
    +no_user_process
    +http_rules
    +rule
    +patterns
    +test_configs
    +matched
    +protocols
    --
    +setUp()
    +test_get_assessment_type()
    +test_assess_failed_detection()
    +test_assess_no_mcp_server()
    +test_assess_http_unencrypted(mock_session_class)
    +test_assess_http_security_headers(mock_session_class)
    +test_assess_http_dangerous_methods(mock_session_class)
    +test_assess_websocket_unencrypted()
    +test_assess_websocket_no_origin_validation()
    +test_assess_stdio_elevated_privileges()
    +test_assess_stdio_cmdline_credentials()
    +test_assess_tls_weak_protocols(mock_ssl_context, mock_socket)
    +test_assess_tls_weak_ciphers(mock_ssl_context, mock_socket)
    +test_assess_network_bind_all_interfaces()
    +test_assess_insecure_port()
    +test_assess_insecure_protocol_config()
    +test_generate_vulnerabilities()
    +test_create_cvss_vector()
    +test_calculate_cvss_score()
    +test_generate_recommendations()
    +test_assess_compliance()
    +test_test_https_availability()
    +test_test_wss_availability(mock_ssl_context, mock_socket)
    +test_is_elevated_process()
    +test_security_rules_initialization()
    +test_weak_tls_patterns()
    +test_insecure_protocols()
  }

  class TestRemediationAction {
    +action
    +immediate_action
    +high_action
    +medium_action
    +low_action
    +info_action
    +action
    --
    +test_remediation_action_init()
    +test_priority_score()
    +test_effort_to_impact_ratio()
  }

  class TestRemediationPlan {
    +plan
    +plan
    +immediate
    +plan
    +high_priority
    +plan
    +auth_actions
    +encryption_actions
    +network_actions
    +plan
    +medium_actions
    +low_actions
    +high_actions
    +plan
    --
    +sample_actions()
    +test_remediation_plan_init()
    +test_immediate_actions(sample_actions)
    +test_high_priority_actions(sample_actions)
    +test_get_actions_by_category(sample_actions)
    +test_get_actions_by_complexity(sample_actions)
    +test_calculate_totals(sample_actions)
  }

  class TestRemediationEngine {
    +result
    +plan
    +plan
    +auth_findings
    +actions
    +encryption_findings
    +actions
    +config_findings
    +actions
    +network_findings
    +actions
    +actions
    +prioritized
    +actions
    +quick_wins
    +actions
    +long_term
    +actions
    +phases
    +plan
    +summary
    --
    +engine()
    +sample_findings()
    +sample_assessment_results(sample_findings)
    +test_engine_init(engine)
    +test_generate_remediation_plan_empty(engine)
    +test_generate_remediation_plan_basic(engine, sample_assessment_results)
    +test_generate_auth_actions(engine, sample_findings)
    +test_generate_encryption_actions(engine, sample_findings)
    +test_generate_config_actions(engine, sample_findings)
    +test_generate_network_actions(engine, sample_findings)
    +test_prioritize_actions(engine)
    +test_identify_quick_wins(engine)
    +test_identify_long_term_actions(engine)
    +test_create_implementation_phases(engine)
    +test_generate_executive_summary(engine, sample_findings)
  }

  class TestRemediationIntegration {
    +findings
    +assessment_result
    +plan
    +immediate_actions
    +high_priority_actions
    +quick_wins
    +estimates
    +results
    +findings
    +result
    +plan
    +total_findings
    +result
    +plan
    --
    +test_end_to_end_remediation_workflow()
    +test_multiple_assessment_results()
    +test_empty_findings_handling()
  }

  class TestCVSSScores {
    +scores
    +scores
    +test_cases
    +scores
    +scores
    +result
    +components
    --
    +test_cvss_scores_init()
    +test_calculate_overall_score()
    +test_calculate_risk_level()
    +test_to_dict()
  }

  class TestCVSSCalculator {
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +base_score: float
    +expected_multiplier
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector
    +vector_string: str
    +vector
    +vector_string: str
    +vector
    +vector_string: str
    +vector
    +vector_string: str
    +vector
    +vector_string: str
    +vector
    +vector
    +scores
    +vector_string: str
    +scores
    --
    +calculator()
    +test_calculator_init(calculator)
    +test_validate_vector_valid(calculator)
    +test_validate_vector_invalid_base_metrics(calculator)
    +test_validate_vector_invalid_temporal_metrics(calculator)
    +test_validate_vector_invalid_environmental_metrics(calculator)
    +test_calculate_base_score_critical(calculator)
    +test_calculate_base_score_medium(calculator)
    +test_calculate_base_score_no_impact(calculator)
    +test_calculate_temporal_score(calculator)
    +test_calculate_environmental_score(calculator)
    +test_has_temporal_metrics(calculator)
    +test_has_environmental_metrics(calculator)
    +test_parse_vector_string_base_only(calculator)
    +test_parse_vector_string_with_temporal(calculator)
    +test_parse_vector_string_with_environmental(calculator)
    +test_parse_vector_string_cvss30(calculator)
    +test_parse_vector_string_no_prefix(calculator)
    +test_parse_vector_string_invalid(calculator)
    +test_calculate_scores_complete(calculator)
    +test_calculate_from_string(calculator)
  }

  class TestCVSSAssessment {
    +vector
    +vulnerability
    +updated_vuln
    +vulnerability
    +updated_vuln
    +vector_string: str
    +vulnerability
    +vector
    +breakdown
    +scores
    +metrics
    +base_metrics
    +temporal_metrics
    --
    +assessment()
    +test_assessment_init(assessment)
    +test_assess_vulnerability_with_vector(assessment)
    +test_assess_vulnerability_without_vector(assessment)
    +test_create_vulnerability_from_cvss(assessment)
    +test_create_vulnerability_from_cvss_invalid(assessment)
    +test_get_score_breakdown(assessment)
  }

  class TestCVSSMetrics {
    +required_metrics
    +temporal_metrics
    +environmental_metrics
    +av
    +pr
    +pr_changed
    --
    +test_cvss_metrics_structure()
    +test_cvss_metrics_values()
    +test_attack_vector_values()
    +test_privileges_required_scope_dependency()
  }

  class TestRealWorldCVSSVectors {
    +vector_string: str
    +scores
    +vector_string: str
    +scores
    +vector_string: str
    +scores
    +vector_string: str
    +scores
    --
    +calculator()
    +test_eternalblue_cve_2017_0144(calculator)
    +test_heartbleed_cve_2014_0160(calculator)
    +test_shellshock_cve_2014_6271(calculator)
    +test_low_severity_vulnerability(calculator)
  }

  class TestRiskLevel {
    +test_risk_level_values()
  }

  class TestVulnerabilityCategory {
    +test_vulnerability_category_values()
  }

  class TestComplianceFramework {
    +test_compliance_framework_values()
  }

  class TestCVSSVector {
    +vector
    +vector
    +vector
    +expected: str
    +vector
    +expected: str
    +vector
    +expected: str
    --
    +test_cvss_vector_init()
    +test_cvss_vector_custom_values()
    +test_to_vector_string_base_only()
    +test_to_vector_string_with_temporal()
    +test_to_vector_string_with_environmental()
  }

  class TestVulnerabilityInfo {
    +vuln
    +vuln_exploitable
    +vuln_critical
    +vuln_medium
    +vuln_no_exploit
    +vuln_patch
    +vuln_workaround
    +vuln_both
    +vuln_no_mitigation
    --
    +test_vulnerability_info_init()
    +test_is_exploitable_property()
    +test_has_mitigation_property()
  }

  class TestSecurityFinding {
    +finding
    +finding_critical
    +finding_high
    +finding_medium
    +finding_low
    +finding_none
    --
    +test_security_finding_init()
    +test_risk_score_property()
  }

  class TestAssessmentResult {
    +result
    +result
    +critical
    +result
    +high
    +result
    +exploitable
    +result
    +unpatched
    +result
    +auth_findings
    +config_findings
    +encryption_findings
    +findings_with_violations
    +result
    +violations
    +result
    +result
    +high_findings
    +result
    +medium_findings
    +result
    +low_findings
    +result
    +compliance_status
    +result
    +result_dict
    +summary
    --
    +sample_findings()
    +sample_vulnerabilities()
    +test_assessment_result_init()
    +test_critical_findings_property(sample_findings)
    +test_high_findings_property(sample_findings)
    +test_exploitable_vulnerabilities_property(sample_vulnerabilities)
    +test_unpatched_vulnerabilities_property(sample_vulnerabilities)
    +test_get_findings_by_category(sample_findings)
    +test_get_compliance_violations()
    +test_calculate_overall_risk_no_findings()
    +test_calculate_overall_risk_with_findings(sample_findings)
    +test_calculate_overall_risk_levels()
    +test_to_dict(sample_findings, sample_vulnerabilities)
  }

  class TestRiskAssessment {
    +assessment
    +assessment
    +assessment
    +critical_results
    +high_results
    +medium_results
    +low_results
    +assessment
    +high_risk
    +target_hosts
    +assessment
    +stats
    +assessment
    +stats
    --
    +sample_results()
    +test_risk_assessment_init()
    +test_add_result(sample_results)
    +test_get_results_by_risk_level(sample_results)
    +test_get_high_risk_targets(sample_results)
    +test_get_overall_statistics_empty()
    +test_get_overall_statistics_with_results(sample_results)
  }

  class TestRiskAssessor {
  }

  class MockRiskAssessor {
    +result
    +finding
    --
    +assess(detection_result): AssessmentResult
    +get_assessment_type(): str
  }

  class TestExceptions {
    +test_assessment_error()
    +test_cvss_error()
    +test_configuration_error()
    +test_compliance_error()
  }

}

package "tests.fixtures" {
  class MockServerType {
    +BASIC: str
    +FILESYSTEM: str
    +NETWORK: str
    +CODE_EXECUTION: str
    +HIGH_RISK: str
    +ERROR_PRONE: str
    +SLOW_RESPONSE: str
    +RESOURCE_HEAVY: str
    +MINIMAL: str
  }

  class MockTool {
    +name: str
    +description: str
    +input_schema
    +risk_level: str
    --
    +to_mcp_format()
  }

  class MockResource {
    +uri: str
    +name: str
    +description: str
    +mime_type
    +resource
    --
    +to_mcp_format()
  }

  class MockServerConfig {
    +name: str
    +version: str
    +protocol_version: str
    +tools
    +resources
    +capabilities
    +delay_ms: int
    +error_rate: float
    +memory_leak: bool
    --
    -__post_init__()
  }

  class MockMCPServer {
    +method
    +msg_id
    +tool_name
    +uri
    +line
    +message
    +response
    --
    -__init__(config)
    +handle_message(message)
    -_handle_initialize(msg_id, params)
    -_handle_tools_list(msg_id)
    -_handle_resources_list(msg_id)
    -_handle_tool_call(msg_id, params)
    -_handle_resource_read(msg_id, params)
    -_error_response(msg_id, code, message)
    +run_stdio()
  }

  class MockServerFactory {
    +{static} create_basic_server(): MockServerConfig
    +{static} create_filesystem_server(): MockServerConfig
    +{static} create_high_risk_server(): MockServerConfig
  }

}

package "tests.test_detection" {
  class TestTransportDetector {
    +method
    +transport_results
    +result
    +result
    +result
    +results
    +results
    +result
    +result
    +config
    +result
    +result
    +result
    +result
    +ports
    +ports
    +cmdline1
    +ports
    +cmdline2
    +ports
    +cmdline3
    +ports
    +cmdline4
    +ports
    +config
    +ports
    +result
    +result
    +mock_response
    +result
    +mock_response
    +result
    +result
    +mock_response
    +result
    +mock_response
    +result
    +transport_results
    +best
    +transport_results
    +best
    +best
    +server_type
    +docker_process
    +server_type
    +docker_config
    +server_type
    +server_type
    +security
    +security
    +security
    +security
    +security
    --
    +setUp()
    +test_get_detection_method()
    +test_detect_success(mock_select, mock_analyze)
    +test_detect_no_transport_found(mock_select, mock_analyze)
    +test_detect_with_exception()
    +test_analyze_all_transports_localhost_with_process()
    +test_analyze_all_transports_remote_host()
    +test_analyze_stdio_transport_with_npx()
    +test_analyze_stdio_transport_no_process()
    +test_analyze_stdio_transport_with_config()
    +test_analyze_http_transport_success(mock_http_test, mock_port_open)
    +test_analyze_http_transport_port_closed(mock_port_open)
    +test_analyze_websocket_transport_success(mock_ws_test, mock_port_open)
    +test_get_candidate_http_ports_with_process()
    +test_get_candidate_http_ports_with_config()
    +test_extract_ports_from_cmdline_various_formats()
    +test_extract_ports_from_config_json()
    +test_is_port_open_success(mock_connection)
    +test_is_port_open_failure(mock_connection)
    +test_test_http_connectivity_success(mock_get)
    +test_test_http_connectivity_https(mock_get)
    +test_test_http_connectivity_failure(mock_get)
    +test_test_websocket_connectivity_upgrade_response(mock_get)
    +test_test_websocket_connectivity_wss(mock_get)
    +test_select_best_transport_highest_confidence()
    +test_select_best_transport_below_threshold()
    +test_select_best_transport_empty_list()
    +test_determine_server_type_npx()
    +test_determine_server_type_docker_process()
    +test_determine_server_type_docker_config()
    +test_determine_server_type_standalone()
    +test_analyze_transport_security_stdio()
    +test_analyze_transport_security_http_insecure()
    +test_analyze_transport_security_https_secure()
    +test_analyze_transport_security_websocket_insecure()
    +test_analyze_transport_security_websocket_secure()
  }

  class TestPhase5ComponentValidation {
    +capability_analyzer
    +attack_generator
    +scenario_builder
    +risk_prioritizer
    +compliance_mapper
    +mitigation_generator
    +example_generator
    --
    +test_all_phase5_components_instantiate()
  }

  class TestMCPCapabilityAnalyzerEnhancement {
    +result
    +test_cases
    +correct_categorizations: int
    +total_tests
    +categories
    +accuracy
    +servers
    +context
    +test_servers
    +server
    +successful_analyses: int
    +result
    +coverage
    --
    +setup_method()
    +test_capability_analysis_functionality()
    +test_capability_categorization_accuracy()
    +test_environment_context_building()
    +test_coverage_requirement()
  }

  class TestAlgorithmAccuracyValidation {
    +test_capabilities
    +categories
    +expected_categories
    +found_expected
    +accuracy
    +threats
    +capabilities
    +context
    +prioritized
    --
    +setup_method()
    +test_capability_to_threat_mapping_accuracy()
    +test_risk_prioritization_interface()
  }

  class TestPhase5PerformanceValidation {
    +test_servers
    +server
    +start_time
    +results
    +result
    +end_time
    +processing_time
    +time_per_tool
    +estimated_time_for_10
    +successful_results
    +success_rate
    --
    +setup_method()
    +test_performance_requirement()
  }

  class TestProtocolVerifier {
    +method
    +expected_result
    +result
    +expected_result
    +result
    +result
    +http_result
    +result
    +stdio_result
    +result
    +result
    +expected_result
    +result
    +expected_result
    +result
    +expected_result
    +result
    +result
    +mock_response
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +mock_response
    +result
    +mock_response
    +result
    +result
    +mock_loop
    +result
    +mock_result
    +cmdline
    +result
    +mock_result
    +cmdline
    +result
    +cmdline
    +result
    +process
    +result
    +process
    +result
    +response
    +response1
    +response2
    +response3
    +response
    +tools
    +response
    +resources
    +process
    +server_type
    +config
    +server_type
    +process
    +server_type
    --
    +setUp()
    +test_get_detection_method()
    +test_detect_with_specific_transport(mock_verify)
    +test_detect_auto_detection(mock_auto_detect)
    +test_detect_with_exception()
    +test_auto_detect_and_verify_with_port(mock_verify)
    +test_auto_detect_with_process_info(mock_verify)
    +test_auto_detect_no_success()
    +test_verify_transport_http(mock_http)
    +test_verify_transport_websocket(mock_ws)
    +test_verify_transport_stdio(mock_stdio)
    +test_verify_transport_unsupported()
    +test_verify_http_transport_success(mock_post)
    +test_verify_http_transport_no_port()
    +test_verify_http_transport_failure(mock_post)
    +test_verify_websocket_transport_success(mock_handshake)
    +test_verify_websocket_transport_no_port()
    +test_verify_stdio_transport_not_localhost()
    +test_verify_stdio_transport_no_process_info()
    +test_verify_stdio_transport_success(mock_handshake)
    +test_attempt_http_handshake_valid_response(mock_post)
    +test_attempt_http_handshake_mcp_indicators(mock_post)
    +test_attempt_http_handshake_failure(mock_post)
    +test_attempt_websocket_handshake(mock_set_loop, mock_new_loop)
    +test_test_npx_mcp_command_success(mock_run)
    +test_test_npx_mcp_command_no_indicators(mock_run)
    +test_test_npx_mcp_command_no_npx()
    +test_analyze_stdio_process_heuristically_high_confidence()
    +test_analyze_stdio_process_heuristically_low_confidence()
    +test_is_valid_mcp_response_valid()
    +test_is_valid_mcp_response_invalid_structure()
    +test_extract_tools_from_response()
    +test_extract_resources_from_response()
    +test_determine_server_type_npx()
    +test_determine_server_type_docker()
    +test_determine_server_type_standalone()
  }

  class TestMCPTool {
    +tool
    +tool
    +tool
    +tool
    +tool
    +new_tool
    +legacy_tool
    --
    +test_tool_creation()
    +test_capability_category_file_system()
    +test_capability_category_network_access()
    +test_capability_category_code_execution()
    +test_capability_category_unknown()
    +test_from_new_tool_conversion()
  }

  class TestMCPResource {
    +resource
    +new_resource
    +legacy_resource
    --
    +test_resource_creation()
    +test_from_new_resource_conversion()
  }

  class TestMCPCapabilities {
    +tools
    +resources
    +capabilities
    +tools
    +capabilities
    +categories
    +tools
    +capabilities
    +tools
    +capabilities
    +new_tools
    +new_resources
    +new_server_info
    +legacy_capabilities
    --
    +test_capabilities_creation()
    +test_capability_categories()
    +test_highest_risk_level()
    +test_access_flags()
    +test_from_new_capabilities_conversion()
  }

  class TestMCPIntrospector {
    +config
    +mock_result
    +mock_introspection_instance
    +result
    +mock_result
    +mock_introspection_instance
    +result
    +result
    +server_info
    +result
    +stats
    +stats
    +stats
    +transports
    +result
    +mock_discovery_instance
    +tools
    +mock_discovery_instance
    +resources
    --
    +introspector()
    +sample_server_info()
    +sample_process_info()
    +test_introspector_initialization(introspector)
    +test_successful_introspection(mock_introspection_class, introspector, sample_server_info, sample_process_info)
    +test_failed_introspection(mock_introspection_class, introspector, sample_server_info, sample_process_info)
    +test_input_validation(introspector)
    +test_transport_statistics(introspector)
    +test_discovery_statistics(introspector)
    +test_cache_statistics(introspector)
    +test_supported_transports(introspector)
    +test_transport_connectivity(introspector, sample_server_info, sample_process_info)
    +test_discover_tools_only(mock_tool_discovery, introspector, sample_server_info, sample_process_info)
    +test_discover_resources_only(mock_resource_discovery, introspector, sample_server_info, sample_process_info)
    +test_performance_metrics_integration(introspector)
  }

  class TestIntegrationScenarios {
    +servers
    +results
    +result
    +invalid_server
    +invalid_process
    +result
    +server_info
    +process_info
    +result1
    +initial_cache_misses
    +result2
    --
    +introspector()
    +test_multiple_server_introspection(introspector)
    +test_error_handling_and_recovery(introspector)
    +test_caching_behavior(introspector)
  }

  class TestDockerInspector {
    +settings
    +inspector
    +docker_info
    +result
    +result
    +mcp_container
    +mcp_command_container
    +mcp_port_container
    +regular_container
    +mcp_image
    +regular_image
    +mcp_service
    +mcp_image_service
    +mcp_command_service
    +mcp_env_service
    +mcp_port_service
    +regular_service
    +container_data
    +result
    +result
    +image_data
    +result
    +result
    +compose_content: str
    +result
    +result
    +compose_with_mcp
    +compose_without_mcp
    +compose_data
    +mcp_services
    +high_confidence_container
    +confidence
    +low_confidence_container
    +confidence
    +high_confidence_image
    +confidence
    +low_confidence_image
    +confidence
    +high_confidence_service
    +confidence
    +low_confidence_service
    +confidence
    +container_with_mcp_port
    +port
    +container_with_other_port
    +port
    +container_no_ports
    +port
    +image_with_mcp_port
    +port
    +image_no_ports
    +port
    +service_with_mcp_port
    +port
    +service_no_ports
    +port
    +ws_container
    +http_container
    +stdio_container
    +default_container
    +ws_image
    +http_image
    +default_image
    +ws_service
    +http_service
    +default_service
    +containers
    +servers
    +server
    +images
    +servers
    +server
    +compose_files
    +servers
    +server
    +running_server
    +image_server
    +best
    +best
    +server
    +detection_data
    +confidence
    +confidence
    +confidence
    +confidence
    +result
    +result
    +result
    +result
    +inspector
    +mock_settings
    +inspector
    --
    +inspector()
    +mock_settings()
    +test_init(mock_settings)
    +test_get_detection_method(inspector)
    +test_is_docker_available_success(mock_run, inspector)
    +test_is_docker_available_failure(mock_run, inspector)
    +test_get_docker_info_success(mock_run, inspector)
    +test_get_docker_info_failure(mock_run, inspector)
    +test_is_mcp_image_name_known_images(inspector)
    +test_is_mcp_image_name_patterns(inspector)
    +test_is_mcp_container(inspector)
    +test_is_mcp_image(inspector)
    +test_is_mcp_service(inspector)
    +test_get_container_details_success(mock_run, inspector)
    +test_get_container_details_failure(mock_run, inspector)
    +test_get_image_details_success(mock_run, inspector)
    +test_get_image_details_failure(mock_run, inspector)
    +test_analyze_compose_file_success(mock_file, inspector)
    +test_analyze_compose_file_failure(inspector)
    +test_has_mcp_services(inspector)
    +test_extract_mcp_services(inspector)
    +test_get_container_confidence(inspector)
    +test_get_image_confidence(inspector)
    +test_get_service_confidence(inspector)
    +test_extract_container_port(inspector)
    +test_extract_image_port(inspector)
    +test_extract_service_port(inspector)
    +test_infer_transport_from_container(inspector)
    +test_infer_transport_from_image(inspector)
    +test_infer_transport_from_service(inspector)
    +test_analyze_containers(inspector)
    +test_analyze_images(inspector)
    +test_analyze_compose_files(inspector)
    +test_select_best_mcp_server(inspector)
    +test_calculate_confidence(inspector)
    +test_detect_docker_not_available(mock_docker_available, inspector)
    +test_detect_success(mock_compose, mock_images, mock_containers, mock_docker_info, mock_docker_available, inspector)
    +test_detect_no_servers(mock_compose, mock_images, mock_containers, mock_docker_info, mock_docker_available, inspector)
    +test_detect_exception(mock_docker_available, inspector)
    +test_create_docker_inspector()
  }

  class TestMCPCapabilityAnalyzer {
    +result
    +test_functions
    +categories
    +file_functions
    +file_categories
    +exec_functions
    +exec_categories
    +tool_functions
    +security_functions
    +function_names
    +mcp_servers
    +context
    +servers
    +server
    +results
    +result
    +successful_analyses
    +coverage_ratio
    --
    +setup_method()
    +test_analyze_tool_basic()
    +test_categorize_capabilities()
    +test_identify_security_relevant_functions()
    +test_build_environment_context()
    +test_capability_coverage_95_percent()
  }

  class TestAttackVectorGenerator {
    +mock_response: str
    +capabilities
    +context
    +vectors
    +vector
    +mock_response: str
    +db_capabilities
    +context
    +vectors
    +vector
    +vector_text
    +db_terms
    --
    +setup_method()
  }

  class TestScenarioBuilder {
    +mock_response
    +scenarios
    +scenario
    +scenario_text
    +business_terms
    +contexts
    +mock_responses
    +results
    +scenarios
    +dev_scenario
    +prod_scenario
    --
    +setup_method()
  }

  class TestAlgorithmAccuracy {
    +test_cases
    +mock_response
    +result
    +identified_threats
    +expected_threats
    +overlap
    +accuracy
    +test_attack_vectors
    +mock_response
    +chains
    +chain
    +techniques
    +expected_techniques
    +overlap
    +test_threats
    +priority
    +expected
    +test_tools
    +start_time
    +cap_result
    +attack_vectors
    +scenarios
    +end_time
    +processing_time
    --
    +setup_method()
  }

  class TestEnvironmentAnalyzer {
    +settings
    +analyzer
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +env_vars
    +indicators
    +env_vars
    +cmdline
    +confidence
    +env_vars
    +cmdline
    +confidence
    +env_vars
    +cmdline
    +confidence
    +confidence
    +confidence
    +confidence
    +confidence
    +env_vars
    +servers
    +server
    +env_vars
    +mock_proc
    +process_envs
    +proc_env
    +mock_proc
    +process_envs
    +process_envs
    +detection_data
    +indicators
    +detection_data
    +indicators
    +transport_types
    +detection_data
    +indicators
    +ports
    +mcp_port_indicators
    +detection_data
    +indicators
    +security_types
    +high_confidence_server
    +low_confidence_server
    +best
    +server
    +detection_data
    +confidence
    +result
    +result
    +result
    +analyzer
    +mock_settings
    +analyzer
    --
    +analyzer()
    +mock_settings()
    +test_init(mock_settings)
    +test_get_detection_method(analyzer)
    +test_is_mcp_related_env_var_known_vars(analyzer)
    +test_is_mcp_related_env_var_patterns(analyzer)
    +test_extract_host_from_env(analyzer)
    +test_extract_port_from_env(analyzer)
    +test_extract_transport_from_env(analyzer)
    +test_determine_server_type_from_env(analyzer)
    +test_extract_env_indicators(analyzer)
    +test_calculate_process_env_confidence(analyzer)
    +test_get_env_var_confidence(analyzer)
    +test_extract_servers_from_env(analyzer)
    +test_analyze_system_environment(analyzer)
    +test_analyze_process_environments(mock_process_iter, analyzer)
    +test_analyze_process_environments_access_denied(mock_process_iter, analyzer)
    +test_analyze_process_environments_no_psutil(analyzer)
    +test_extract_mcp_indicators(analyzer)
    +test_extract_transport_indicators(analyzer)
    +test_extract_port_indicators(analyzer)
    +test_extract_security_indicators(analyzer)
    +test_select_best_mcp_server(analyzer)
    +test_calculate_confidence(analyzer)
    +test_detect_success(mock_process_env, mock_system_env, analyzer)
    +test_detect_no_servers(mock_process_env, mock_system_env, analyzer)
    +test_detect_exception(mock_system_env, analyzer)
    +test_create_environment_analyzer()
  }

  class TestRiskPrioritizationAlgorithm {
    +priority
    +priority
    +priority
    +test_cases
    +priority
    --
    +setup_method()
    +test_calculate_priority_high_risk()
    +test_calculate_priority_low_risk()
    +test_calculate_priority_medium_risk()
    +test_prioritization_algorithm_accuracy()
  }

  class TestOverallPhase5Integration {
    +test_servers
    +server
    +start_time
    +results
    +result
    +priority
    +end_time
    +processing_time
    +successful_results
    +success_rate
    +known_patterns
    +correct_categorizations: int
    +total_tests
    +categories
    +accuracy
    --
    +setup_method()
    +test_phase5_performance_benchmark()
    +test_phase5_accuracy_validation()
  }

  class TestNPXDetector {
    +settings
    +detector
    +cmdline1: str
    +cmdline2: str
    +cmdline3: str
    +http_package
    +ws_package
    +default_package
    +http_cmdline
    +ws_cmdline
    +stdio_cmdline
    +default_cmdline
    +cmdline1
    +cmdline2
    +cmdline3
    +cmdline4
    +npm_output
    +packages
    +packages
    +packages
    +package_names
    +mock_proc1
    +mock_proc2
    +processes
    +processes
    +packages
    +servers
    +server
    +processes
    +servers
    +server
    +package_json_content
    +config_info
    +server1
    +server2
    +best
    +best
    +server
    +detection_data
    +confidence
    +confidence
    +confidence
    +confidence
    +result
    +result
    +result
    +detector
    +mock_settings
    +detector
    --
    +detector()
    +mock_settings()
    +test_init(mock_settings)
    +test_get_detection_method(detector)
    +test_is_mcp_package_known_packages(detector)
    +test_is_mcp_package_patterns(detector)
    +test_is_npx_mcp_process(detector)
    +test_extract_package_name(detector)
    +test_get_package_confidence(detector)
    +test_get_process_confidence(detector)
    +test_infer_transport_type(detector)
    +test_infer_transport_from_cmdline(detector)
    +test_extract_port_from_cmdline(detector)
    +test_detect_global_npx_packages_success(mock_run, detector)
    +test_detect_global_npx_packages_failure(mock_run, detector)
    +test_detect_local_mcp_packages(mock_detect, detector)
    +test_detect_running_npx_processes(mock_process_iter, detector)
    +test_detect_running_npx_processes_no_psutil(mock_process_iter, detector)
    +test_analyze_npx_packages(detector)
    +test_analyze_running_processes(detector)
    +test_analyze_package_config(mock_file, detector)
    +test_select_best_mcp_server(detector)
    +test_calculate_confidence(detector)
    +test_detect_success(mock_processes, mock_local, mock_global, detector)
    +test_detect_no_servers(mock_processes, mock_local, mock_global, detector)
    +test_detect_exception(mock_global, detector)
    +test_create_npx_detector()
  }

  class TestDetectionPipelineIntegration {
    +process_info
    +server_info
    +tools
    +resources
    +pipeline
    +pipeline
    +pipeline
    +mock_introspection
    +result
    +pipeline
    +failed_result
    +result
    +config
    +pipeline
    +result
    +pipeline
    +high_risk_capabilities: mock_capabilities
    +mock_introspection
    +result
    +pipeline
    +detection_results
    +mcp_servers
    +pipeline
    +result
    +mock_result
    +pipeline
    +targets
    +results
    +pipeline
    +stats
    +updated_stats
    +pipeline
    +result
    +pipeline
    +server_info
    +low_confidence_result
    +result
    --
    +pipeline_config()
    +mock_detection_result()
    +mock_capabilities()
    +test_pipeline_initialization(pipeline_config)
    +test_pipeline_factory_function(pipeline_config)
    +test_execute_pipeline_success(pipeline_config, mock_detection_result, mock_capabilities)
    +test_execute_pipeline_no_mcp_servers(pipeline_config)
    +test_execute_pipeline_introspection_disabled(mock_detection_result)
    +test_execute_pipeline_with_risk_assessment(pipeline_config, mock_detection_result, mock_capabilities)
    +test_extract_mcp_servers(pipeline_config, mock_detection_result)
    +test_analyze_results(pipeline_config, mock_detection_result)
    +test_batch_pipeline_execution(pipeline_config)
    +test_pipeline_statistics(pipeline_config)
    +test_pipeline_error_handling(pipeline_config)
    +test_confidence_threshold_filtering(pipeline_config)
  }

  class TestPipelineConfigurationOptions {
    +config
    +pipeline
    +config
    +pipeline
    +config
    +pipeline
    --
    +test_minimal_configuration()
    +test_full_configuration()
    +test_custom_thresholds()
  }

  class TestProcessEnumerator {
    +result
    +result
    +mock_proc
    +result
    +mock_proc
    +result
    +processes
    +node_processes
    +found_pids
    +mcp_process
    +mcp_package_process
    +regular_process
    +mcp_dir_process
    +high_conf_process
    +confidence
    +med_conf_process
    +confidence
    +low_conf_process
    +confidence
    +cmdline1
    +port
    +cmdline2
    +port
    +cmdline3
    +port
    +cmdline4
    +port
    +process
    +server_info
    +result
    +process
    +process_dict
    --
    +setUp()
    +test_detector_initialization()
    +test_detect_non_localhost()
    +test_enumerate_processes_empty(mock_process_iter)
    +test_enumerate_processes_with_node(mock_process_iter)
    +test_enumerate_processes_with_mcp(mock_process_iter)
    +test_filter_node_processes()
    +test_has_mcp_indicators()
    +test_calculate_confidence()
    +test_extract_port_from_cmdline()
    +test_create_mcp_server_info()
    +test_detect_with_exception(mock_process_iter)
    +test_process_to_dict()
  }

  class TestPhase5MCPCapabilityAnalyzer {
    +result
    +test_cases
    +correct_categorizations: int
    +total_tests
    +categories
    +accuracy
    +servers
    +context
    +servers
    +server
    +successful_analyses: int
    +result
    +coverage
    --
    +setup_method()
    +test_analyzer_initialization()
    +test_analyze_tool_basic_functionality()
    +test_categorize_capabilities_accuracy()
    +test_build_environment_context()
    +test_capability_analysis_coverage()
  }

  class TestPhase5AttackVectorGenerator {
    +mock_response: str
    +capabilities
    +context
    +vectors
    +responses
    +file_cap
    +db_cap
    +context
    +file_vectors
    +db_vectors
    --
    +setup_method()
  }

  class TestPhase5RiskPrioritization {
    +test_cases
    +correct_prioritizations: int
    +priority
    +accuracy
    +high_priority
    +low_priority
    +priority1
    +priority2
    --
    +setup_method()
    +test_risk_prioritization_accuracy()
    +test_prioritization_edge_cases()
  }

  class TestPhase5PerformanceBenchmarks {
    +test_servers
    +server
    +start_time
    +results
    +result
    +priority
    +end_time
    +processing_time
    +successful_results
    +success_rate
    +server
    +capabilities
    +functions
    +categories
    +priority
    --
    +setup_method()
    +test_phase5_performance_requirements()
    +test_algorithm_integration()
  }

  class TestConfigFileDiscovery {
    +result
    +result
    +config_info
    +result
    +result
    +result
    +mock_path
    +found_file
    +result
    +result
    +config_info
    +result
    +package_data
    +result
    +config_data
    +result
    +yaml_data
    +mock_yaml
    +result
    +result
    +dockerfile_content: str
    +result
    +text_content: str
    +result
    +result
    +package_json
    +result
    +config_info
    +config_info
    +config_info
    +config_info
    +config_info
    +config_info
    +config_info
    +confidence
    +config_info
    +confidence
    +config_info
    +confidence
    +config_info
    +port
    +config_info
    +port
    +config_info
    +port
    +config_info
    +transport
    +config_info
    +transport
    +config_info
    +transport
    +config_info
    +server_type
    +config_info
    +server_type
    +config_info
    +server_type
    +config_info
    +capabilities
    +config_info
    +tools
    +config_info
    +resources
    +config_info
    +version
    +config_info
    +version
    +config_info
    +security_config
    +config_info
    +result
    +result
    +config_info
    +result
    +config_info
    +result
    --
    +setup_method()
    +test_init()
    +test_get_detection_method()
    +test_detect_remote_host_error()
    +test_detect_no_mcp_configs(mock_analyze, mock_discover)
    +test_detect_with_mcp_configs(mock_create_server, mock_confidence, mock_analyze, mock_discover)
    +test_detect_exception_handling(mock_discover)
    +test_discover_config_files_nonexistent_path()
    +test_discover_config_files_success(mock_rglob, mock_is_dir, mock_exists, mock_expanduser)
    +test_analyze_config_files_empty_list()
    +test_analyze_config_files_with_mcp_indicators(mock_has_indicators, mock_analyze_single)
    +test_parse_package_json()
    +test_parse_json_file()
    +test_parse_yaml_file_with_yaml()
    +test_parse_yaml_file_without_yaml()
    +test_parse_dockerfile()
    +test_parse_text_file_with_mcp_content()
    +test_parse_text_file_unicode_error()
    +test_extract_dependencies()
    +test_has_mcp_indicators_dependencies()
    +test_has_mcp_indicators_scripts()
    +test_has_mcp_indicators_mcp_config()
    +test_has_mcp_indicators_content()
    +test_has_mcp_indicators_script_patterns()
    +test_has_mcp_indicators_none()
    +test_calculate_config_confidence_base()
    +test_calculate_config_confidence_with_mcp_dependencies()
    +test_calculate_config_confidence_dedicated_config()
    +test_extract_port_from_config_mcp_section()
    +test_extract_port_from_config_scripts()
    +test_extract_port_from_config_content()
    +test_determine_transport_type_websocket()
    +test_determine_transport_type_http()
    +test_determine_transport_type_stdio()
    +test_determine_server_type_package_json()
    +test_determine_server_type_npx_package()
    +test_determine_server_type_docker()
    +test_extract_capabilities()
    +test_extract_tools()
    +test_extract_resources()
    +test_extract_version_package_json()
    +test_extract_version_mcp_config()
    +test_extract_security_config()
    +test_config_to_dict()
    +test_discover_config_files_in_path()
    +test_analyze_specific_config_file_not_found()
    +test_analyze_specific_config_file_success(mock_has_indicators, mock_analyze_single, mock_exists)
    +test_analyze_specific_config_file_no_indicators(mock_has_indicators, mock_analyze_single, mock_exists)
  }

}

package "tests.test_detection.test_mcp_introspection" {
  class TestToolRiskAnalyzer {
    +risks
    +risks
    +high_risks
    +code_exec_risks
    +risky_names
    +tool
    +risks
    +risky_descriptions
    +tool
    +risks
    +risky_schema
    +tool
    +risks
    +param_risks
    +test_cases
    +score
    +risks
    +score
    +file_tools
    +risks
    +file_risks
    +network_tools
    +risks
    +network_risks
    +exec_tools
    +risks
    +exec_risks
    +data_tools
    +risks
    +data_risks
    +priv_tools
    +risks
    +priv_risks
    +sys_tools
    +risks
    +sys_risks
    +tools
    +results
    +sample_score
    +dangerous_score
    +tools
    +results
    +summary
    +empty_tool
    +risks
    +malformed_tool
    +risks
    +complex_schema
    +tool
    +risks
    +custom_pattern
    +tool
    +risks
    +custom_risks
    +tools
    +tool
    +start_time
    +results
    +end_time
    --
    +setUp()
    +test_analyzer_initialization()
    +test_analyze_tool_basic()
    +test_analyze_dangerous_tool()
    +test_detect_name_patterns()
    +test_detect_description_patterns()
    +test_analyze_parameters()
    +test_calculate_risk_score()
    +test_calculate_composite_score()
    +test_file_system_risk_detection()
    +test_network_risk_detection()
    +test_code_execution_risk_detection()
    +test_data_access_risk_detection()
    +test_privilege_escalation_risk_detection()
    +test_system_modification_risk_detection()
    +test_analyze_multiple_tools()
    +test_get_risk_summary()
    +test_empty_tool_analysis()
    +test_malformed_schema_handling()
    +test_complex_schema_analysis()
    +test_risk_pattern_customization()
    +test_performance_with_large_tool_set()
  }

  class TestRiskCategorizer {
    +profile
    +profile
    +expected_categories
    +actual_categories
    +profile
    +expected_counts
    +profile
    +profile
    +current_cat
    +next_cat
    +current_analysis
    +next_analysis
    +profile
    +max_possible
    +profile
    +single_risk
    +profile
    +file_risks
    +profile
    +file_analysis
    +risks
    +profile
    +code_analysis
    +file_analysis
    +risks
    +profile
    +analysis
    +profile
    +high_risk_cats
    +expected_high_risk
    +profile
    +recommendations
    +risks1
    +risks2
    +profile1
    +profile2
    +comparison
    +profiles
    +risks
    +trends
    +profile
    +summary
    +file_risks
    +high_risks
    +expected_count
    +profile
    +impact
    +profile
    +distribution
    +cat_percentages
    +total_cat_percentage
    +patterns
    +custom_weights
    +custom_categorizer
    +custom_multipliers
    +custom_categorizer
    +many_risks
    +risk
    +start_time
    +profile
    +end_time
    +identical_risks
    +profile
    +analysis
    --
    +setUp()
    +test_categorizer_initialization()
    +test_categorize_risks_basic()
    +test_risk_profile_creation()
    +test_severity_distribution()
    +test_category_analysis()
    +test_priority_ranking()
    +test_risk_score_calculation()
    +test_empty_risk_list()
    +test_single_risk_categorization()
    +test_same_category_multiple_risks()
    +test_category_weights()
    +test_severity_multipliers()
    +test_get_high_risk_categories()
    +test_get_category_recommendations()
    +test_compare_profiles()
    +test_analyze_risk_trends()
    +test_generate_risk_summary()
    +test_filter_by_category()
    +test_filter_by_severity()
    +test_calculate_category_impact()
    +test_risk_distribution_analysis()
    +test_identify_risk_patterns()
    +test_custom_category_weights()
    +test_custom_severity_multipliers()
    +test_performance_with_many_risks()
    +test_edge_case_all_same_risk()
  }

  class MockTransportHandler {
    -__init__()
  }

  class TestBaseTransportHandler {
    +handler
    +handler
    +info
    +expected_keys
    +handler
    +call_times
    +original_create_session
    +delay1
    +delay2
    +tasks
    +custom_logger
    +handler
    +handler
    --
    +handler()
    +failing_handler()
    +timeout_handler()
    +test_initialization(handler)
    +test_is_connected_property(handler)
    +test_get_connection_info(handler)
    +test_custom_logger()
    +test_default_logger()
  }

  class TestTransportErrors {
    +error
    +error
    +error
    --
    +test_transport_error_base()
    +test_connection_timeout_error()
    +test_connection_failed_error()
  }

  class TestTransportHandlerEdgeCases {
    +handler
    +handler
    +handler
    --
    +test_invalid_initialization_parameters()
  }

  class TestPoolStats {
    +stats
    +stats
    --
    +test_pool_stats_creation()
    +test_default_stats()
  }

  class TestConnectionInfo {
    +mock_handler
    +created_time
    +conn_info
    +mock_handler
    +created_time
    +custom_id: str
    +conn_info
    +mock_handler
    +created_time
    +conn_info
    +expected_id
    --
    +test_connection_info_creation()
    +test_connection_info_with_custom_id()
    +test_connection_info_auto_id_generation()
  }

  class TestConnectionPool {
    +handler
    +handler1_id
    +handler2_id
    +connections
    +conn_ctx
    +handler
    +handler
    +pool
    +stats
    +stats
    +health
    +created_connections
    +destroyed_connections
    +tasks
    +results
    --
    +mock_handler_factory()
    +factory()
    +connection_pool()
    +test_pool_initialization(connection_pool)
    +timeout_factory()
    +failing_factory()
  }

  class TestTransportExceptions {
    +error
    +error
    +error
    --
    +test_transport_error()
    +test_connection_failed_error()
    +test_connection_timeout_error()
  }

  class TestStreamableHTTPTransportHandler {
    +logger
    +session
    +valid_urls
    +invalid_urls
    +invalid_urls
    +auth
    +headers
    +auth
    +headers
    +auth
    +headers
    +auth
    +headers
    +expected
    +headers
    +mock_session
    +mock_connector_instance
    +session
    +mock_connector
    +result
    +result
    +result
    +mock_session
    +result
    +result
    +mock_response
    +mock_session
    +endpoints
    +expected
    +mock_session
    +endpoints
    +info
    +expected
    +info
    +mock_session
    +repr_str
    --
    +handler()
    +mock_session()
    +test_init(handler)
    +test_validate_url_valid_http(handler)
    +test_validate_url_invalid_scheme(handler)
    +test_validate_url_missing_hostname(handler)
    +test_prepare_auth_headers_bearer_token(handler)
    +test_prepare_auth_headers_api_key(handler)
    +test_prepare_auth_headers_api_key_default_header(handler)
    +test_prepare_auth_headers_custom_headers(handler)
    +test_prepare_auth_headers_empty(handler)
    +test_get_server_info(handler)
    +test_get_server_info_no_auth(handler)
    +test_repr(handler)
  }

  class TestStreamableHTTPTransportHandlerIntegration {
    +mock_session
    +mock_connector_instance
    +health
    +mock_session
    +call_args
    +mock_session
    +call_args
    +mock_session
    +call_args
    +mock_session
    +call_args
    +headers
    --
    +handler()
  }

  class TestLegacyIntrospectionResult {
    +result
    +result
    --
    +test_result_creation_success()
    +test_result_creation_failure()
  }

  class TestNodeJSCompatibilityLayer {
    +config
    +script
    +transport_type
    +http_server_info
    +transport_type
    +sse_server_info
    +transport_type
    +config
    +http_server_info
    +config
    +new_tools
    +new_resources
    +new_server_info
    +legacy_result
    +tool
    +resource
    +mock_result
    +mock_introspection_instance
    +script_content: str
    +result
    +mock_result
    +mock_introspection_instance
    +script_content: str
    +result
    +mock_result
    +mock_introspection_instance
    +result
    +result
    --
    +compat_layer()
    +sample_server_info()
    +sample_process_info()
    +test_compatibility_layer_initialization(compat_layer)
    +test_generate_introspection_script(compat_layer, sample_server_info, sample_process_info)
    +test_determine_transport_type_stdio(compat_layer, sample_server_info, sample_process_info)
    +test_determine_transport_type_http(compat_layer, sample_process_info)
    +test_determine_transport_type_sse(compat_layer, sample_process_info)
    +test_convert_to_server_config_stdio(compat_layer, sample_server_info, sample_process_info)
    +test_convert_to_server_config_http(compat_layer, sample_process_info)
    +test_convert_to_legacy_result(compat_layer)
    +test_execute_introspection_script_success(mock_introspection_class, compat_layer, sample_server_info, sample_process_info)
    +test_execute_introspection_script_failure(mock_introspection_class, compat_layer, sample_server_info, sample_process_info)
    +test_introspect_server_legacy_success(mock_introspection_class, compat_layer, sample_server_info, sample_process_info)
    +test_introspect_server_legacy_exception(compat_layer, sample_server_info, sample_process_info)
  }

  class TestLegacyMCPIntrospector {
    +config
    +mock_result
    +mock_compat_layer_instance
    +result
    +mock_result
    +mock_compat_layer_instance
    +result
    +script
    +mock_result
    +mock_compat_layer_instance
    +script_content: str
    +result
    +mock_result
    +mock_compat_layer_instance
    +script_content: str
    +result
    --
    +legacy_introspector()
    +sample_server_info()
    +sample_process_info()
    +test_legacy_introspector_initialization(legacy_introspector)
    +test_introspect_server_success(mock_compat_layer_class, legacy_introspector, sample_server_info, sample_process_info)
    +test_introspect_server_failure(mock_compat_layer_class, legacy_introspector, sample_server_info, sample_process_info)
    +test_generate_script(legacy_introspector, sample_server_info, sample_process_info)
    +test_execute_script_success(mock_compat_layer_class, legacy_introspector, sample_server_info, sample_process_info)
    +test_execute_script_failure(mock_compat_layer_class, legacy_introspector, sample_server_info, sample_process_info)
  }

  class TestConvenienceFunctions {
    +legacy_config
    +legacy_file
    +result
    +valid_config
    +config_file
    --
    +setUp()
    +tearDown()
    +test_migrate_legacy_configuration()
    +test_validate_configuration()
  }

  class TestIntegrationScenarios {
    +pool_config
    +cache_config
    +pool
    +cache
    +mock_factory
    +result
    +cached_result
    +memory_config
    +scaling_config
    +memory_optimizer
    +test_data
    +batch_size
    +batch
    +processed
    +stats
    +pool_config
    +cache_config
    +memory_config
    +pool
    +cache
    +memory_optimizer
    +mock_factory
    +servers
    +results
    +cache_key
    +cached_result
    +result
    +pool_metrics
    +cache_stats
    +memory_stats
    --
    +test_cache_and_pool_integration()
    +test_memory_and_scaling_integration()
    +test_comprehensive_optimization_pipeline()
  }

  class TestStdioTransportHandler {
    +session
    +session
    +result
    +result
    +result
    +result
    +info
    +info
    +repr_str
    +repr_str
    +mock_session
    +message
    +info
    --
    +handler()
    +mock_session()
    +test_init(handler)
    +test_validate_command_valid(handler)
    +test_validate_command_invalid(handler)
    +test_validate_command_not_found(mock_which, handler)
    +test_validate_command_absolute_path(mock_exists, mock_access, handler)
    +test_get_server_info_not_configured(handler)
    +test_get_server_info_configured(handler)
    +test_repr_not_configured(handler)
    +test_repr_configured(handler)
    +test_connection_info(handler)
  }

  class TestFallbackConfig {
    +config
    +config
    --
    +test_default_configuration()
    +test_custom_configuration()
  }

  class TestFallbackResult {
    +server_info
    +result
    +result1
    +result2
    --
    +test_fallback_result_creation()
    +test_degraded_result_detection()
  }

  class TestFallbackStatistics {
    +stats
    +stats
    --
    +test_statistics_initialization()
    +test_success_rate_calculation()
  }

  class TestHeuristicAnalyzer {
    +analyzer
    +result
    +result
    +server_config
    +error_context
    +server_config
    +server_info
    --
    +analyzer_config()
    +heuristic_analyzer(analyzer_config)
    +test_analyzer_initialization(analyzer_config)
    +test_command_analysis(heuristic_analyzer)
    +test_transport_analysis(heuristic_analyzer)
    +test_server_analysis(heuristic_analyzer)
    +test_minimal_server_info_creation(heuristic_analyzer)
  }

  class TestFallbackManager {
    +manager
    +timeout_error
    +reason
    +conn_error
    +reason
    +perm_error
    +reason
    +unknown_error
    +reason
    +server_config
    +error
    +result
    +server_config
    +error
    +result
    +server_config
    +error
    +result
    +cached_info
    +cache_key
    +result
    +server_config
    +error
    +error_context
    +result
    +server_config
    +error
    +result
    +server_config
    +error
    +error_context
    +result
    +server_config
    +error
    +result
    +stats
    +cache_info
    +server_info
    --
    +fallback_config()
    +fallback_manager(fallback_config)
    +test_manager_initialization(fallback_config)
    +test_failure_categorization(fallback_manager)
    +test_skip_strategy(fallback_manager)
    +test_basic_info_strategy(fallback_manager)
    +test_cached_result_strategy(fallback_manager)
    +test_heuristic_analysis_strategy(fallback_manager)
    +test_minimal_safe_strategy(fallback_manager)
    +test_fallback_cascade(fallback_manager)
    +test_statistics_tracking(fallback_manager)
    +test_cache_management(fallback_manager)
  }

  class TestErrorHandling {
    +config
    +manager
    +server_config
    +network_errors
    +result
    +config
    +manager
    +server_config
    +error
    +result
    +failure_reason
    --
    +test_network_error_handling()
    +test_permission_error_handling()
  }

  class TestMCPCapabilities {
    +capabilities
    +experimental
    +capabilities
    +capabilities
    +capabilities
    +count
    --
    +test_default_capabilities()
    +test_custom_capabilities()
    +test_has_capability()
    +test_get_capability_count()
  }

  class TestMCPTool {
    +schema
    +tool
    +schema
    +risk_categories
    +security_notes
    +tool
    +tool
    +schema
    +tool
    +required
    +schema
    +tool
    +optional
    --
    +test_basic_tool()
    +test_tool_with_risk_assessment()
    +test_has_risk_category()
    +test_get_required_parameters()
    +test_get_optional_parameters()
  }

  class TestMCPResource {
    +resource
    +risk_categories
    +security_notes
    +resource
    +resource
    +scheme
    +local_resource
    +remote_resource
    --
    +test_basic_resource()
    +test_resource_with_risk_assessment()
    +test_get_uri_scheme()
    +test_is_local_resource()
  }

  class TestMCPServerInfo {
    +capabilities
    +tools
    +resources
    +server_info
    +server_info
    +tools
    +server_info
    +resources
    +server_info
    +tools
    +server_info
    +high_risk
    --
    +test_basic_server_info()
    +test_server_info_with_error()
    +test_get_tool_count()
    +test_get_resource_count()
    +test_get_high_risk_tools()
  }

  class TestRiskAssessment {
    +findings
    +assessment
    +findings
    +assessment
    +high_findings
    +critical_findings
    +findings
    +assessment
    +file_findings
    +network_findings
    --
    +test_basic_risk_assessment()
    +test_get_findings_by_severity()
    +test_get_findings_by_category()
  }

  class TestSecurityFinding {
    +finding
    +high_finding
    +critical_finding
    +low_finding
    --
    +test_security_finding_creation()
    +test_is_high_severity()
  }

  class TestComplianceCheck {
    +check
    +compliant_check
    +non_compliant_check
    --
    +test_compliance_check_creation()
    +test_is_compliant()
  }

  class TestPerformanceMetrics {
    +metrics
    +fast_metrics
    +slow_metrics
    --
    +test_performance_metrics_creation()
    +test_is_performant()
  }

  class TestTransportConfig {
    +config
    +config
    +valid_config
    +invalid_config
    +valid_config
    +invalid_config
    --
    +test_stdio_transport_config()
    +test_sse_transport_config()
    +test_validate_stdio_config()
    +test_validate_sse_config()
  }

  class TestMCPIntrospectionResult {
    +server_info
    +risk_assessment
    +performance_metrics
    +result
    +result
    +server_info
    +result
    +result_dict
    --
    +test_introspection_result_creation()
    +test_failed_introspection_result()
    +test_to_dict()
  }

  class TestEnums {
    +test_risk_level_enum()
    +test_security_category_enum()
    +test_compliance_status_enum()
  }

  class TestValidationError {
    +error
    --
    +test_validation_error()
  }

  class TestPerformanceMetric {
    +timestamp
    +metric
    +metric
    --
    +test_metric_creation()
    +test_metric_with_defaults()
  }

  class TestTimingMetric {
    +start_time
    +timing
    +start_time
    +timing
    +start_time
    +timing
    --
    +test_timing_metric_creation()
    +test_timing_metric_finish_success()
    +test_timing_metric_finish_failure()
  }

  class TestMetricsCollector {
    +metric
    +timing
    +timing
    +values
    +stats
    +stats
    +timing1
    +timing2
    +timing3
    +summary
    +op1_stats
    +op2_stats
    +recent
    +timing
    +report
    +timing
    +threads
    +thread
    --
    +collector()
    +test_collector_initialization(collector)
    +test_record_metric(collector)
    +test_start_and_finish_timing(collector)
    +test_timing_with_failure(collector)
    +test_increment_counter(collector)
    +test_set_gauge(collector)
    +test_get_counter(collector)
    +test_get_gauge(collector)
    +test_histogram_stats(collector)
    +test_histogram_stats_empty(collector)
    +test_operation_summary(collector)
    +test_recent_metrics(collector)
    +test_performance_report(collector)
    +test_clear_metrics(collector)
    +test_thread_safety(collector)
    +worker()
  }

  class TestPerformanceMonitor {
    +report
    +result
    +report
    +report
    +stats
    +report
    +report
    +report
    --
    +monitor()
    +test_monitor_initialization(monitor)
    +test_time_operation_context(monitor)
    +test_monitor_function_decorator(monitor)
    +test_function(y)
    +test_monitor_function_with_exception(monitor)
    +failing_function()
    +test_record_metric(monitor)
    +test_increment_counter(monitor)
    +test_set_gauge(monitor)
  }

  class TestTimingContext {
    +timing
    +timing
    --
    +collector()
    +test_timing_context_success(collector)
    +test_timing_context_with_exception(collector)
  }

  class TestGlobalFunctions {
    +monitor1
    +monitor2
    +result
    +monitor
    +report
    +result
    +monitor
    +report
    --
    +test_get_global_monitor()
    +test_time_operation_decorator()
    +test_function()
    +test_monitor_function_decorator()
    +test_function()
  }

  class TestCompositeRiskScore {
    +valid_score
    +boundary_score
    +critical_score
    +high_score
    +medium_score
    +low_score
    +info_score
    +score_dict
    +breakdown
    +component_scores
    --
    +setUp()
    +test_score_initialization()
    +test_score_validation()
    +test_get_risk_level()
    +test_to_dict()
    +test_score_breakdown()
  }

  class TestRiskScorer {
    +risk
    +score
    +scores
    +score
    +severity_score
    +likelihood_score
    +impact_score
    +exposure_score
    +exploitability_score
    +cvss_scorer
    +risk
    +score
    +weighted_scorer
    +risk
    +score
    +max_scorer
    +risk
    +score
    +component_scores
    +code_risk
    +file_risk
    +code_score
    +file_score
    +scores
    +aggregated
    +test_values
    +normalized
    +high_risk
    +score
    +recommendations
    +risk1
    +risk2
    +score1
    +score2
    +comparison
    +scores
    +risk
    +trend
    +custom_weights
    +custom_scorer
    +custom_category_weights
    +custom_scorer
    +risk
    +score1
    +score2
    +many_risks
    +risk
    +start_time
    +scores
    +end_time
    +scores
    +aggregated
    +identical_risks
    +scores
    +first_score
    +scores
    +distribution
    +level_mappings
    +risk
    +score
    --
    +setUp()
    +test_scorer_initialization()
    +test_calculate_risk_score_single()
    +test_calculate_risk_score_multiple()
    +test_calculate_tool_risk_score()
    +test_severity_score_calculation()
    +test_likelihood_score_calculation()
    +test_impact_score_calculation()
    +test_exposure_score_calculation()
    +test_exploitability_score_calculation()
    +test_cvss_methodology()
    +test_weighted_average_methodology()
    +test_maximum_methodology()
    +test_category_weight_application()
    +test_aggregate_scores()
    +test_normalize_score()
    +test_get_score_recommendations()
    +test_compare_scores()
    +test_score_trend_analysis()
    +test_custom_weights()
    +test_custom_category_weights()
    +test_score_caching()
    +test_batch_scoring_performance()
    +test_edge_case_zero_risks()
    +test_edge_case_identical_risks()
    +test_score_distribution_analysis()
    +test_risk_level_mapping()
  }

  class TestMigrationConfig {
    +config
    +config
    --
    +test_default_values()
    +test_custom_values()
  }

  class TestLegacyMCPConfig {
    +config
    +servers
    +config
    --
    +test_default_values()
    +test_with_servers()
  }

  class TestMigrationResult {
    +result
    --
    +test_initialization()
  }

  class TestConfigurationMigrator {
    +migrator
    +custom_config
    +migrator
    +config_file
    +config_data
    +backup_path
    +backup_data
    +config_data
    +config_file
    +legacy_config
    +config_content: str
    +config_file
    +legacy_config
    +config
    +config
    +config
    +config
    +config
    +server_config
    +migrated
    +legacy_config
    +result
    +migrated
    +mcp_config
    +valid_config
    +errors
    +invalid_config
    +errors
    +invalid_config
    +errors
    +valid_server
    +errors
    +invalid_server
    +errors
    +invalid_server
    +errors
    +invalid_server
    +errors
    +config
    +output_path
    +saved_data
    +config
    +output_path
    +legacy_config
    +legacy_file
    +output_file
    +result
    +result
    --
    +setUp()
    +tearDown()
    +test_initialization()
    +test_create_backup()
    +test_load_legacy_config_json()
    +test_load_legacy_config_yaml()
    +test_detect_transport_type()
    +test_migrate_server_config()
    +test_migrate_config_structure()
    +test_validate_migrated_config()
    +test_validate_server_config()
    +test_save_migrated_config_json()
    +test_save_migrated_config_yaml()
    +test_migrate_configuration_success()
    +test_migrate_configuration_failure()
  }

  class TestConfigurationValidator {
    +valid_config
    +config_file
    +invalid_config
    +config_file
    +config
    +config_file
    +valid_server
    +errors
    +invalid_server
    +errors
    +invalid_server
    +errors
    +invalid_server
    +errors
    --
    +setUp()
    +tearDown()
    +test_validate_valid_configuration()
    +test_validate_invalid_configuration()
    +test_validate_missing_section()
    +test_validate_server_configuration()
  }

  class TestSSETransportHandler {
    +logger
    +session
    +valid_urls
    +invalid_urls
    +invalid_urls
    +invalid_urls
    +mock_connector_instance
    +session
    +mock_connector
    +result
    +result
    +result
    +mock_session
    +result
    +result
    +info
    +expected
    +mock_session
    +repr_str
    --
    +handler()
    +mock_session()
    +test_init(handler)
    +test_validate_url_valid_http(handler)
    +test_validate_url_invalid_scheme(handler)
    +test_validate_url_missing_hostname(handler)
    +test_validate_url_malformed(handler)
    +test_get_server_info(handler)
    +test_repr(handler)
  }

  class TestSSETransportHandlerIntegration {
    +mock_connector_instance
    +health
    +call_args
    --
    +handler()
  }

  class TestNetworkErrorScenarios {
    +config
    +server_config
    +result
    +server_config
    +start_time
    +result
    +elapsed
    +server_config
    +result
    +server_config
    +result
    +server_config
    +result
    --
    +introspector()
    +test_connection_refused(introspector)
    +test_timeout_error(introspector)
    +test_process_crash(introspector)
    +test_invalid_json_response(introspector)
    +test_partial_response(introspector)
  }

  class TestProtocolErrorScenarios {
    +config
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    --
    +introspector()
    +test_protocol_version_mismatch(introspector)
    +test_malformed_initialize_response(introspector)
    +test_error_response_from_server(introspector)
    +test_missing_required_methods(introspector)
  }

  class TestSystemErrorScenarios {
    +config
    +server_config
    +result
    +server_config
    +result
    +server_config
    +result
    +server_config
    +result
    --
    +introspector()
    +test_command_not_found(introspector)
    +test_permission_denied(introspector)
    +test_working_directory_not_found(introspector)
    +test_environment_variable_issues(introspector)
  }

  class TestResourceLimitScenarios {
    +config
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    --
    +introspector()
    +test_memory_exhaustion_handling(introspector)
    +test_cpu_intensive_server(introspector)
  }

  class TestEdgeCaseScenarios {
    +config
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    +server_script: str
    +server_config
    +result
    +server_config
    +result
    --
    +introspector()
    +test_unicode_handling(introspector)
    +test_large_response_handling(introspector)
    +test_empty_server_response(introspector)
    +test_rapid_server_exit(introspector)
  }

  class TestRetryMechanismScenarios {
    +config
    +server_script: str
    +server_config
    +attempt_file: str
    +result
    +server_config
    +start_time
    +result
    +elapsed
    +expected_min_time
    --
    +introspector()
    +test_retry_on_temporary_failure(introspector)
    +test_retry_exhaustion(introspector)
  }

  class TestErrorReportingScenarios {
    +config
    +server_config
    +result
    +test_cases
    +result
    --
    +introspector()
    +test_detailed_error_information(introspector)
    +test_error_categorization(introspector)
  }

  class TestOptimizedConnectionPool {
    +pool
    +pool
    +mock_factory
    +mock_factory
    +connections
    +conn_ctx
    +mock_factory
    +mock_connection
    +mock_factory
    +mock_factory
    +metrics
    --
    +pool_config()
    +connection_pool(pool_config)
    +test_pool_initialization(pool_config)
    +test_connection_acquisition_and_release(connection_pool)
    +test_connection_pool_limit(connection_pool)
    +test_connection_reuse(connection_pool)
    +test_circuit_breaker(connection_pool)
    +failing_factory()
    +test_health_checks(connection_pool)
    +test_metrics_collection(connection_pool)
  }

  class TestResultCache {
    +cache
    +cache
    +test_result
    +cached_result
    +cache
    +test_result
    +test_result
    +test_result
    +stats
    --
    +cache_config()
    +result_cache(cache_config)
    +test_cache_initialization(cache_config)
    +test_cache_put_and_get(result_cache)
    +test_cache_expiration(cache_config)
    +test_cache_lru_eviction(result_cache)
    +test_cache_statistics(result_cache)
  }

  class TestLargeScaleOptimizer {
    +mock
    +optimizer
    +optimizer
    +servers
    +results
    +processor
    +servers
    +stats
    --
    +scaling_config()
    +mock_introspection()
    +large_scale_optimizer(scaling_config, mock_introspection)
    +test_optimizer_initialization(scaling_config, mock_introspection)
    +test_batch_processing(large_scale_optimizer)
    +test_batch_size_calculation(large_scale_optimizer)
    +test_statistics_tracking(large_scale_optimizer)
  }

  class TestResourceMonitor {
    +monitor
    +monitor
    +usage
    +history
    --
    +scaling_config()
    +resource_monitor(scaling_config)
    +test_monitor_initialization(scaling_config)
    +test_resource_monitoring(resource_monitor)
    +test_throttling_check(resource_monitor)
    +test_resource_history(resource_monitor)
  }

  class TestMemoryOptimizer {
    +optimizer
    +optimizer
    +dummy_data
    +cleanup_stats
    +pool
    +obj
    +stats
    +test_obj
    +ref
    --
    +memory_config()
    +memory_optimizer(memory_config)
    +test_optimizer_initialization(memory_config)
    +test_optimization_lifecycle(memory_optimizer)
    +test_memory_context_manager(memory_optimizer)
    +test_force_cleanup(memory_optimizer)
    +test_object_pool_management(memory_optimizer)
    +factory()
    +test_weak_reference_tracking(memory_optimizer)
  }

  class TestMemoryEfficientCache {
    +cache
    +cleared_count
    +cache
    +expired_count
    --
    +memory_cache()
    +test_cache_basic_operations(memory_cache)
    +test_cache_ttl_expiration()
    +test_cache_size_limit(memory_cache)
    +test_cache_access_order(memory_cache)
    +test_cache_cleanup(memory_cache)
    +test_expired_cleanup()
  }

  class TestGarbageCollectionOptimizer {
    +optimizer
    +original_thresholds
    +new_thresholds
    +dummy_objects
    +stats
    +stats
    --
    +memory_config()
    +gc_optimizer(memory_config)
    +test_gc_optimization_settings(gc_optimizer)
    +test_force_garbage_collection(gc_optimizer)
    +test_gc_statistics(gc_optimizer)
  }

  class TestMemoryLeakDetector {
    +leak_objects
    +leaks
    +original_count
    +dummy_objects
    +new_count
    +leak_objects
    +history
    --
    +memory_config()
    +leak_detector(memory_config)
    +test_baseline_setting(leak_detector)
    +test_leak_detection(leak_detector)
    +test_baseline_reset(leak_detector)
    +test_leak_history(leak_detector)
  }

  class TestFactoryFunctions {
    +optimizer
    +optimizer
    +optimizer
    +optimizer
    --
    +test_create_memory_optimizer()
    +test_create_memory_optimizer_minimal()
  }

  class TestTransportFactory {
    +logger
    +factory
    +handler
    +handler
    +handler
    +mock_transport
    +config
    +transport_type
    +config
    +transport_type
    +config
    +transport_type
    +config
    +transport_type
    +config
    +transport_type
    +config
    +transport_type
    +sse_urls
    +config
    +transport_type
    +http_urls
    +config
    +transport_type
    +config
    +transport_type
    +config
    +transport_type
    +config
    +handler
    +config
    +handler
    +config
    +handler
    +config
    +config
    +config
    +config
    +config
    +config
    +config
    +transports
    +mock_transport
    +mock_handler_class
    +config
    +mock_handler
    +result
    +config
    +mock_handler
    +result
    +config
    +result
    +repr_str
    --
    +factory()
    +test_init(factory)
    +test_init_default_logger()
    +test_create_handler_stdio_enum(factory)
    +test_create_handler_sse_string(factory)
    +test_create_handler_http_with_kwargs(factory)
    +test_create_handler_invalid_string(factory)
    +test_create_handler_unsupported_enum(factory)
    +test_auto_detect_transport_explicit(factory)
    +test_auto_detect_transport_invalid_explicit(factory)
    +test_auto_detect_transport_stdio_command(factory)
    +test_auto_detect_transport_stdio_args_only(factory)
    +test_auto_detect_transport_sse_url(factory)
    +test_auto_detect_transport_http_url(factory)
    +test_auto_detect_transport_base_url(factory)
    +test_auto_detect_transport_fallback(factory)
    +test_create_from_config_stdio(factory)
    +test_create_from_config_sse(factory)
    +test_create_from_config_http(factory)
    +test_validate_config_stdio_valid(factory)
    +test_validate_config_stdio_missing_command(factory)
    +test_validate_config_sse_valid(factory)
    +test_validate_config_sse_missing_url(factory)
    +test_validate_config_http_valid_base_url(factory)
    +test_validate_config_http_valid_url(factory)
    +test_validate_config_http_missing_url(factory)
    +test_get_supported_transports(factory)
    +test_register_handler(factory)
    +test_repr(factory)
  }

  class TestTransportFactoryFunctions {
    +handler
    +handler
    +config
    +handler
    +config
    +handler
    --
    +test_create_transport_handler_stdio()
    +test_create_transport_handler_sse_enum()
    +test_create_transport_handler_invalid()
    +test_create_from_config_stdio()
    +test_create_from_config_http()
  }

  class TestTransportFactoryIntegration {
    +config
    +transport_type
    +handler
    +config
    +transport_type
    +handler
    +config
    +transport_type
    +handler
    +config
    +transport_type
    +handler
    +config
    +transport_type
    +handler
    --
    +factory()
    +test_full_stdio_workflow(factory)
    +test_full_sse_workflow(factory)
    +test_full_http_workflow(factory)
    +test_config_priority_explicit_transport(factory)
    +test_fallback_behavior(factory)
  }

  class TestThreatModel {
    +threat
    +vector
    +threat_id: str
    +mitigation: str
    +threat1
    +threat2
    +data_threats
    +threat1
    +threat2
    +high_threats
    +threat
    +score
    +expected_score
    --
    +setUp()
    +test_threat_model_initialization()
    +test_add_threat()
    +test_add_attack_vector()
    +test_add_mitigation()
    +test_get_threats_by_category()
    +test_get_threats_by_severity()
    +test_calculate_risk_score()
  }

  class TestThreatModelingEngine {
    +threats
    +tools
    +threat_model
    +threats
    +threats
    +file_threats
    +threats
    +network_threats
    +threats
    +exec_threats
    +tools
    +threat_model
    +compound_threats
    +tools
    +threat_model
    +categories
    +threats
    +high_severity
    +threats
    +threats
    +threats
    +tools
    +threat_model
    +dangerous_tool
    +threats
    +high_threats
    +file_capability
    +threats
    +threat_categories
    +tools
    +threat_model
    +total_risk
    +tools
    +threat_model
    +prioritized
    +current_score
    +next_score
    +tools
    +threat_model
    +chains
    +tools
    +threat_model
    +correlations
    +threat_model
    +malformed_tool
    +threats
    +tools
    +tool
    +start_time
    +threat_model
    +end_time
    +custom_pattern
    +tool
    +threats
    +custom_threats
    --
    +setUp()
    +test_engine_initialization()
    +test_analyze_single_tool()
    +test_analyze_multiple_tools()
    +test_analyze_capabilities()
    +test_detect_file_system_threats()
    +test_detect_network_threats()
    +test_detect_code_execution_threats()
    +test_compound_threat_detection()
    +test_threat_categorization()
    +test_severity_assessment()
    +test_likelihood_calculation()
    +test_impact_assessment()
    +test_attack_vector_mapping()
    +test_mitigation_generation()
    +test_threat_pattern_matching()
    +test_capability_threat_mapping()
    +test_risk_aggregation()
    +test_threat_prioritization()
    +test_attack_chain_analysis()
    +test_threat_correlation()
    +test_empty_tool_list()
    +test_malformed_tool_handling()
    +test_performance_with_many_tools()
    +test_custom_threat_patterns()
  }

}

package "tests.compatibility" {
  class MCPVersionMockServer {
    +PROTOCOL_VERSIONS
    +version_info
    +features
    +experimental
    +capabilities
    +tools
    +tools
    +resources
    +resources
    --
    +{class} create_version_script(protocol_version, include_optional_features, include_experimental): str
  }

  class TestMCPVersionCompatibility {
    +config
    +server_config
    +result
    +version_info
    +current_version_config
    +result
    +legacy_config
    +result
    +future_version_script: str
    +future_config
    +result
    --
    +compatibility_introspector()
    +test_version_compatibility(compatibility_introspector, protocol_version)
    +test_version_negotiation(compatibility_introspector)
    +test_backward_compatibility(compatibility_introspector)
    +test_forward_compatibility(compatibility_introspector)
  }

  class TestFeatureCompatibility {
    +config
    +test_cases
    +server_config
    +result
    +test_cases
    +server_config
    +result
    +experimental_script: str
    +experimental_config
    +result
    --
    +feature_test_introspector()
    +test_tools_feature_evolution(feature_test_introspector)
    +test_resources_feature_evolution(feature_test_introspector)
    +test_experimental_features_handling(feature_test_introspector)
  }

  class TestErrorHandlingCompatibility {
    +config
    +minimal_server_script: str
    +minimal_config
    +result
    +malformed_version_script: str
    +malformed_config
    +result
    +old_format_script: str
    +old_format_config
    +result
    --
    +error_test_introspector()
    +test_unsupported_method_handling(error_test_introspector)
    +test_malformed_version_handling(error_test_introspector)
    +test_version_mismatch_handling(error_test_introspector)
  }

  class TestCapabilityNegotiation {
    +config
    +capability_script: str
    +capability_config
    +result
    +limited_capability_script: str
    +limited_config
    +result
    --
    +negotiation_introspector()
    +test_capability_detection(negotiation_introspector)
    +test_graceful_capability_degradation(negotiation_introspector)
  }

}

package "tests.performance" {
  class MemorySnapshot {
    +rss_mb: float
    +vms_mb: float
    +percent: float
    +timestamp: float
    +gc_objects: int
    --
    -__post_init__()
  }

  class MemoryProfiler {
    +memory_info
    +baseline
    +latest
    +rss_growth
    +vms_growth
    +gc_growth
    +recent_snapshots
    +rss_trend
    +is_growing
    +is_growing
    +is_leak
    +baseline
    +latest
    +peak_rss
    --
    -__init__()
    +start_monitoring(interval)
    +monitor()
    +stop_monitoring()
    +take_snapshot(): MemorySnapshot
    +detect_leak(threshold_mb)
    +get_memory_summary()
  }

  class MockServerForLeakTesting {
    +{static} create_normal_server_script(): str
    +{static} create_memory_leaking_server_script(): str
    +{static} create_resource_holding_server_script(): str
  }

  class TestMemoryLeakDetection {
    +config
    +server_config
    +profiler
    +iterations: int
    +result
    +summary
    +server_config
    +profiler
    +iterations: int
    +result
    +summary
    +server_config
    +tracked_objects
    +result
    +alive_objects
    +cleanup_rate
    +server_config
    +memory_snapshots
    +process
    +baseline_memory
    +total_iterations: int
    +sample_interval: int
    +result
    +final_memory
    +memory_growth
    +max_memory
    +memory_variance
    --
    +leak_test_introspector()
    +test_no_memory_leak_with_normal_server(leak_test_introspector)
    +test_memory_leak_detection_with_leaky_server(leak_test_introspector)
    +test_object_reference_cleanup(leak_test_introspector)
    +track_result()
    +test_repeated_introspections_memory_stability(leak_test_introspector)
    +take_memory_snapshot()
  }

  class TestResourceCleanup {
    +config
    +server_config
    +initial_process_count
    +result
    +final_process_count
    +server_config
    +process
    +initial_fds
    +initial_fds
    +result
    +final_fds
    +final_fds
    +fd_growth
    +initial_thread_count
    +server_config
    +result
    +final_thread_count
    +thread_growth
    +error_server_config
    +process
    +initial_children
    +initial_fds
    +initial_fds
    +result
    +final_children
    +final_fds
    +final_fds
    +child_growth
    +fd_growth
    --
    +resource_test_introspector()
    +test_subprocess_cleanup(resource_test_introspector)
    +test_file_handle_cleanup(resource_test_introspector)
    +test_thread_cleanup(resource_test_introspector)
    +test_error_scenario_cleanup(resource_test_introspector)
  }

  class TestCacheMemoryManagement {
    +config
    +server_configs
    +profiler
    +result
    +result
    +summary
    +server_config
    +baseline_memory
    +result
    +cached_memory
    +result
    +final_memory
    +cache_growth
    +final_growth
    --
    +cache_test_introspector()
    +test_cache_memory_bounds(cache_test_introspector)
    +test_cache_cleanup_on_ttl_expiry(cache_test_introspector)
  }

  class TestLongRunningMemoryBehavior {
    +config
    +server_config
    +profiler
    +start_time
    +duration: float
    +operation_count: int
    +result
    +summary
    +server_config
    +max_memory: int
    +operation_count: int
    +result
    +current_memory
    +max_memory
    +final_memory
    +max_memory
    --
    +long_running_introspector()
    +test_long_running_memory_stability(long_running_introspector)
    +test_extended_operation_memory_ceiling(long_running_introspector)
  }

  class PerformanceMetrics {
    +operation_count: int
    +total_time: float
    +average_time: float
    +min_time: float
    +max_time: float
    +median_time: float
    +p95_time: float
    +p99_time: float
    +throughput_ops_per_sec: float
    +memory_usage_mb: float
    +memory_peak_mb: float
    +cpu_usage_percent: float
    +success_rate: float
    +error_count: int
  }

  class PerformanceProfiler {
    +total_time
    +operation_count
    +current_memory
    +cpu_percent
    +sorted_data
    +index
    --
    -__init__()
    +start_monitoring()
    +stop_monitoring()
    +record_operation(duration, success)
    +get_metrics(): PerformanceMetrics
    -_monitor_resources()
    -{static} _percentile(percentile): float
  }

  class MockServerHelper {
    +{static} create_fast_mock_server_script(): str
    +{static} create_slow_mock_server_script(): str
    +{static} create_heavy_mock_server_script(): str
  }

  class TestBasicPerformance {
    +config
    +profiler
    +start_time
    +result
    +duration
    +metrics
    +profiler
    +iterations: int
    +start_time
    +result
    +duration
    +metrics
    +start_time
    +result1
    +first_run_time
    +start_time
    +result2
    +second_run_time
    --
    +fast_introspector()
    +fast_server_config()
    +test_single_introspection_performance(fast_introspector, fast_server_config)
    +test_repeated_introspection_performance(fast_introspector, fast_server_config)
    +test_caching_performance_improvement(fast_introspector, fast_server_config)
  }

  class TestLoadTesting {
    +config
    +server_configs
    +profiler
    +start_time
    +result
    +duration
    +duration
    +max_workers: int
    +futures
    +metrics
    +server_config
    +profiler
    +start_time
    +duration_limit: float
    +operation_interval: float
    +operation_start
    +result
    +operation_duration
    +operation_duration
    +elapsed
    +metrics
    --
    +load_test_introspector()
    +test_concurrent_introspection_load(load_test_introspector)
    +introspect_server()
    +test_sustained_load(load_test_introspector)
  }

  class TestStressTesting {
    +config
    +server_config
    +profiler
    +start_time
    +result
    +duration
    +metrics
    +server_config
    +profiler
    +rapid_fire_count: int
    +start_time
    +result
    +duration
    +duration
    +metrics
    --
    +stress_test_introspector()
    +test_large_response_handling(stress_test_introspector)
    +test_rapid_fire_requests(stress_test_introspector)
  }

  class TestMemoryUsageTesting {
    +config
    +server_config
    +process
    +baseline_memory
    +iterations: int
    +memory_samples
    +result
    +current_memory
    +final_memory
    +memory_increase
    +memory_trend
    +server_configs
    +process
    +baseline_memory
    +result
    +cached_memory
    +cache_overhead
    --
    +memory_test_introspector()
    +test_memory_usage_stability(memory_test_introspector)
    +test_cache_memory_limits(memory_test_introspector)
  }

  class TestPerformanceRegression {
    +PERFORMANCE_BASELINES
    +config
    +server_config
    +profiler
    +samples: int
    +start_time
    +result
    +duration
    +metrics
    +server_config
    +profiler
    +start_time
    +result
    +duration
    +duration
    +futures
    +metrics
    --
    +regression_test_introspector()
    +test_performance_regression_single_operation(regression_test_introspector)
    +test_performance_regression_concurrent_operations(regression_test_introspector)
    +worker()
  }

  class TestScannerPerformance {
    +mock_sock
    +scanner
    +target_count: int
    +ports_per_target: int
    +targets
    +ports
    +start_time
    +target
    +end_time
    +total_time
    +total_scans
    +throughput
    +stats
    +mock_sock
    +scanner
    +targets
    +ports
    +target
    +start_time
    +futures
    +results
    +end_time
    +total_time
    +expected_sequential_time
    +process
    +initial_memory
    +scanner
    +target
    +result
    +current_memory
    +memory_increase
    --
    +setup_method()
    +test_tcp_scan_throughput(mock_socket)
    +test_concurrent_scan_performance(mock_socket)
    +scan_target_wrapper()
    +test_memory_usage_during_large_scan()
  }

  class TestDetectionPerformance {
    +mock_processes
    +mock_process
    +detector
    +start_time
    +result
    +end_time
    +detection_time
    +detector
    +targets
    +start_time
    +results
    +end_time
    +total_time
    +target_hosts
    --
    +setup_method()
    +test_process_enumeration_performance(mock_process_iter)
    +test_detection_with_multiple_targets()
  }

  class TestAssessmentPerformance {
    +assessor
    +detection_results
    +server_info
    +result
    +start_time
    +assessment_results
    +assessment
    +end_time
    +total_time
    +throughput
    +assessor
    +detection_results
    +server_info
    +result
    +start_time
    +futures
    +assessment_results
    +end_time
    +total_time
    --
    +setup_method()
    +test_assessment_throughput()
    +test_concurrent_assessment_performance()
    +assess_wrapper()
  }

  class TestReportingPerformance {
    +scan_results
    +detection_results
    +target
    +scan_result
    +detection_result
    +metadata
    +report_data
    +reporter
    +start_time
    +report_content
    +end_time
    +generation_time
    +report_json
    +scan_results
    +target
    +result
    +metadata_json
    +metadata_csv
    +metadata_xml
    +report_data_json
    +report_data_csv
    +report_data_xml
    +reporters
    +start_time
    +content
    +end_time
    +total_time
    --
    +setup_method()
    +test_large_report_generation_performance()
    +test_multiple_format_generation_performance()
  }

  class TestSystemResourceUsage {
    +process
    +scanner
    +cpu_percentages
    +monitor_thread
    +target_hosts
    +ports
    +target
    +avg_cpu
    +max_cpu
    +process
    +initial_fds
    +scanner
    +target
    +final_fds
    +fd_increase
    --
    +setup_method()
    +test_cpu_usage_during_intensive_operations()
    +monitor_cpu()
    +test_file_descriptor_usage()
  }

  class TestScalabilityBenchmarks {
    +mock_sock
    +scanner
    +target_hosts
    +ports
    +start_time
    +target
    +end_time
    +total_time
    +total_operations
    +throughput
    +expected_max_time
    --
    +setup_method()
    +test_scanning_scalability(mock_socket, target_count, port_count)
  }

  class BenchmarkResult {
    +name: str
    +duration_seconds: float
    +memory_usage_mb: float
    +cpu_usage_percent: float
    +operations_per_second: float
    +success_rate: float
    +error_count: int
    +metadata
  }

  class BenchmarkSuite {
    +name: str
    +results
    +total_duration: float
    +peak_memory_mb: float
    +average_cpu_percent: float
    +durations
    +memory_usage
    +ops_per_sec
    +success_rates
    --
    +summary()
  }

  class PerformanceMonitor {
    +current_memory
    +current_memory
    --
    -__init__()
    +start_monitoring()
    +stop_monitoring()
    -_monitor_loop()
  }

  class MCPIntrospectionBenchmarks {
    +tools
    +resources
    +capabilities
    +monitor
    +start_time
    +success_count: int
    +error_count: int
    +operations_per_second
    +success_rate
    +result
    +server_info
    +legacy_server
    +process_info
    +result
    +result
    +servers
    +futures
    +legacy_server
    +process_info
    +future
    +results
    +result
    +result
    +cache_manager
    +key
    +value
    +cached_value
    +result
    --
    +setUp()
    +tearDown()
    -_create_mock_server_info(server_id): MCPServerInfo
    -_run_benchmark(name, operation_func, iterations): BenchmarkResult
    +test_single_server_introspection_performance()
    +introspect_server()
    +test_concurrent_introspection_performance()
    +concurrent_introspection(num_workers)
    +test_cache_performance()
    +cache_operations()
    +test_connection_pool_performance()
  }

  class MockConnectionPool {
    -__init__()
    +add_connection(conn_id, connection)
    +get_connection(conn_id)
  }

  class MockScalingOptimizer {
    -__init__()
    +get_optimization_statistics()
    +apply_optimization(metrics)
  }

  class BenchmarkRunner {
    +suite
    +runner
    +result
    +all_results
    +report_data
    +output_file
    --
    +{static} run_all_benchmarks(): BenchmarkSuite
    +{static} save_benchmark_report(output_path)
  }

  class PerformanceBaseline {
    +single_introspection_time: float
    +batch_introspection_time_per_server: float
    +startup_time: float
    +shutdown_time: float
    +base_memory_usage: float
    +memory_per_server: float
    +peak_memory_single: float
    +peak_memory_batch: float
    +servers_per_second: float
    +concurrent_connections: int
    +success_rate: float
    +error_rate: float
    +time_regression_threshold: float
    +memory_regression_threshold: float
    +throughput_regression_threshold: float
  }

  class TestSingleServerIntrospectionRegression {
    +baseline
    +monitor
    +introspector
    +mock_result
    +result
    +metrics
    +baseline
    +startup_monitor
    +introspector
    +startup_metrics
    +shutdown_monitor
    +shutdown_metrics
    +introspector
    +initial_memory
    +memory_samples
    +mock_result
    +result
    +current_memory
    +final_memory
    +memory_growth
    --
    +introspection_config()
    +test_server_config()
    +test_single_server_introspection_performance(introspection_config, test_server_config)
    +test_startup_shutdown_performance(introspection_config)
    +test_memory_leak_regression(introspection_config, test_server_config)
  }

  class TestBatchIntrospectionRegression {
    +baseline
    +monitor
    +mock_introspection
    +optimizer
    +results
    +metrics
    +servers_per_second
    +avg_time_per_server
    --
    +scaling_config()
    +test_servers()
    +test_batch_introspection_performance(scaling_config, test_servers)
    +mock_introspect_func()
  }

  class TestMemoryOptimizationRegression {
    +optimization_levels
    +performance_results
    +monitor
    +optimizer
    +test_data
    +processed
    +metrics
    +configs
    +results
    +monitor
    +optimizer
    +large_objects
    +metrics
    +gc_disabled
    +gc_enabled
    +time_ratio
    --
    +test_memory_optimizer_overhead()
    +test_garbage_collection_performance()
  }

  class TestConcurrencyRegression {
    +baseline
    +servers
    +introspection_config
    +introspector
    +monitor
    +futures
    +results
    +metrics
    +throughput
    +sequential_time
    --
    +test_concurrent_introspection_performance()
    +mock_introspect_func()
  }

  class TestRegressionReporting {
    +baseline
    +test_results
    +summary
    +avg_time
    --
    +test_performance_regression_summary()
  }

}

package "tests.security" {
  class SecurityTestHelper {
    +{static} create_malicious_json_server_script(): str
    +{static} create_resource_exhaustion_server_script(): str
    +{static} create_privilege_escalation_server_script(): str
    +{static} create_path_traversal_server_script(): str
  }

  class TestInputValidationSecurity {
    +config
    +server_config
    +result
    +server_info_str
    +tool
    +malicious_unicode_script: str
    +server_config
    +result
    +server_config
    +result
    +server_config
    +result
    --
    +security_introspector()
    +test_malicious_json_handling(security_introspector)
    +test_unicode_and_control_character_handling(security_introspector)
    +test_oversized_response_handling(security_introspector)
    +test_path_traversal_in_resources(security_introspector)
  }

  class TestPrivilegeEscalationSecurity {
    +config
    +server_config
    +result
    +server_info
    +file_access_script: str
    +server_config
    +result
    +env_access_script: str
    +server_config
    +result
    --
    +privilege_test_introspector()
    +test_privilege_escalation_attempts(privilege_test_introspector)
    +test_file_system_access_restrictions(privilege_test_introspector)
    +test_environment_variable_isolation(privilege_test_introspector)
  }

  class TestResourceExhaustionSecurity {
    +config
    +server_config
    +process
    +initial_memory
    +result
    +final_memory
    +memory_increase
    +cpu_exhaustion_script: str
    +server_config
    +start_time
    +result
    +elapsed_time
    +infinite_loop_script: str
    +server_config
    +start_time
    +result
    +elapsed_time
    --
    +resource_limit_introspector()
    +test_memory_exhaustion_protection(resource_limit_introspector)
    +test_cpu_exhaustion_protection(resource_limit_introspector)
    +test_infinite_loop_protection(resource_limit_introspector)
  }

  class TestInjectionAttackSecurity {
    +config
    +malicious_commands
    +server_config
    +result
    +malicious_args
    +server_config
    +result
    +malicious_env
    +server_config
    +result
    --
    +injection_test_introspector()
    +test_command_injection_in_server_config(injection_test_introspector)
    +test_argument_injection_protection(injection_test_introspector)
    +test_environment_variable_injection(injection_test_introspector)
  }

  class TestSecureConfigurationSecurity {
    +introspector
    +config
    +insecure_configs
    +config
    +introspector
    +config
    +introspector
    +dangerous_dirs
    +server_config
    +result
    --
    +test_default_security_settings()
    +test_security_configuration_validation()
    +test_working_directory_security()
  }

  class TestSecurityReporting {
    +config
    +server_config
    +result
    +warning_calls
    +high_risk_script: str
    +server_config
    +result
    --
    +security_reporting_introspector()
    +test_security_alert_generation(security_reporting_introspector)
    +test_risk_assessment_accuracy(security_reporting_introspector)
  }

}

package "tests.test_config" {
  class TestScanSettings {
    +settings
    +settings
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_validation_constraints()
    +test_port_range_validation()
  }

  class TestDetectionSettings {
    +settings
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_validation_constraints()
  }

  class TestAssessmentSettings {
    +settings
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_validation_constraints()
  }

  class TestReportingSettings {
    +settings
    +settings
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_validation_constraints()
  }

  class TestLoggingSettings {
    +settings
    +settings
    +valid_levels
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_validation_constraints()
  }

  class TestHawkEyeSettings {
    +settings
    +settings
    +settings
    --
    +test_default_values()
    +test_environment_variable_override()
    +test_nested_settings_independence()
  }

  class TestGetSettings {
    +settings1
    +settings2
    +settings1
    +initial_threads
    +settings2
    +settings
    --
    +test_singleton_behavior()
    +test_caching_with_environment_changes()
    +test_settings_type()
  }

  class TestConfigurationIntegration {
    +env_vars
    +settings
    +settings
    --
    +test_complete_configuration_from_environment()
    +test_partial_configuration_override()
    +test_configuration_validation_errors()
  }

}

package "tests.test_utils" {
  class TestHawkEyeLogger {
    +logger_instance
    +logger_instance
    +main_logger
    +logger_instance
    +logger1
    +logger2
    +mock_settings
    +logger_instance
    +main_logger
    +console_handler
    +log_file
    +mock_settings
    +logger_instance
    +main_logger
    +file_handler: NoneType
    +file_handler: handler
    +logger_instance
    +named_logger
    +logger_instance
    +main_logger
    +logger_instance
    --
    +test_logger_initialization()
    +test_configure_basic_setup()
    +test_configure_idempotent()
    +test_console_handler_configuration()
    +test_file_handler_configuration()
    +test_get_logger_with_name()
    +test_get_logger_without_name()
    +test_configuration_error_handling()
  }

  class TestAuditLogger {
    +mock_settings
    +audit_logger
    +mock_settings
    +audit_logger
    +mock_settings
    +audit_logger
    +call_args
    +mock_settings
    +audit_logger
    +call_args
    +mock_settings
    +audit_logger
    +call_args
    +mock_settings
    +audit_logger
    +call_args
    --
    +test_audit_logger_initialization()
    +test_audit_logger_disabled()
    +test_log_scan_start()
    +test_log_scan_complete()
    +test_log_detection_event()
    +test_log_security_event()
  }

  class TestGlobalFunctions {
    +logger
    +logger
    +mock_settings
    +audit_logger
    +logger
    +logger1
    +logger2
    +audit1
    +audit2
    --
    +test_get_logger_function()
    +test_get_logger_without_name()
    +test_get_audit_logger_function()
    +test_configure_logging_function()
    +test_singleton_behavior()
  }

  class TestLoggingIntegration {
    +log_file
    +logging_settings
    +settings
    +logger
    +log_content
    +log_file
    +logging_settings
    +settings
    +logger
    +log_content
    +mock_audit_file
    +settings
    +audit_logger
    +test_cases
    +log_file
    +logging_settings
    +settings
    +logger
    +log_content
    +all_levels
    --
    +test_complete_logging_setup()
    +test_structured_logging_format()
    +test_audit_trail_integration()
    +test_logging_with_different_levels()
  }

}

package "tests.test_reporting" {
  class TestIntrospectionReporting {
    +tools
    +resources
    +server
    +start_time
    +end_time
    +metadata
    +data
    +metadata
    +data
    +reporter
    +result
    +report_dict
    +server
    +metadata
    +data
    +reporter
    +result
    +lines
    +summary_section: bool
    +summary_section: bool
    +metadata
    +data
    +reporter
    +result
    +root
    +exec_summary
    +introspection_summary
    +introspection_data
    +mcp_servers
    +server
    +reporter
    +result
    +metadata
    +data
    +reporter
    +result
    +report_dict
    +analysis
    +metadata
    +data
    +reporters
    +result
    +metadata
    +data
    +json_reporter
    +json_result
    +json_data
    +pipeline_results
    +pipeline_result
    +xml_reporter
    +xml_result
    +xml_root
    +pipeline_section
    +pipeline_elem
    +stats
    +servers
    +high_risk_servers
    +file_tools
    --
    +sample_mcp_server()
    +sample_capabilities()
    +sample_introspection_summary()
    +sample_pipeline_result(sample_mcp_server)
    +sample_report_data(sample_mcp_server, sample_capabilities, sample_introspection_summary, sample_pipeline_result)
    +test_json_reporter_introspection(sample_mcp_server, sample_capabilities, sample_introspection_summary)
    +test_csv_reporter_introspection(sample_mcp_server, sample_capabilities, sample_introspection_summary)
    +test_xml_reporter_introspection(sample_mcp_server, sample_capabilities, sample_introspection_summary)
    +test_html_reporter_introspection(sample_report_data)
    +test_introspection_reporter_specialized(sample_mcp_server, sample_capabilities, sample_introspection_summary)
    +test_all_reporters_handle_empty_introspection()
    +test_pipeline_result_introspection_integration(sample_pipeline_result)
    +test_report_data_introspection_properties(sample_report_data)
  }

  class TestExecutiveSummaryGenerator {
    +summary
    +summary
    +metrics
    +metrics
    +findings
    +critical_findings
    +findings
    +critical_findings
    +high_risk_score
    +low_risk_score
    +potential
    +critical_metrics
    +high_metrics
    +low_metrics
    +metrics
    +overview
    +findings
    +section
    +findings
    +section
    +metrics
    +findings
    +conclusion
    +metrics
    +conclusion
    +fallback
    +count
    +count
    --
    +generator()
    +sample_metadata()
    +high_risk_data(sample_metadata)
    +low_risk_data(sample_metadata)
    +test_generator_initialization(generator)
    +test_generate_summary_high_risk(generator, high_risk_data)
    +test_generate_summary_low_risk(generator, low_risk_data)
    +test_extract_metrics_high_risk(generator, high_risk_data)
    +test_extract_metrics_low_risk(generator, low_risk_data)
    +test_identify_key_findings_high_risk(generator, high_risk_data)
    +test_identify_key_findings_low_risk(generator, low_risk_data)
    +test_calculate_security_score(generator, high_risk_data, low_risk_data)
    +test_calculate_risk_reduction_potential(generator, high_risk_data)
    +test_determine_overall_risk_level(generator)
    +test_generate_overview_section(generator)
    +test_generate_key_findings_section(generator)
    +test_generate_recommendations_section(generator)
    +test_generate_conclusion_urgent(generator)
    +test_generate_conclusion_positive(generator)
    +test_fallback_summary_generation(generator, high_risk_data)
    +test_count_compliance_issues(generator, high_risk_data)
    +test_count_unprotected_deployments(generator, high_risk_data)
  }

  class TestExecutiveFinding {
    +finding
    --
    +test_executive_finding_creation()
  }

  class TestExecutiveMetrics {
    +metrics
    --
    +test_executive_metrics_creation()
  }

  class TestXMLReporter {
    +target
    +server_info
    +finding
    +reporter
    +result
    +root
    +output_path
    +result
    +content
    +mock_log
    +root
    +metadata_elem
    +root
    +summary_elem
    +stats_elem
    +root
    +scan_results_elem
    +results
    +result
    +service_elem
    +root
    +detection_results_elem
    +results
    +result
    +server_info
    +root
    +assessment_results_elem
    +results
    +result
    +findings
    +finding_elems
    +finding
    +recommendations
    +root
    +recommendations_elem
    +recommendation_elems
    +root
    +child
    +pretty_xml
    +content: str
    +output_path
    +content: str
    +invalid_path
    +result
    +invalid_xml: str
    +result
    +root
    +result
    +root
    +metadata
    +scan_results
    +scan_result
    +detection_results
    +detection_result
    +server_info
    +reporter
    +result
    +lines
    +reporter
    +result
    +root
    +data
    +large_scan_results
    +target
    +result
    +data
    +result
    +root
    +scan_results
    +scan_result_elems
    +metadata: sample_metadata
    +data
    +result
    +root
    +title_elem
    +stats
    +stats
    +result
    +root
    +result
    --
    +reporter()
    +sample_metadata()
    +sample_scan_results()
    +sample_detection_results()
    +sample_assessment_results()
    +sample_report_data(sample_metadata, sample_scan_results, sample_detection_results, sample_assessment_results)
    +test_reporter_init(reporter)
    +test_reporter_init_custom_params()
    +test_get_format(reporter)
    +test_generate_report_memory(reporter, sample_report_data)
    +test_generate_report_file_output(reporter, sample_report_data)
    +test_generate_report_invalid_data(reporter)
    +test_generate_report_logging(mock_logger, reporter, sample_report_data)
    +test_add_metadata_section(reporter, sample_metadata)
    +test_add_summary_section(reporter, sample_report_data)
    +test_add_scan_results_section(reporter, sample_scan_results)
    +test_add_detection_results_section(reporter, sample_detection_results)
    +test_add_assessment_results_section(reporter, sample_assessment_results)
    +test_add_recommendations_section(reporter)
    +test_prettify_xml(reporter)
    +test_save_xml_file(reporter)
    +test_save_xml_file_error(reporter)
    +test_validate_xml_output(reporter, sample_report_data)
    +test_xml_structure_completeness(reporter, sample_report_data)
    +test_xml_data_integrity(reporter, sample_report_data)
    +test_pretty_print_disabled(sample_report_data)
    +test_custom_encoding(sample_report_data)
    +test_empty_data_sections(reporter, sample_metadata)
    +test_large_data_handling(reporter, sample_metadata)
    +test_special_characters_handling(reporter, sample_metadata, sample_scan_results)
    +test_statistics_tracking(reporter, sample_report_data)
    +test_error_handling_and_statistics(reporter)
    +test_xml_namespace_handling(reporter, sample_report_data)
    +test_xml_encoding_declaration(reporter, sample_report_data)
  }

  class TestJSONReporter {
    +target
    +service_info
    +mcp_server
    +finding
    +result
    +parsed
    +output_path
    +result
    +content
    +parsed
    +result
    +parsed
    +metadata
    +summary
    +scan_results
    +detection_results
    +assessment_results
    +result
    +parsed
    +scan_result
    +result
    +parsed
    +detection_result
    +result
    +parsed
    +assessment_result
    +stats
    +result
    +parsed
    +stats
    +overview
    +path_obj
    +result
    +enum_obj
    +result
    --
    +json_reporter()
    +sample_metadata()
    +sample_scan_results()
    +sample_detection_results()
    +sample_assessment_results()
    +sample_report_data(sample_metadata, sample_scan_results, sample_detection_results, sample_assessment_results)
    +test_get_format(json_reporter)
    +test_generate_report_in_memory(json_reporter, sample_report_data)
    +test_generate_report_to_file(json_reporter, sample_report_data)
    +test_json_content_structure(json_reporter, sample_report_data)
    +test_enhanced_scan_results(json_reporter, sample_report_data)
    +test_enhanced_detection_results(json_reporter, sample_report_data)
    +test_enhanced_assessment_results(json_reporter, sample_report_data)
    +test_aggregated_statistics(json_reporter, sample_report_data)
    +test_json_serializer_custom_types(json_reporter)
  }

  class CustomObject {
    -__str__()
  }

  class TestHTMLReporter {
    +templates
    +expected_templates
    +html_content
    +html_content
    +html_content
    +html_content
    +output_file
    +html_content
    +file_content
    +custom_vars
    +html_content
    --
    +html_reporter()
    +sample_metadata()
    +sample_scan_summary()
    +sample_detection_summary()
    +sample_risk_summary()
    +sample_report_data(sample_metadata, sample_scan_summary, sample_detection_summary, sample_risk_summary)
    +test_html_reporter_initialization(html_reporter)
    +test_generate_technical_report(html_reporter, sample_report_data)
    +test_generate_executive_summary_report(html_reporter, sample_report_data)
    +test_generate_vulnerability_report(html_reporter, sample_report_data)
    +test_generate_compliance_report(html_reporter, sample_report_data)
    +test_save_to_file(html_reporter, sample_report_data)
    +test_custom_template_variables(html_reporter, sample_report_data)
    +test_invalid_template_name(html_reporter, sample_report_data)
    +test_register_custom_template(html_reporter)
  }

  class CustomTemplate {
    -__init__()
    +get_template_content()
  }

  class TestTemplateEngine {
    +template_engine()
    +sample_template()
  }

  class SampleTemplate {
    -__init__()
    +get_template_content()
  }

  class TestHTMLTemplates {
    +template
    +rendered
    +template
    +rendered
    +template
    +rendered
    +template
    +rendered
    +template
    +css
    +template
    +js
    +template
    +css
    --
    +sample_data()
    +test_executive_summary_template(sample_data)
    +test_technical_report_template(sample_data)
    +test_vulnerability_report_template(sample_data)
    +test_compliance_report_template(sample_data)
    +test_template_css_content()
    +test_template_js_content()
    +test_compliance_template_enhanced_css()
  }

  class TestBaseTemplate {
    +test_html_escaping()
  }

  class TestTemplate {
    -__init__()
    +get_template_content()
  }

  class TestCSVReporter {
    +target
    +server_info
    +finding
    +reporter
    +result
    +lines
    +output_path
    +result
    +content
    +mock_log
    +output
    +content
    +output
    +content
    +output
    +content
    +output
    +content
    +output
    +content
    +recommendations
    +output
    +content
    +content: str
    +output_path
    +content: str
    +invalid_path
    +base_path
    +files
    +output_path
    +content
    +output_path
    +content
    +output_path
    +content
    +output_path
    +content
    +result
    +lines
    +csv_sections
    +current_section
    +current_section
    +reader
    +rows
    +reporter
    +result
    +reporter
    +result
    +data
    +large_scan_results
    +target
    +result
    +data
    +result
    +stats
    +stats
    --
    +reporter()
    +sample_metadata()
    +sample_scan_results()
    +sample_detection_results()
    +sample_assessment_results()
    +sample_report_data(sample_metadata, sample_scan_results, sample_detection_results, sample_assessment_results)
    +test_reporter_init(reporter)
    +test_reporter_init_custom_params()
    +test_get_format(reporter)
    +test_generate_report_memory(reporter, sample_report_data)
    +test_generate_report_file_output(reporter, sample_report_data)
    +test_generate_report_invalid_data(reporter)
    +test_generate_report_logging(mock_logger, reporter, sample_report_data)
    +test_write_metadata_section(reporter, sample_metadata)
    +test_write_summary_section(reporter, sample_report_data)
    +test_write_scan_results_section(reporter, sample_scan_results)
    +test_write_detection_results_section(reporter, sample_detection_results)
    +test_write_assessment_results_section(reporter, sample_assessment_results)
    +test_write_recommendations_section(reporter)
    +test_save_csv_file(reporter)
    +test_save_csv_file_error(reporter)
    +test_generate_separate_files(reporter, sample_report_data)
    +test_generate_metadata_file(reporter, sample_metadata)
    +test_generate_scan_results_file(reporter, sample_scan_results)
    +test_generate_detection_results_file(reporter, sample_detection_results)
    +test_generate_assessment_results_file(reporter, sample_assessment_results)
    +test_csv_parsing_validity(reporter, sample_report_data)
    +test_custom_delimiter(sample_report_data)
    +test_custom_quoting(sample_report_data)
    +test_empty_data_sections(reporter, sample_metadata)
    +test_large_data_handling(reporter, sample_metadata)
    +test_statistics_tracking(reporter, sample_report_data)
    +test_error_handling_and_statistics(reporter)
  }

}

package "tests.test_cli" {
  class TestCLICommands {
    +config_data
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +mock_results
    +result
    +mock_results
    +result
    +mock_results
    +result
    +mock_results
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +result
    +mock_results
    +result
    --
    +runner()
    +temp_config_file()
    +test_main_cli_help(runner)
    +test_scan_command_help(runner)
    +test_scan_single_target(runner)
    +test_scan_cidr_target(runner)
    +test_scan_with_output_file(runner)
    +test_scan_udp_option(runner)
    +test_scan_both_tcp_udp(runner)
    +test_detect_command_help(runner)
    +test_detect_local_processes(runner)
    +test_detect_with_target(runner)
    +test_detect_config_discovery(runner)
    +test_detect_docker_inspection(runner)
    +test_report_command_help(runner)
    +test_report_json_format(runner)
    +test_report_csv_format(runner)
    +test_report_html_format(runner)
    +test_report_with_template(runner)
    +test_global_config_file_option(runner, temp_config_file)
    +test_global_verbose_option(runner)
    +test_global_quiet_option(runner)
    +test_scan_port_range(runner)
    +test_scan_common_ports(runner)
    +test_scan_all_ports(runner)
    +test_detect_all_options(runner)
    +test_report_executive_summary(runner)
  }

  class TestCLIValidation {
    +test_validate_target_basic()
    +test_validate_ports_basic()
    +test_validate_output_format_basic()
  }

}

package "tests.e2e" {
  class TestMCPIntrospectionE2E {
    +temp_dir
    +introspector
    +tools
    +resources
    +tools
    +resources
    +tools
    +tools
    +server_info
    +results
    +result
    +high_risk_servers
    +metadata
    +report_data
    +total_tools
    +total_resources
    +reporter
    +output_file
    +report_content
    +pipeline_config
    +pipeline
    +mock_result
    +result
    +memory_config
    +memory_optimizer
    +introspector
    +large_data
    +server_info
    +processed_data
    +results
    +result
    +stats
    +legacy_config_file
    +legacy_config_data
    +migrator
    +modern_config
    +introspection_config
    +introspector
    +introspector
    +concurrent_servers
    +server
    +server_info
    +start_time
    +futures
    +results
    +end_time
    +total_time
    +sequential_time
    +introspector
    +call_count: int
    +server_info
    +result
    +introspector
    +MAX_SINGLE_INTROSPECTION_TIME: float
    +MAX_BATCH_TIME_PER_SERVER: float
    +server_info
    +start_time
    +result
    +single_time
    +batch_servers
    +start_time
    +batch_results
    +batch_time
    +avg_time_per_server
    --
    +temp_dir()
    +test_server_configs()
    +introspection_config()
    +test_complete_introspection_workflow(test_server_configs, introspection_config, temp_dir)
    +mock_introspect_server()
    +test_pipeline_integration_e2e(test_server_configs, temp_dir)
    +test_memory_optimization_e2e(test_server_configs, introspection_config)
    +mock_memory_intensive_introspection()
    +test_configuration_migration_e2e(temp_dir)
    +test_concurrent_introspection_e2e(test_server_configs, introspection_config)
    +mock_concurrent_introspect()
    +test_error_recovery_e2e(test_server_configs, introspection_config)
    +mock_failing_introspect()
    +test_performance_regression_e2e(test_server_configs, introspection_config)
    +mock_realistic_introspect()
  }

  class TestCompleteWorkflows {
    +scanner
    +target
    +scan_results
    +detector
    +detection_result
    +config_detector
    +config_result
    +assessor
    +assessment_result
    +metadata
    +report_data
    +reporter
    +output_file
    +result_path
    +report_content
    +report_json
    +mock_sock
    +scanner
    +target_hosts
    +all_scan_results
    +target
    +results
    +metadata
    +report_data
    +reporter
    +output_file
    +result_path
    +report_content
    +report_json
    +scan_targets
    +mock_process
    +detector
    +detection_result
    +assessor
    +assessment_result
    +metadata
    +report_data
    +reporter
    +output_file
    +result_path
    +report_content
    +report_json
    --
    +setup_method()
    +teardown_method()
    +test_complete_localhost_scan_workflow()
    +test_network_scan_to_report_workflow(mock_socket)
    +test_detection_to_assessment_workflow(mock_process_iter)
  }

  class TestWorkflowPerformance {
    +mock_sock
    +targets
    +ports
    +scanner
    +start_time
    +all_results
    +target
    +results
    +end_time
    +scan_duration
    +stats
    +process
    +initial_memory
    +scanner
    +detector
    +target
    +result
    +current_memory
    +memory_increase
    --
    +setup_method()
    +teardown_method()
    +test_large_scale_scan_performance(mock_socket)
    +test_memory_usage_during_large_workflow()
  }

  class TestWorkflowErrorHandling {
    +scanner
    +target
    +results
    +detector
    +result
    +invalid_result
    +assessor
    +assessment_result
    +metadata
    +report_data
    +reporter
    +invalid_path
    --
    +setup_method()
    +teardown_method()
    +test_workflow_with_network_errors()
    +test_workflow_with_detection_failures()
    +test_workflow_with_assessment_errors()
    +test_workflow_with_reporting_errors()
  }

  class TestWorkflowIntegration {
    +target
    +scan_result
    +detector
    +detection_result
    +scanner
    +detector
    +assessor
    +reporter
    +log_messages
    --
    +setup_method()
    +test_data_flow_between_components()
    +test_configuration_consistency()
    +test_logging_integration()
  }

  class TestHandler {
    +emit(record)
  }

}

package "tests.integration" {
  class TestTransportIntegration {
    +logger
    +handlers
    +handler
    +test_cases
    +detected_type
    +valid_configs
    +invalid_configs
    +handler
    +mock_process
    +health
    +mock_session
    +health
    +mock_session
    +health
    +handler
    +handler
    +info
    +configs
    +handlers
    +mock_process
    +mock_sse_session
    +mock_http_session
    +connect_tasks
    +disconnect_tasks
    --
    +factory()
    +sample_configs()
    +test_factory_creates_all_transport_types(factory, sample_configs)
    +test_auto_detection_accuracy(factory)
    +test_config_validation_comprehensive(factory)
    +test_server_info_consistency(factory, sample_configs)
    +test_transport_registration(factory)
  }

  class CustomTransportHandler {
    -__init__()
  }

  class TestTransportErrorScenarios {
    +configs
    +handler
    +configs
    +handler
    +invalid_configs
    +handler
    --
    +factory()
    +test_invalid_configuration_handling(factory)
  }

  class TestTransportPerformance {
    +configs
    +start_time
    +handler
    +end_time
    +creation_time
    +configs
    +start_time
    +transport_type
    +end_time
    +detection_time
    --
    +factory()
    +test_handler_creation_performance(factory)
    +test_auto_detection_performance(factory)
  }

  class TestCLIIntegration {
    +output_file
    +result
    +output_file
    +result
    +scan_output
    +report_output
    +scan_result
    +report_result
    +detection_output
    +report_output
    +detect_result
    +report_result
    +scan_output
    +formats
    +report_output
    +result
    +output_file
    +result
    +output_file
    +result
    +result
    +result
    +result
    +config_data
    +config_file
    +result
    +verbose_result
    +quiet_result
    +result
    +result
    --
    +runner()
    +temp_output_dir()
    +mock_scan_results()
    +mock_detection_results()
    +test_complete_scan_workflow(runner, temp_output_dir, mock_scan_results)
    +test_complete_detection_workflow(runner, temp_output_dir, mock_detection_results)
    +test_scan_to_report_workflow(runner, temp_output_dir, mock_scan_results)
    +test_detect_to_report_workflow(runner, temp_output_dir, mock_detection_results)
    +test_multi_format_report_generation(runner, temp_output_dir, mock_scan_results)
    +test_comprehensive_scan_with_all_options(runner, temp_output_dir)
    +test_comprehensive_detection_with_all_options(runner, temp_output_dir)
    +test_error_handling_invalid_target(runner)
    +test_error_handling_invalid_ports(runner)
    +test_error_handling_missing_input_file(runner)
    +test_config_file_integration(runner, temp_output_dir)
    +test_verbose_and_quiet_modes(runner)
    +test_progress_indicators(runner)
    +test_signal_handling_graceful_shutdown(runner)
  }

  class TestScanningIntegration {
    +target
    +mock_socket
    +results
    +scan_result
    +scan_result
    +open_ports
    +target
    +mock_socket
    +results
    +scan_result
    +scan_result
    +dns_result
    +cidr: str
    +ports
    +targets
    +mock_socket
    +all_results
    +result
    +expected_scans
    +target
    +mock_socket
    +start_time
    +results
    +result
    +end_time
    +total_time
    +targets
    +mock_socket
    +future_results
    +future
    +results
    +result
    +target
    +mock_socket
    +tcp_results
    +udp_results
    +tcp_result
    +udp_result
    +target
    +service_banners
    +mock_socket
    +port
    +results
    +scan_result
    +scan_result
    +http_results
    +ssh_results
    +target
    +tcp_result
    +udp_result
    +targets
    +target
    +mock_socket
    +futures
    +future
    +results
    +result
    +expected_count
    +error_results
    +target
    +mock_socket
    +tcp_results
    +udp_results
    +tcp_result
    +udp_result
    +tcp_open
    +tcp_closed
    +udp_open
    +udp_filtered
    +target
    +mock_socket
    +start_time
    +tcp_result
    +udp_result
    +end_time
    +total_time
    +targets
    +ipv6_target
    +mock_socket
    +results
    +result
    --
    +settings()
    +tcp_scanner(settings)
    +udp_scanner(settings)
    +target_enumerator(settings)
    +fingerprinter(settings)
    +connection_pool(settings)
    +rate_limiter(settings)
    +test_targets()
    +test_complete_tcp_scan_workflow(tcp_scanner, fingerprinter, test_targets)
    +test_complete_udp_scan_workflow(udp_scanner, fingerprinter, test_targets)
    +mock_recvfrom()
    +test_target_enumeration_to_scanning(target_enumerator, tcp_scanner)
    +test_rate_limiting_integration(tcp_scanner, rate_limiter)
    +test_connection_pool_integration(connection_pool, tcp_scanner)
    +test_mixed_tcp_udp_scanning(tcp_scanner, udp_scanner)
    +test_service_fingerprinting_integration(tcp_scanner, fingerprinter)
    +mock_recv()
    +test_error_handling_integration(tcp_scanner, udp_scanner)
    +test_threaded_scanning_workflow(tcp_scanner, connection_pool)
    +test_scan_statistics_collection(tcp_scanner, udp_scanner)
    +test_timeout_handling_integration(tcp_scanner, udp_scanner)
    +test_ipv6_scanning_integration(tcp_scanner, target_enumerator)
  }

  class TestReportingPipeline {
    +results
    +hosts
    +ports
    +target
    +state
    +service_info: NoneType
    +service_info
    +results
    +hosts
    +server_info
    +results
    +hosts
    +risk_levels
    +findings
    +finding_configs
    +reporters
    +results
    +data: comprehensive_report_data
    +result
    +json_data
    +xml_root
    +csv_content
    +base_path
    +reporters
    +generated_files
    +data: comprehensive_report_data
    +output_path
    +result
    +content
    +aggregator
    +scan_summary
    +detection_summary
    +risk_summary
    +generator
    +summary
    +base_path
    +generator
    +executive_summary
    +formats_and_reporters
    +generated_reports
    +data: comprehensive_report_data
    +output_path
    +result_path
    +json_path
    +json_data
    +xml_path
    +xml_root
    +json_scan_count
    +xml_scan_count
    +json_detection_count
    +xml_detection_count
    +reporters
    +stats
    +large_scan_results
    +target
    +large_data
    +reporters
    +result
    +results
    +errors
    +reporter
    +data: comprehensive_report_data
    +result
    +threads
    +reporter_configs
    +thread
    +json_reporter
    +csv_reporter
    +xml_reporter
    +json_result
    +json_data
    +xml_result
    +xml_root
    +json_scan_hosts
    +xml_scan_hosts
    +json_detection_hosts
    +xml_detection_hosts
    +reporter
    +stats
    +large_scan_results
    +target
    +large_data
    +reporter
    +result
    --
    +sample_metadata()
    +comprehensive_scan_results()
    +comprehensive_detection_results()
    +comprehensive_assessment_results()
    +comprehensive_report_data(sample_metadata, comprehensive_scan_results, comprehensive_detection_results, comprehensive_assessment_results)
    +test_all_reporters_generate_valid_output(comprehensive_report_data)
    +test_multi_format_file_generation(comprehensive_report_data)
    +test_data_aggregation_pipeline(comprehensive_scan_results, comprehensive_detection_results, comprehensive_assessment_results)
    +test_executive_summary_generation(comprehensive_report_data)
    +test_end_to_end_reporting_workflow(comprehensive_report_data)
    +test_error_handling_across_reporters()
    +test_performance_with_large_dataset(sample_metadata)
    +test_concurrent_report_generation(comprehensive_report_data)
    +generate_report(format_name)
    +test_report_data_consistency(comprehensive_report_data)
    +test_statistics_aggregation(comprehensive_report_data)
    +test_memory_usage_optimization(sample_metadata)
  }

  class TestRealMCPServers {
    +result
    +tool
    +resource
    +result
    +tool
    +non_existent_config
    +result
    +malformed_server_config
    +result
    +timeout_server_config
    +start_time
    +result
    +elapsed
    +servers
    +results
    +result
    +result
    +metrics
    +introspector
    +start_time
    +result1
    +first_time
    +start_time
    +result2
    +second_time
    +result
    +file_tools
    --
    +introspector_config()
    +introspector(introspector_config)
    +filesystem_server_config()
    +mock_server_config()
    +test_mock_server_basic_introspection(introspector, mock_server_config)
    +test_mock_server_risk_analysis(introspector, mock_server_config)
    +test_server_not_found_error_handling(introspector)
    +test_malformed_server_response(introspector)
    +test_server_timeout_handling(introspector)
    +test_multiple_servers_sequential(introspector, mock_server_config)
    +test_performance_monitoring(introspector, mock_server_config)
    +test_caching_behavior(introspector_config, mock_server_config)
    +test_filesystem_server_if_available(introspector, filesystem_server_config)
  }

  class TestIntegrationErrorScenarios {
    +config
    +invalid_config
    +result
    +permission_config
    +result
    +invalid_dir_config
    +result
    --
    +introspector()
    +test_invalid_transport_type(introspector)
    +test_permission_denied_scenario(introspector)
    +test_working_directory_not_exists(introspector)
  }

  class TestIntegrationPerformance {
    +config
    +mock_config
    +results
    +start_time
    +result
    +total_time
    +successful_results
    +process
    +initial_memory
    +mock_config
    +final_memory
    +memory_increase
    --
    +introspector()
    +test_rapid_sequential_introspection(introspector)
    +test_memory_usage_stability(introspector)
  }

  class TestMCPDetectionIntegration {
    +package_json
    +package_json_path
    +mcp_config
    +mcp_config_path
    +server_js: str
    +server_js_path
    +detected_processes
    +detected_configs
    +process
    +config
    +is_mcp
    +configs
    +package_configs
    +package_config
    +mcp_configs
    +mcp_config
    +mock_socket
    +transports
    +http_process
    +http_transports
    +mock_result
    +packages
    +mcp_packages
    +mock_result
    +containers
    +mcp_containers
    +container
    +env_info
    +security_issues
    +mock_processes
    +detected
    +is_mcp
    +processes
    +non_existent_path: str
    +configs
    +stdio_process
    +result
    +http_process
    +result
    +mock_process
    +processes
    +configs
    +process
    +transports
    +env_info
    +result
    +mock_process
    +detected_processes
    +detected_configs
    +process
    +config
    +is_verified
    --
    +settings()
    +process_enumerator(settings)
    +config_discovery(settings)
    +protocol_verifier(settings)
    +transport_detector(settings)
    +npx_detector(settings)
    +docker_inspector(settings)
    +env_analyzer(settings)
    +mock_mcp_process()
    +temp_mcp_config()
    +test_complete_detection_pipeline(process_enumerator, config_discovery, protocol_verifier, mock_mcp_process, temp_mcp_config)
    +test_config_discovery_integration(config_discovery, temp_mcp_config)
    +test_transport_detection_integration(transport_detector, mock_mcp_process)
    +test_npx_detection_integration(npx_detector)
    +test_docker_inspection_integration(docker_inspector)
    +test_environment_analysis_integration(env_analyzer, mock_mcp_process)
    +test_multi_process_detection(process_enumerator, protocol_verifier)
    +test_error_handling_in_detection(process_enumerator, config_discovery)
    +test_protocol_verification_scenarios(protocol_verifier)
    +test_comprehensive_detection_result(process_enumerator, config_discovery, transport_detector, env_analyzer, temp_mcp_config)
    +test_real_world_detection_scenario(process_enumerator, config_discovery, protocol_verifier, temp_mcp_config)
  }

  class TestMCPRiskAnalysisIntegration {
    +all_risks
    +tool_risk_results
    +risks
    +threat_model
    +risk_profile
    +risk_scores
    +schema_risks
    +schema_analysis
    +policy_violations
    +report_data
    +json_report
    +html_report
    +exec_tool
    +tool_risks
    +threat_analysis
    +schema_risks
    +high_risks
    +code_threats
    +all_risks
    +violations
    +high_risk_violations
    +all_risks
    +tool_risks
    +schema_risks
    +risk_profile
    +file_risks
    +network_risks
    +threat_model
    +compound_threats
    +tool
    +tool_risks
    +schema_risks
    +all_risks
    +scores
    +score
    +all_risks
    +risks
    +violations
    +blocked_risks
    +warned_risks
    +audited_risks
    +total_violations
    +critical_risks
    +critical_violations
    +threat_model
    +capability_threats
    +aggregate_risk
    +prioritized
    +current_score
    +next_score
    +all_schema_risks
    +schema_risks
    +schema_profile
    +schema_scores
    +injection_risks
    +path_risks
    +all_risks
    +tool_analyses
    +tool_risks
    +schema_risks
    +combined_risks
    +threat_model
    +risk_profile
    +risk_scores
    +violations
    +report_data
    +json_report
    +html_report
    +markdown_report
    +additional_tools
    +tool
    +all_tools
    +start_time
    +all_risks
    +tool_risks
    +schema_risks
    +threat_model
    +risk_profile
    +risk_scores
    +violations
    +end_time
    +analysis_time
    +malformed_tool
    +tool_risks
    +schema_risks
    +threat_analysis
    +high_risk_tools
    +all_risks
    +tool_risks
    +schema_risks
    +threat_model
    +risk_scores
    +aggregate_score
    +threat_risk
    +high_level_risks
    --
    +setUp()
    +test_complete_risk_analysis_pipeline()
    +test_high_risk_tool_detection()
    +test_risk_correlation_analysis()
    +test_risk_scoring_consistency()
    +test_policy_enforcement_integration()
    +test_threat_model_integration()
    +test_schema_analysis_integration()
    +test_report_generation_integration()
    +test_performance_with_multiple_tools()
    +test_error_handling_integration()
    +test_risk_aggregation_accuracy()
  }

  class TestCompleteIntrospectionWorkflow {
    +config
    +server_info
    +process_info
    +initial_stats
    +initial_introspections
    +result
    +updated_stats
    +discovery_stats
    +cache_stats
    +results
    +result
    +stats
    +multiple_results
    +stdio_server
    +stdio_process
    +stdio_result
    +http_server
    +http_process
    +http_result
    +stats
    +supported
    +server_info
    +process_info
    +tools
    +resources
    +capabilities
    +discovery_stats
    +server_info
    +process_info
    +risks
    +risk_summary
    +result
    +server_info
    +process_info
    +initial_report
    +initial_operations
    +result
    +updated_report
    +updated_operations
    +server_info
    +process_info
    +result1
    +cache_stats1
    +result2
    +cache_stats2
    +invalid_server
    +invalid_process
    +result
    +stats
    +minimal_config
    +minimal_introspector
    +server_info
    +process_info
    +result
    --
    +introspector()
    +sample_servers()
    +test_single_server_complete_workflow(introspector)
    +test_multiple_servers_workflow(introspector, sample_servers)
    +test_transport_integration(introspector)
    +test_discovery_integration(introspector)
    +test_risk_analysis_integration(introspector)
    +test_performance_monitoring_integration(introspector)
    +test_caching_workflow(introspector)
    +test_error_handling_workflow(introspector)
    +test_configuration_workflow(introspector)
  }

  class TestLegacyCompatibilityWorkflow {
    +config
    +server_info
    +process_info
    +result
    +server_info
    +process_info
    +script
    +result
    --
    +legacy_introspector()
    +test_legacy_complete_workflow(legacy_introspector)
    +test_legacy_script_workflow(legacy_introspector)
  }

  class TestWorkflowPerformance {
    +config
    +server_info
    +process_info
    +start_time
    +result
    +end_time
    +execution_time
    +stats
    +servers
    +start_time
    +results
    +result
    +end_time
    +execution_time
    +stats
    +server_info
    +process_info
    +result
    +stats
    +cache_stats
    --
    +performance_introspector()
    +test_single_server_performance(performance_introspector)
    +test_multiple_servers_performance(performance_introspector)
    +test_memory_usage_workflow(performance_introspector)
  }

  class TestWorkflowRobustness {
    +config
    +invalid_servers
    +result
    +timeout_config
    +timeout_introspector
    +server_info
    +process_info
    +result
    +stats
    +results
    +errors
    +server_info
    +process_info
    +result
    +threads
    +thread
    +stats
    --
    +robust_introspector()
    +test_invalid_server_robustness(robust_introspector)
    +test_timeout_robustness(robust_introspector)
    +test_concurrent_workflow_robustness(robust_introspector)
    +worker()
  }

  class TestRiskAssessmentPipeline {
    +server_info
    +process_info
    +config_data
    +temp_path
    +config_analyzer
    +config_assessment
    +config_findings
    +default_detector
    +default_assessment
    +default_findings
    +auth_analyzer
    +auth_assessment
    +auth_findings
    +transport_analyzer
    +transport_assessment
    +transport_findings
    +compliance_assessor
    +compliance_assessment
    +all_assessments
    +all_findings
    +remediation_plan
    +action_titles
    +auth_actions
    +encryption_actions
    +config_actions
    +assessments
    +config_analyzer
    +config_result
    +auth_analyzer
    +auth_result
    +transport_analyzer
    +transport_result
    +risk_assessment
    +high_risk_results
    +critical_risk_results
    +high_risk_targets
    +stats
    +config_analyzer
    +assessment_result
    +cvss_calculator
    +cvss_vector
    +scores
    +vuln_info
    +cvss_vulnerabilities
    +exploitable_vulns
    +unpatched_vulns
    +compliance_assessor
    +compliance_result
    +compliance_violations
    +violations
    +invalid_result
    +config_analyzer
    +config_assessment
    +default_detector
    +default_assessment
    +detection_results
    +server_info
    +detection_result
    +all_assessments
    +config_analyzer
    +assessment
    +remediation_plans
    +plan
    +config_analyzer
    +assessment_result
    +result_dict
    +finding
    +json_str
    +deserialized
    +config_analyzer
    +assessment_result
    +remediation_plan
    +plan_dict
    +json_str
    +deserialized
    --
    +sample_detection_result()
    +temp_config_file()
    +test_complete_assessment_workflow(sample_detection_result, temp_config_file)
    +test_risk_assessment_aggregation(sample_detection_result)
    +test_cvss_scoring_integration(sample_detection_result)
    +test_compliance_framework_integration(sample_detection_result)
    +test_assessment_error_handling(sample_detection_result)
    +test_performance_with_large_dataset()
    +test_assessment_data_serialization(sample_detection_result)
    +test_remediation_plan_serialization(sample_detection_result)
  }

  class TestAssessmentModuleInteraction {
    +server_info
    +process_info
    +config_analyzer
    +config_result
    +auth_analyzer
    +auth_result
    +transport_analyzer
    +transport_result
    +default_detector
    +default_result
    +all_findings
    +categories
    +category
    +auth_findings
    +config_findings
    +encryption_findings
    +assessments
    +config_analyzer
    +auth_analyzer
    +transport_analyzer
    +remediation_plan
    +action_categories
    +category
    +action_titles
    +unique_titles
    +duplicate_ratio
    +assessments
    +config_analyzer
    +auth_analyzer
    +transport_analyzer
    +severity_counts
    +total_findings
    +critical_and_high
    +remediation_plan
    +immediate_actions
    +high_priority_actions
    +priority_actions
    +first_phase
    --
    +multi_issue_detection_result()
    +test_cross_module_finding_correlation(multi_issue_detection_result)
    +test_remediation_action_deduplication(multi_issue_detection_result)
    +test_assessment_priority_handling(multi_issue_detection_result)
  }

}

package "tests.test_scanner" {
  class TestTCPScanner {
    +mock_socket
    +result
    +mock_socket
    +result
    +mock_socket
    +result
    +mock_socket
    +target
    +result
    +mock_results
    +results
    +scanned_ports
    +mock_socket
    +banner
    +mock_socket
    +banner
    +mock_socket
    +banner
    +mock_socket
    +response
    +sent_data
    +open_result
    +result
    +target_with_3_ports
    +results
    +stats
    +ipv6_target
    +mock_socket
    +result
    +mock_socket
    +open_ports
    --
    +setup_method()
    +test_scanner_initialization()
    +test_scan_open_port()
    +test_scan_closed_port()
    +test_scan_timeout()
    +test_scan_dns_error()
    +test_scan_target_multiple_ports()
    +test_banner_grabbing()
    +test_banner_grabbing_no_response()
    +test_banner_grabbing_connection_failed()
    +test_http_service_detection()
    +test_scan_with_banner_grab()
    +test_scan_statistics()
    +test_ipv6_support()
    +test_socket_timeout_configuration()
    +test_clear_results()
    +test_get_open_ports()
  }

  class TestUDPScanner {
    +settings
    +mock_socket
    +test_response: bytes
    +result
    +mock_socket
    +result
    +mock_socket
    +icmp_error
    +result
    +mock_socket
    +result
    +mock_socket
    +result
    +mock_socket
    +result_socket
    +mock_socket
    +result_socket
    +mock_socket
    +dns_response: bytes
    +result
    +mock_socket
    +snmp_response: bytes
    +result
    +mock_socket
    +result
    +probe_data
    +probe_data
    +probe_data
    +probe_data
    +dns_response: bytes
    +service_info
    +snmp_response: bytes
    +service_info
    +unknown_response: bytes
    +service_info
    +mock_socket
    +responses
    +results
    +result
    +mock_socket
    +result
    +mock_socket
    +result
    --
    +scanner()
    +target()
    +ipv6_target()
    +test_scanner_initialization(scanner)
    +test_scan_port_open_response(mock_socket_class, scanner, target)
    +test_scan_port_timeout_filtered(mock_socket_class, scanner, target)
    +test_scan_port_icmp_unreachable(mock_socket_class, scanner, target)
    +test_scan_port_socket_error(mock_socket_class, scanner, target)
    +test_scan_port_unexpected_error(mock_socket_class, scanner, target)
    +test_create_udp_socket_ipv4(scanner, target)
    +test_create_udp_socket_ipv6(scanner, ipv6_target)
    +test_scan_with_service_probe_dns(mock_socket_class, scanner, target)
    +test_scan_with_service_probe_snmp(mock_socket_class, scanner, target)
    +test_scan_with_service_probe_timeout_fallback(mock_socket_class, scanner, target)
    +test_get_service_probe_dns(scanner)
    +test_get_service_probe_snmp(scanner)
    +test_get_service_probe_ntp(scanner)
    +test_get_service_probe_default(scanner)
    +test_analyze_udp_response_dns(scanner)
    +test_analyze_udp_response_snmp(scanner)
    +test_analyze_udp_response_unknown(scanner)
    +test_multiple_port_scan(mock_socket_class, scanner, target)
    +test_response_time_measurement(scanner, target)
    +delayed_response()
    +test_socket_cleanup_on_error(mock_socket_class, scanner, target)
  }

  class TestTargetEnumerator {
    +settings
    +target: str
    +targets
    +targets
    +target: str
    +targets
    +expected
    +cidr: str
    +targets
    +cidr: str
    +targets
    +start_ip: str
    +end_ip: str
    +targets
    +expected_ips
    +actual_ips
    +start_ip: str
    +end_ip: str
    +targets
    +hosts
    +targets
    +actual_ips
    +hosts
    +targets
    +targets
    +hosts
    +file_content: str
    +targets
    +scan_types
    +result
    +result
    +ports
    +ports
    +expected
    +ports
    +common_ports
    +targets
    +targets
    +cidr: str
    +targets
    +ip
    +targets
    --
    +enumerator()
    +default_ports()
    +test_enumerator_initialization(enumerator)
    +test_enumerate_targets_single_ip(enumerator, default_ports)
    +test_enumerate_targets_hostname(enumerator, default_ports)
    +test_enumerate_targets_cidr_small(enumerator, default_ports)
    +test_enumerate_targets_invalid_format(enumerator, default_ports)
    +test_enumerate_from_cidr_ipv4(enumerator, default_ports)
    +test_enumerate_from_cidr_ipv6(enumerator, default_ports)
    +test_enumerate_from_cidr_invalid(enumerator, default_ports)
    +test_enumerate_from_range_ipv4(enumerator, default_ports)
    +test_enumerate_from_range_ipv6(enumerator, default_ports)
    +test_enumerate_from_range_invalid_order(enumerator, default_ports)
    +test_enumerate_from_range_mixed_types(enumerator, default_ports)
    +test_enumerate_from_list_mixed(enumerator, default_ports)
    +test_enumerate_from_list_resolution_error(enumerator, default_ports)
    +resolve_side_effect()
    +test_enumerate_localhost(enumerator, default_ports)
    +test_enumerate_from_file(enumerator, default_ports)
    +test_enumerate_from_file_not_found(enumerator, default_ports)
    +test_get_enabled_scan_types(enumerator)
    +test_resolve_host_success(mock_gethostbyname, enumerator)
    +test_resolve_host_already_ip(mock_gethostbyname, enumerator)
    +test_resolve_host_failure(mock_gethostbyname, enumerator)
    +test_get_port_range_default(enumerator)
    +test_get_port_range_custom(enumerator)
    +test_get_port_range_invalid(enumerator)
    +test_get_common_ports(enumerator)
    +test_validate_target_valid_ip(enumerator)
    +test_validate_target_valid_cidr(enumerator)
    +test_validate_target_valid_hostname(enumerator)
    +test_validate_target_invalid(enumerator)
    +test_validate_target_resolution_failure(enumerator)
    +test_ipv6_target_detection(enumerator, default_ports)
    +test_ipv4_target_detection(enumerator, default_ports)
    +test_large_cidr_handling(enumerator, default_ports)
    +test_port_assignment_consistency(enumerator, default_ports)
  }

}

package "src.hawkeye" {
  class HawkEyeError {
    -__init__(message, details)
  }

  class ConfigurationError {
  }

  class NetworkError {
  }

  class ScanError {
  }

  class DetectionError {
  }

  class AssessmentError {
  }

  class ReportingError {
  }

  class ValidationError {
  }

}

package "src.hawkeye.cli" {
  class HawkEyeContext {
    -__init__()
    +setup_logging(verbose, quiet, log_file)
  }

  class HawkEyeGroup {
    +format_help(ctx, formatter)
    +invoke(ctx)
  }

  class HawkEyeProgress {
    +columns
    +scan_task
    +detect_task
    +assess_task
    +report_task
    +elapsed_time
    +table
    --
    -__init__(console)
    +create_progress(show_speed, show_eta): Progress
    +scanning_progress(total_targets, total_ports)
    +detection_progress(total_targets)
    +assessment_progress(total_services)
    +reporting_progress(total_reports)
    +display_final_summary(operation_type, stats)
  }

  class ProgressTracker {
    -__init__(progress, task_id, stats)
    +update(advance, description)
    +set_description(description)
  }

  class ScanProgressTracker {
    +description
    --
    +update_scan_result(target, port, state)
    +update_target_complete(target)
  }

  class DetectionProgressTracker {
    +description
    --
    +update_detection_result(target, confidence, found_mcp)
  }

  class AssessmentProgressTracker {
    +description
    --
    +update_assessment_result(service, risk_level)
  }

  class ReportingProgressTracker {
    +description
    --
    +update_report_result(report_type, findings, recommendations)
  }

  class StatusDisplay {
    +layout
    +header
    +footer
    --
    -__init__(console)
    +live_status(title)
  }

  class StatusUpdater {
    +content
    +header
    --
    -__init__(layout, live)
    +update_main(content)
    +update_header(title)
  }

  class VerbosityLevel {
    +QUIET: int
    +NORMAL: int
    +VERBOSE: int
    +DEBUG: int
  }

  class OutputController {
    +log_level
    +log_level
    +log_level
    +log_level
    +root_logger
    +console_handler
    +file_handler
    +formatter
    +banner_text
    +panel
    +message
    +message
    +message
    +percentage
    +original_console
    +original_level
    +original_quiet
    +original_debug
    +minutes
    +secs
    +hours
    +minutes
    +secs
    +rate
    --
    -__init__(console)
    +set_verbosity(level)
    +set_quiet_mode(quiet)
    +set_debug_mode(debug)
    +set_log_file(log_file)
    -_configure_logging()
    +print()
    +print_verbose()
    +print_debug()
    +print_error()
    +print_warning()
    +print_success()
    +print_info()
    +print_banner(title, subtitle)
    +print_section_header(title)
    +print_operation_start(operation, details)
    +print_operation_complete(operation, duration)
    +print_operation_failed(operation, error)
    +print_progress_update(message, current, total)
    +print_debug_info(category, data)
    +print_statistics(title, stats)
    +capture_output()
    +temporary_verbosity(level)
    +format_duration(seconds): str
    +format_size(bytes_count): str
    +format_rate(count, duration, unit): str
  }

  class QuietMode {
    -__init__(output_controller)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class VerboseMode {
    -__init__(output_controller)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class DebugMode {
    -__init__(output_controller)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class InputValidator {
    +HOSTNAME_REGEX
    +DOMAIN_REGEX
    +PORT_RANGE_REGEX
    +hostname
    +target
    +validated_ip
    +validated_network
    +validated_hostname
    +port_num
    +ports
    +part
    +match
    +start_port
    +end_port
    +port
    +path
    +path
    +parsed
    +timeout_val
    +thread_count
    +format_lower
    --
    -__init__()
    +validate_ip_address(ip_str)
    +validate_network(network_str)
    +validate_hostname(hostname): str
    +validate_target(target)
    +validate_port(port): int
    +validate_port_range(port_range)
    +validate_file_path(file_path, must_exist, must_be_file, must_be_readable): Path
    +validate_directory_path(dir_path, must_exist, must_be_writable): Path
    +validate_url(url): str
    +validate_timeout(timeout): float
    +validate_thread_count(threads): int
    +validate_output_format(format_str, supported_formats): str
  }

  class CLIErrorHandler {
    +message
    +message
    +message
    +message
    +message
    +message
    +message
    +message
    +message
    +message
    +content
    --
    -__init__(console)
    +handle_validation_error(error, param_name)
    +handle_configuration_error(error)
    +handle_network_error(error, target)
    +handle_permission_error(error, operation)
    +handle_file_error(error, file_path)
    +handle_generic_error(error, operation)
    +create_error_panel(title, message, suggestions): Panel
  }

  class ValidatedIPAddress {
    +name: str
    +validator
    --
    +convert(value, param, ctx)
  }

  class ValidatedTarget {
    +name: str
    +validator
    --
    +convert(value, param, ctx)
  }

  class ValidatedPortRange {
    +name: str
    +validator
    --
    +convert(value, param, ctx)
  }

  class ValidatedTimeout {
    +name: str
    +validator
    --
    +convert(value, param, ctx)
  }

  class SimpleDetectionResult {
    -__init__(method_str)
  }

  class ConfigFileManager {
    +SUPPORTED_FORMATS
    +DEFAULT_CONFIG_NAMES
    +start_path
    +current_path
    +config_path
    +current_path
    +home_path
    +config_path
    +config_path
    +file_format
    +content
    +config_data
    +config_data
    +config_data
    +parser
    +config_data
    +config_path
    +format
    +parser
    +settings
    +error_details
    +field
    +message
    +merged
    +env_overrides
    +config_key
    +key_parts
    +value
    +current_dict: env_overrides
    +current_dict
    +config_data
    +settings
    +default_config
    --
    -__init__()
    +find_config_file(start_path)
    +load_config_file(config_path)
    +save_config_file(config_data, config_path, format)
    +validate_config(config_data): HawkEyeSettings
    +merge_configs(base_config, override_config)
    +apply_environment_overrides(config_data)
    -_convert_env_value(value): Any
    +create_default_config()
    +generate_config_template(format): str
  }

  class ConfigFileType {
    +name: str
    +config_path
    +manager
    --
    +convert(value, param, ctx)
  }

}

package "src.hawkeye.assessment" {
  class AuthenticationIssue {
    +issue_id: str
    +name: str
    +description: str
    +severity: RiskLevel
    +category: str
    +affected_component: str
    +evidence
    +remediation
    +references
    +compliance_violations
  }

  class AuthenticationConfiguration {
    +target_host: str
    +authentication_enabled: bool
    +authentication_methods
    +password_policies
    +token_configurations
    +session_configurations
    +multi_factor_auth: bool
    +encryption_in_transit: bool
    +issues
    +security_score: float
    +recommendations
    +base_score: float
    +severity_deductions
    +deduction
    --
    +critical_issues()
    +high_issues()
    +get_issues_by_category(category)
    +calculate_security_score()
  }

  class AuthenticationAnalyzer {
    +auth_config
    +findings
    +result
    +config
    +issue
    +auth_methods
    +auth_methods
    +issue
    +issue
    +auth_str
    +issue
    +password_policy
    +min_length
    +issue
    +complexity_checks
    +issue
    +issue
    +token_config
    +token_fields
    +value
    +issue
    +issue
    +jwt_config
    +algorithm
    +issue
    +issue
    +session_config
    +issue
    +issue
    +timeout
    +issue
    +config_files
    +env_vars
    +command_line
    +path
    +content
    +matches
    +issue
    +base64_pattern: str
    +decoded
    +issue
    +jwt_pattern: str
    +token
    +issue
    +auth_env_vars
    +var_upper
    +issue
    +auth_flags
    +issue
    +pattern
    +match
    +value
    +issue
    +keyboard_patterns
    +weak_values
    +parts
    +header
    +payload
    +test_indicators
    +iss
    +aud
    +sub
    +recommendations
    +weak_password_issues
    +token_issues
    +session_issues
    +jwt_issues
    +findings
    +finding
    --
    -__init__(settings)
    -_init_weak_password_patterns()
    -_init_authentication_rules()
    +assess(detection_result): AssessmentResult
    +get_assessment_type(): str
    -_analyze_authentication(detection_result): AuthenticationConfiguration
    -_analyze_server_authentication(server_info, config)
    -_analyze_auth_config(auth_config, config)
    -_analyze_passwords(auth_config, config)
    -_analyze_tokens(auth_config, config)
    -_analyze_sessions(auth_config, config)
    -_analyze_raw_data_authentication(raw_data, config)
    -_analyze_config_file_auth(file_path, config)
    -_analyze_file_content_auth(content, file_path, config)
    -_analyze_environment_auth(env_vars, config)
    -_analyze_command_line_auth(command_line, config)
    -_is_weak_password(password): bool
    -_is_weak_credential(credential): bool
    -_is_test_jwt(token): bool
    -_generate_auth_recommendations(config)
    -_convert_issues_to_findings(config)
  }

  class RiskLevel {
    +NONE: str
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +CRITICAL: str
  }

  class VulnerabilityCategory {
    +AUTHENTICATION: str
    +AUTHORIZATION: str
    +ENCRYPTION: str
    +CONFIGURATION: str
    +NETWORK: str
    +INPUT_VALIDATION: str
    +SESSION_MANAGEMENT: str
    +ERROR_HANDLING: str
    +LOGGING: str
    +COMPLIANCE: str
  }

  class ComplianceFramework {
    +OWASP_TOP_10: str
    +NIST_CSF: str
    +ISO_27001: str
    +SOC2: str
    +PCI_DSS: str
    +GDPR: str
  }

  class CVSSVector {
    +attack_vector: str
    +attack_complexity: str
    +privileges_required: str
    +user_interaction: str
    +scope: str
    +confidentiality: str
    +integrity: str
    +availability: str
    +exploit_code_maturity
    +remediation_level
    +report_confidence
    +confidentiality_requirement
    +integrity_requirement
    +availability_requirement
    +vector_parts
    --
    +to_vector_string(): str
  }

  class VulnerabilityInfo {
    +id: str
    +title: str
    +description: str
    +category: VulnerabilityCategory
    +severity: RiskLevel
    +cvss_vector
    +cvss_score
    +cwe_id
    +references
    +affected_components
    +exploit_available: bool
    +patch_available: bool
    +workaround_available: bool
    --
    +is_exploitable(): bool
    +has_mitigation(): bool
  }

  class SecurityFinding {
    +id: str
    +title: str
    +description: str
    +category: VulnerabilityCategory
    +severity: RiskLevel
    +confidence: float
    +affected_asset: str
    +evidence
    +remediation
    +references
    +compliance_violations
    +vulnerability_info
    +severity_weights
    --
    +risk_score(): float
  }

  class AssessmentResult {
    +target_host: str
    +assessment_timestamp: float
    +overall_risk_level: RiskLevel
    +overall_risk_score: float
    +findings
    +vulnerabilities
    +compliance_status
    +recommendations
    +assessment_duration
    +raw_data
    +violations
    +total_score
    +max_possible_score
    --
    +critical_findings()
    +high_findings()
    +exploitable_vulnerabilities()
    +unpatched_vulnerabilities()
    +get_findings_by_category(category)
    +get_compliance_violations()
    +calculate_overall_risk()
    +to_dict()
  }

  class RiskAssessment {
    +total_findings
    +total_vulnerabilities
    +risk_distribution
    --
    -__init__()
    +add_result(result)
    +get_results_by_risk_level(risk_level)
    +get_high_risk_targets()
    +get_overall_statistics()
  }

  class RiskAssessor {
    +assessment
    +result
    --
    -__init__(settings)
    +assess(detection_result): AssessmentResult
    +get_assessment_type(): str
    +assess_multiple(detection_results): RiskAssessment
    +get_assessment_statistics()
    +clear_statistics()
  }

  class AssessmentError {
  }

  class CVSSError {
  }

  class ConfigurationError {
  }

  class ComplianceError {
  }

  class RemediationPriority {
    +IMMEDIATE: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +INFORMATIONAL: str
  }

  class RemediationComplexity {
    +TRIVIAL: str
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +COMPLEX: str
  }

  class RemediationCategory {
    +CONFIGURATION: str
    +AUTHENTICATION: str
    +ENCRYPTION: str
    +NETWORK_SECURITY: str
    +ACCESS_CONTROL: str
    +MONITORING: str
    +COMPLIANCE: str
    +INFRASTRUCTURE: str
    +CODE_CHANGES: str
    +PROCESS_IMPROVEMENT: str
  }

  class RemediationAction {
    +id: str
    +title: str
    +description: str
    +category: RemediationCategory
    +priority: RemediationPriority
    +complexity: RemediationComplexity
    +estimated_effort_hours: int
    +implementation_steps
    +prerequisites
    +verification_steps
    +tools_required
    +documentation_links
    +compliance_frameworks
    +affected_findings
    +risk_reduction: float
    +cost_estimate
    +timeline_estimate
    +priority_weights
    --
    +{class} validate_effort_hours(v)
    +priority_score(): int
    +effort_to_impact_ratio(): float
  }

  class RemediationPlan {
    +target_host: str
    +plan_timestamp: float
    +actions
    +total_estimated_effort: int
    +total_risk_reduction: float
    +implementation_phases
    +executive_summary: str
    +quick_wins
    +long_term_actions
    --
    +immediate_actions()
    +high_priority_actions()
    +get_actions_by_category(category)
    +get_actions_by_complexity(complexity)
    +calculate_totals()
  }

  class RemediationEngine {
    +target_host
    +plan
    +all_findings
    +actions
    +actions
    +action_id_counter: int
    +findings_by_category
    +category_actions
    +cross_cutting_actions
    +actions
    +actions
    +finding_ids
    +has_weak_auth
    +has_no_auth
    +has_weak_passwords
    +actions
    +finding_ids
    +has_no_tls
    +has_weak_crypto
    +actions
    +finding_ids
    +has_default_config
    +has_debug_enabled
    +actions
    +finding_ids
    +has_cors_issues
    +has_port_issues
    +actions
    +finding_ids
    +actions
    +finding_ids
    +actions
    +finding_ids
    +actions
    +finding_ids
    +actions
    +finding_ids
    +actions
    +finding_ids
    +frameworks
    +actions
    +quick_wins
    +long_term
    +phases
    +critical_count
    +high_count
    +summary_parts
    --
    -__init__(settings)
    +generate_remediation_plan(assessment_results): RemediationPlan
    -_generate_remediation_actions(findings)
    -_generate_category_actions(category, findings, start_id)
    -_generate_auth_actions(findings, start_id)
    -_generate_encryption_actions(findings, start_id)
    -_generate_config_actions(findings, start_id)
    -_generate_network_actions(findings, start_id)
    -_generate_authorization_actions(findings, start_id)
    -_generate_input_validation_actions(findings, start_id)
    -_generate_session_actions(findings, start_id)
    -_generate_error_handling_actions(findings, start_id)
    -_generate_logging_actions(findings, start_id)
    -_generate_compliance_actions(findings, start_id)
    -_generate_cross_cutting_actions(findings, start_id)
    -_prioritize_actions(actions)
    +priority_key()
    -_identify_quick_wins(actions)
    -_identify_long_term_actions(actions)
    -_create_implementation_phases(actions)
    -_generate_executive_summary(plan, findings): str
    -_load_remediation_templates()
  }

  class CVSSScores {
    +base_score: float
    +temporal_score
    +environmental_score
    +exploitability_score: float
    +impact_score: float
    +temporal_multiplier
    +modified_impact_score
    +modified_exploitability_score
    +overall_score: float
    +risk_level: RiskLevel
    +scores
    --
    -__post_init__()
    +calculate_overall_score()
    +calculate_risk_level()
    +to_dict()
  }

  class CVSSCalculator {
    +scores
    +vector_string
    +vector_string
    +metrics
    +parts
    +required_base_metrics
    +missing_metrics
    +vector
    +vector
    +av
    +ac
    +ui
    +pr
    +pr
    +c
    +i
    +a
    +exploitability
    +iss
    +impact
    +impact
    +base_score: float
    +base_score
    +base_score
    +base_score
    +e
    +rl
    +rc
    +temporal_multiplier
    +temporal_score
    +cr
    +ir
    +ar
    +av
    +ac
    +ui
    +pr
    +pr
    +c
    +i
    +a
    +modified_exploitability
    +miss
    +modified_impact
    +modified_impact
    +environmental_score: float
    +e
    +rl
    +rc
    +environmental_score
    +environmental_score
    +environmental_score
    --
    -__init__()
    +calculate_scores(cvss_vector): CVSSScores
    +parse_vector_string(vector_string): CVSSVector
    +calculate_from_string(vector_string): CVSSScores
    -_validate_vector(vector)
    -_calculate_base_score(vector)
    -_calculate_temporal_score(vector, base_score)
    -_calculate_environmental_score(vector)
    -_has_temporal_metrics(vector): bool
    -_has_environmental_metrics(vector): bool
  }

  class CVSSAssessment {
    +scores
    +cvss_vector
    +scores
    +vulnerability
    +scores
    --
    -__init__()
    +assess_vulnerability(vulnerability): VulnerabilityInfo
    +create_vulnerability_from_cvss(vuln_id, title, description, cvss_vector_string): VulnerabilityInfo
    +get_score_breakdown(cvss_vector)
  }

  class RemediationError {
  }

  class InvalidFindingError {
  }

  class RemediationTemplateError {
  }

  class PrioritizationError {
  }

  class RiskCalculationError {
  }

  class TransportSecurityAssessor {
    +start_time
    +mcp_server
    +findings
    +vulnerabilities
    +transport_findings
    +tls_findings
    +protocol_findings
    +network_findings
    +vulnerabilities
    +result
    +findings
    +transport_type
    +findings
    +https_available
    +headers_findings
    +methods_findings
    +findings
    +wss_available
    +ws_findings
    +findings
    +cmdline_findings
    +findings
    +tls_config
    +findings
    +findings
    +insecure_ports
    +response
    +response
    +context
    +findings
    +url
    +response
    +headers
    +security_headers
    +findings
    +url
    +response
    +allowed_methods
    +dangerous_methods
    +found_dangerous
    +findings
    +origin_check
    +username
    +findings
    +cmdline_str
    +credential_patterns
    +config
    +context
    +cert
    +cipher
    +version
    +cipher_name
    +vulnerabilities
    +critical_findings
    +high_findings
    +vuln
    +vector
    +severity_scores
    +base_score
    +recommendations
    +compliance_violations
    +compliance_status
    +violations
    --
    -__init__(settings)
    +get_assessment_type(): str
    +assess(detection_result): AssessmentResult
    -_assess_transport_security(mcp_server)
    -_assess_http_security(mcp_server)
    -_assess_websocket_security(mcp_server)
    -_assess_stdio_security(mcp_server)
    -_assess_tls_security(mcp_server)
    -_assess_protocol_security(mcp_server)
    -_assess_network_security(mcp_server)
    -_test_https_availability(host, port): bool
    -_test_wss_availability(host, port): bool
    -_check_http_security_headers(mcp_server)
    -_check_http_methods(mcp_server)
    -_check_websocket_security(mcp_server)
    -_is_elevated_process(process_info): bool
    -_check_stdio_cmdline_security(mcp_server)
    -_analyze_tls_configuration(host, port)
    -_generate_vulnerabilities(findings)
    -_create_cvss_vector(finding): CVSSVector
    -_calculate_cvss_score(finding): float
    -_generate_recommendations(findings, mcp_server)
    -_assess_compliance(findings)
    -_create_failed_result(target_host, error_message, duration): AssessmentResult
    -_get_http_security_rules()
    -_get_websocket_security_rules()
    -_get_stdio_security_rules()
    -_get_general_transport_rules()
  }

  class ComplianceStatus {
    +COMPLIANT: str
    +NON_COMPLIANT: str
    +PARTIALLY_COMPLIANT: str
    +NOT_APPLICABLE: str
    +UNKNOWN: str
  }

  class ComplianceRequirement {
    +ACCESS_CONTROL: str
    +AUTHENTICATION: str
    +AUTHORIZATION: str
    +DATA_PROTECTION: str
    +ENCRYPTION: str
    +LOGGING_MONITORING: str
    +NETWORK_SECURITY: str
    +VULNERABILITY_MANAGEMENT: str
    +INCIDENT_RESPONSE: str
    +CONFIGURATION_MANAGEMENT: str
    +SECURE_DEVELOPMENT: str
    +RISK_MANAGEMENT: str
  }

  class ComplianceControl {
    +id: str
    +framework: ComplianceFramework
    +title: str
    +description: str
    +requirement_category: ComplianceRequirement
    +severity: RiskLevel
    +applicable_categories
    +keywords
    +remediation_guidance: str
  }

  class ComplianceViolation {
    +control: ComplianceControl
    +finding: SecurityFinding
    +violation_description: str
    +impact_level: RiskLevel
    +remediation_priority: int
    +evidence
  }

  class ComplianceReport {
    +target_host: str
    +framework: ComplianceFramework
    +overall_status: ComplianceStatus
    +compliance_score: float
    +total_controls: int
    +compliant_controls: int
    +non_compliant_controls: int
    +violations
    +recommendations
    +assessment_duration: float
    +raw_data
  }

  class ComplianceChecker {
    +start_time
    +frameworks
    +frameworks
    +findings
    +compliance_reports
    +overall_findings
    +overall_vulnerabilities
    +report
    +framework_findings
    +framework_vulnerabilities
    +result
    +start_time
    +framework_controls
    +violations
    +compliant_controls: int
    +control_violations
    +total_controls
    +non_compliant_controls
    +compliance_score
    +overall_status
    +overall_status
    +overall_status
    +recommendations
    +violations
    +violation
    +finding_text
    +encryption_keywords
    +finding_text
    +auth_keywords
    +finding_text
    +access_keywords
    +finding_text
    +control_severity_value
    +finding_severity_value
    +max_severity_value
    +severity_priority
    +impact_level
    +findings
    +finding
    +vulnerabilities
    +cvss_vector
    +vulnerability
    +base_scores
    +recommendations
    +category_violations
    +high_priority_count
    +recommendations
    +non_compliant_frameworks
    +partially_compliant_frameworks
    +frameworks_list
    +frameworks_list
    +compliance_status
    +controls
    --
    -__init__(settings)
    +get_assessment_type(): str
    +assess(detection_result): AssessmentResult
    -_assess_framework_compliance(target_host, framework, findings): ComplianceReport
    -_check_control_compliance(control, findings)
    -_is_control_violated(control, finding): bool
    -_check_encryption_violation(control, finding): bool
    -_check_authentication_violation(control, finding): bool
    -_check_access_control_violation(control, finding): bool
    -_generate_violation_description(control, finding): str
    -_calculate_violation_impact(control, finding): RiskLevel
    -_calculate_remediation_priority(control, finding): int
    -_convert_violations_to_findings(violations)
    -_generate_vulnerabilities_from_violations(violations)
    -_create_compliance_cvss_vector(violation): CVSSVector
    -_calculate_compliance_cvss_score(violation): float
    -_generate_framework_recommendations(framework, violations)
    -_generate_compliance_recommendations(reports)
    -_calculate_overall_compliance_status(reports)
    -_serialize_report(report)
    -_create_empty_result(target_host, duration): AssessmentResult
    -_create_failed_result(target_host, error_message, duration): AssessmentResult
    -_initialize_compliance_controls()
    -_get_owasp_controls()
    -_get_nist_controls()
    -_get_pci_controls()
    -_get_gdpr_controls()
    -_get_soc2_controls()
    -_get_iso27001_controls()
  }

  class DefaultPattern {
    +pattern_id: str
    +name: str
    +description: str
    +severity: RiskLevel
    +category: VulnerabilityCategory
    +detection_patterns
    +file_patterns
    +port_patterns
    +environment_patterns
    +remediation
    +references
    +compliance_violations
  }

  class DefaultDetectionResult {
    +target_host: str
    +detected_defaults
    +configuration_files
    +environment_variables
    +process_info
    +risk_score: float
    +recommendations
    +severity_weights
    +total_score
    --
    +critical_defaults()
    +high_defaults()
    +get_defaults_by_category(category)
    +calculate_risk_score()
  }

  class DefaultConfigurationDetector {
    +default_detection
    +findings
    +result
    +result
    +config_str
    +config_str
    +auth_disabled_pattern
    +config_files
    +env_vars
    +command_line
    +process_info
    +path
    +content
    +content_lower
    +command_lower
    +recommendations
    +auth_defaults
    +config_defaults
    +encryption_defaults
    +network_defaults
    +logging_defaults
    +findings
    +finding
    --
    -__init__(settings)
    -_init_default_patterns()
    +assess(detection_result): AssessmentResult
    +get_assessment_type(): str
    -_detect_default_configurations(detection_result): DefaultDetectionResult
    -_analyze_server_defaults(server_info, result)
    -_analyze_security_config_defaults(security_config, result)
    -_analyze_auth_config_defaults(auth_config, result)
    -_analyze_raw_data_defaults(raw_data, result)
    -_analyze_configuration_file_defaults(file_path, result)
    -_analyze_content_defaults(content, result)
    -_analyze_environment_defaults(env_vars, result)
    -_analyze_command_line_defaults(command_line, result)
    -_generate_default_recommendations(result)
    -_convert_defaults_to_findings(result)
  }

  class ConfigurationIssue {
    +issue_id: str
    +title: str
    +description: str
    +severity: RiskLevel
    +category: VulnerabilityCategory
    +affected_config: str
    +current_value: Any
    +recommended_value
    +remediation
    +compliance_violations
    +references
  }

  class SecurityConfiguration {
    +target_host: str
    +transport_type: TransportType
    +configuration_files
    +security_settings
    +issues
    +security_score: float
    +recommendations
    +severity_weights
    +total_deduction
    --
    +critical_issues()
    +high_issues()
    +get_issues_by_category(category)
    +calculate_security_score()
  }

  class ConfigurationAnalyzer {
    +config_analysis
    +findings
    +result
    +config
    +issue
    +default_ports
    +issue
    +issue
    +auth_enabled
    +issue
    +auth_methods
    +weak_methods
    +issue
    +tls_enabled
    +issue
    +tls_version
    +issue
    +config_files
    +env_vars
    +command_line
    +path
    +content
    +parsed_config: NoneType
    +parsed_config
    +parsed_config
    +flattened
    +security_keys
    +key_lower
    +key_lower
    +value_str
    +issue
    +content_lower
    +secret_patterns
    +matches
    +secret_value
    +issue
    +var_name_lower
    +var_value_lower
    +issue
    +issue
    +command_lower
    +insecure_flags
    +severity
    +issue
    +issue
    +issue
    +recommendations
    +auth_issues
    +network_issues
    +config_issues
    +logging_issues
    +findings
    +finding
    +items
    +new_key
    --
    -__init__(settings)
    -_init_security_rules()
    -_init_compliance_mappings()
    +assess(detection_result): AssessmentResult
    +get_assessment_type(): str
    -_analyze_security_configuration(detection_result): SecurityConfiguration
    -_analyze_server_configuration(server_info, config)
    -_analyze_security_info(security_info, config)
    -_analyze_raw_configuration_data(raw_data, config)
    -_analyze_configuration_file(file_path, config)
    -_analyze_parsed_configuration(parsed_config, config, file_path)
    -_analyze_security_setting(key, value, config, file_path)
    -_analyze_configuration_content(content, config, file_path)
    -_analyze_environment_variables(env_vars, config)
    -_analyze_command_line(command_line, config)
    -_analyze_transport_security(config)
    -_generate_recommendations(config)
    -_convert_issues_to_findings(config)
    -_flatten_dict(d, parent_key, sep)
  }

}

package "src.hawkeye.detection" {
  class ConfigFileDiscovery {
    +start_time
    +search_paths
    +max_depth
    +include_docker
    +config_files
    +mcp_configs
    +best_config
    +mcp_server
    +confidence
    +config_files
    +files_processed: int
    +expanded_path
    +found_files
    +relative_path
    +depth
    +unique_files
    +mcp_configs
    +config_info
    +file_type
    +content
    +mcp_config
    +dependencies
    +scripts
    +content
    +dependencies
    +scripts
    +mcp_config
    +content
    +mcp_config: content
    +content
    +mcp_config
    +content
    +content
    +content
    +content
    +line
    +content
    +dependencies
    +deps
    +content_str
    +mcp_keywords
    +confidence: float
    +official_packages
    +port
    +transport_type
    +server_type
    +capabilities
    +tools
    +resources
    +version
    +security_config
    +port
    +port_match
    +port_match
    +content_str
    +port_match
    +content_str
    +capabilities
    +caps
    +tools
    +tool_list
    +resources
    +resource_list
    +security_config
    +security
    +content_str
    +max_depth
    +config_files
    +config_file
    +config_info
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host): DetectionResult
    -_discover_config_files(search_paths, max_depth)
    -_analyze_config_files(config_files, include_docker)
    -_analyze_single_config_file(config_file, include_docker)
    -_parse_package_json(file_path)
    -_parse_json_file(file_path)
    -_parse_yaml_file(file_path)
    -_parse_dockerfile(file_path)
    -_parse_docker_compose(file_path)
    -_parse_text_file(file_path)
    -_extract_dependencies(package_json)
    -_has_mcp_indicators(config_info): bool
    -_calculate_config_confidence(config_info): float
    -_create_mcp_server_from_config(config_info, host): MCPServerInfo
    -_extract_port_from_config(config_info)
    -_determine_transport_type(config_info): TransportType
    -_determine_server_type(config_info): MCPServerType
    -_extract_capabilities(config_info)
    -_extract_tools(config_info)
    -_extract_resources(config_info)
    -_extract_version(config_info)
    -_extract_security_config(config_info)
    -_config_to_dict(config_info)
    +discover_config_files_in_path(search_path, max_depth)
    +analyze_specific_config_file(file_path)
  }

  class PipelineConfig {
    +enable_process_enumeration: bool
    +enable_config_discovery: bool
    +enable_protocol_verification: bool
    +enable_transport_detection: bool
    +enable_npx_detection: bool
    +enable_docker_inspection: bool
    +enable_environment_analysis: bool
    +enable_mcp_introspection: bool
    +introspection_timeout: float
    +enable_detailed_analysis: bool
    +enable_risk_assessment: bool
    +fail_fast: bool
    +parallel_detection: bool
    +max_concurrent_detections: int
    +min_confidence_threshold: float
    +include_failed_detections: bool
  }

  class PipelineResult {
    +target_host: str
    +start_time: datetime
    +end_time: datetime
    +duration: float
    +success: bool
    +detection_results
    +introspection_results
    +total_detections: int
    +successful_detections: int
    +failed_detections: int
    +mcp_servers_found: int
    +best_mcp_server
    +highest_confidence_result
    +risk_assessment
    +errors
    +warnings
    +raw_data
  }

  class DetectionPipeline {
    +introspection_config
    +start_time
    +result
    +detection_results
    +introspection_results
    +end_time
    +results
    +detection_results
    +detection_result
    +introspection_results
    +mcp_servers
    +server_id
    +capabilities
    +mcp_servers
    +process_info
    +process_info
    +all_results
    +filtered_results
    +mcp_results
    +best_result
    +risk_assessment
    +high_risk_servers
    +critical_risk_servers
    +risk_level: str
    +risk_level: str
    +risk_level: str
    +total_pipelines
    +current_avg
    +new_avg
    +total_pipelines
    +results
    +result
    +error_result
    +successful_count
    --
    -__init__(config, settings)
    -_init_detectors()
    -_init_introspection()
    +execute_pipeline(target_host): PipelineResult
    -_execute_traditional_detection(target_host)
    -_execute_introspection(target_host, detection_results)
    -_extract_mcp_servers(detection_results)
    -_analyze_results(result)
    -_perform_risk_assessment(result)
    -_update_average_duration(duration)
    +get_pipeline_statistics()
    +execute_batch_pipeline(targets)
  }

  class MCPTool {
    +name: str
    +description: str
    +input_schema
    +name_lower
    +desc_lower
    +risk_mapping
    --
    +{class} from_new_tool(new_tool)
    +capability_category(): str
    +risk_level(): str
  }

  class MCPResource {
    +uri: str
    +name: str
    +description: str
    +mime_type
    --
    +{class} from_new_resource(new_resource)
  }

  class MCPCapabilities {
    +server_name: str
    +server_version: str
    +protocol_version: str
    +tools
    +resources
    +capabilities
    +risk_hierarchy
    +max_risk
    --
    +{class} from_new_capabilities(new_server_info)
    +tool_count(): int
    +resource_count(): int
    +capability_categories()
    +highest_risk_level(): str
    +has_external_access(): bool
    +has_file_access(): bool
    +has_code_execution(): bool
  }

  class MCPIntrospector {
    +server_id
    +server_id
    +server_config
    +transport_type
    +introspection_result
    +error_msg
    +new_server_info
    +legacy_capabilities
    +total_successful
    +transport_counts
    +transport_handler
    +server_config
    +introspection_result
    +new_server_info
    +server_config
    +tools
    +legacy_tools
    +server_config
    +resources
    +legacy_resources
    +server_config
    +capabilities
    +total_discoveries
    +results
    +capabilities
    +successful_count
    +total_operations
    +successful_operations
    +total_introspections
    +total_discoveries
    +new_tools
    +tool_risks
    +risk_analysis
    +threat_analysis
    +risk_categories
    +risk_scores
    +risk_report
    --
    -__init__(config)
    +introspect_server(server_info, process_info)
    +get_supported_transports()
    +get_transport_statistics()
    -_get_most_used_transport(): str
    +test_transport_connectivity(transport_type, server_config): bool
    +introspect_with_specific_transport(server_info, process_info, force_transport)
    +discover_tools_only(server_info, process_info)
    +discover_resources_only(server_info, process_info)
    +discover_capabilities_only(server_info, process_info)
    +get_discovery_statistics()
    +introspect_multiple_servers(server_list)
    +get_comprehensive_statistics()
    -_calculate_overall_success_rate(): float
    -_calculate_average_discoveries(): float
    +analyze_server_risks(capabilities)
    -_convert_legacy_tool_to_new(legacy_tool)
  }

  class MockNewTool {
    -__init__(name, description, input_schema)
  }

  class MCPRegistryClient {
    -__init__()
    +discover_available_tools()
    +get_tool_metadata(tool_name)
  }

  class NPXDetector {
    +start_time
    +check_global
    +check_local
    +check_processes
    +detection_data
    +mcp_servers
    +global_packages
    +local_packages
    +running_processes
    +best_server
    +scan_duration
    +packages
    +result
    +npm_data
    +dependencies
    +packages
    +search_paths
    +package_data
    +all_deps
    +processes
    +proc_info
    +cmdline
    +cmdline_str
    +match
    +confidence: float
    +servers
    +server
    +config_info
    +servers
    +process_info
    +server
    +port
    +config_data
    +dependencies
    +scripts
    +package_name
    +cmdline_str
    +cmdline_str
    +port_match
    +p_match
    +running_servers
    +confidence: float
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host): DetectionResult
    -_detect_global_npx_packages()
    -_detect_local_mcp_packages()
    -_detect_running_npx_processes()
    -_is_mcp_package(package_name): bool
    -_is_npx_mcp_process(cmdline): bool
    -_extract_package_name(cmdline)
    -_get_package_confidence(package_name): float
    -_get_process_confidence(cmdline): float
    -_analyze_npx_packages(packages, location)
    -_analyze_running_processes(processes)
    -_analyze_package_config(package_json_path)
    -_infer_transport_type(package): TransportType
    -_infer_transport_from_cmdline(cmdline): TransportType
    -_extract_port_from_cmdline(cmdline)
    -_select_best_mcp_server(servers)
    -_calculate_confidence(server, detection_data): float
  }

  class TransportType {
    +STDIO: str
    +HTTP: str
    +WEBSOCKET: str
    +UNKNOWN: str
  }

  class DetectionMethod {
    +PROCESS_ENUMERATION: str
    +CONFIG_FILE_DISCOVERY: str
    +PROTOCOL_HANDSHAKE: str
    +TRANSPORT_DETECTION: str
    +NPX_PACKAGE_DETECTION: str
    +DOCKER_INSPECTION: str
    +ENVIRONMENT_ANALYSIS: str
  }

  class MCPServerType {
    +STANDALONE: str
    +NPX_PACKAGE: str
    +DOCKER_CONTAINER: str
    +EMBEDDED: str
    +UNKNOWN: str
  }

  class ProcessInfo {
    +pid: int
    +name: str
    +cmdline
    +cwd
    +env_vars
    +user
    +create_time
    +cpu_percent
    +memory_percent
    +mcp_keywords
    +cmdline_str
    --
    +is_node_process(): bool
    +has_mcp_indicators(): bool
  }

  class ConfigFileInfo {
    +path: Path
    +file_type: str
    +content
    +mcp_config
    +dependencies
    +scripts
    +mcp_packages
    --
    +has_mcp_dependencies(): bool
    +has_mcp_scripts(): bool
  }

  class MCPServerInfo {
    +host: str
    +port
    +transport_type: TransportType
    +server_type: MCPServerType
    +process_info
    +config_info
    +capabilities
    +tools
    +resources
    +version
    +authentication
    +security_config
    +docker_info
    +environment_info
    +protocol
    +protocol
    --
    +is_secure(): bool
    +has_authentication(): bool
    +endpoint_url()
  }

  class DetectionResult {
    +target_host: str
    +detection_method: DetectionMethod
    +timestamp: float
    +success: bool
    +mcp_server
    +confidence: float
    +error
    +raw_data
    +scan_duration
    +server
    +result
    --
    +is_mcp_detected(): bool
    +risk_level(): str
    +to_dict()
  }

  class MCPDetector {
    +results
    +result
    +error_result
    +stats
    --
    -__init__(settings)
    +detect(target_host): DetectionResult
    +get_detection_method(): DetectionMethod
    +detect_multiple(targets)
    +get_results()
    +get_mcp_servers()
    +get_detection_statistics()
    +clear_results()
  }

  class DetectionError {
  }

  class MCPDetectionError {
  }

  class ProcessDetectionError {
  }

  class ConfigDetectionError {
  }

  class ProtocolDetectionError {
  }

  class DockerDetectionError {
  }

  class ProtocolVerifier {
    +retry_strategy
    +adapter
    +sock
    +result
    +start_time
    +result
    +result
    +transport_attempts
    +settings
    +common_ports
    +best_result: NoneType
    +highest_confidence: float
    +result
    +best_result: result
    +highest_confidence
    +protocols
    +base_url
    +endpoints
    +url
    +handshake_result
    +mcp_server
    +protocols
    +endpoints
    +url
    +handshake_result
    +mcp_server
    +process_info
    +handshake_result
    +mcp_server
    +requests_logger
    +urllib3_logger
    +original_requests_level
    +original_urllib3_level
    +initialize_request
    +response
    +response_data
    +response_text
    +loop
    +result
    +initialize_request
    +response
    +response_data
    +npx_package: NoneType
    +npx_package
    +help_cmd
    +result
    +output
    +confidence: float
    +indicators
    +cmdline_str
    +result
    +mcp_fields
    +tools
    +result
    +capabilities
    +tools_info
    +resources
    +result
    +capabilities
    +resources_info
    +process_info
    +config_info
    +cmdline_str
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    -_is_port_open(host, port, timeout): bool
    +detect(target_host, port, transport_type): DetectionResult
    -_auto_detect_and_verify(target_host, port): DetectionResult
    -_verify_transport(target_host, port, transport_type): DetectionResult
    -_verify_http_transport(target_host, port): DetectionResult
    -_verify_websocket_transport(target_host, port): DetectionResult
    -_verify_stdio_transport(target_host): DetectionResult
    -_attempt_http_handshake(url)
    -_attempt_websocket_handshake(url)
    -_attempt_stdio_handshake(process_info)
    -_test_npx_mcp_command(cmdline)
    -_analyze_stdio_process_heuristically(process_info)
    -_is_valid_mcp_response(response_data): bool
    -_extract_tools_from_response(response_data)
    -_extract_resources_from_response(response_data)
    -_determine_server_type(): MCPServerType
  }

  class ProcessEnumerator {
    +start_time
    +include_env
    +detailed_analysis
    +processes
    +node_processes
    +mcp_processes
    +best_process
    +mcp_server
    +confidence
    +processes
    +pinfo
    +env_vars
    +cpu_percent: NoneType
    +memory_percent: NoneType
    +cpu_percent
    +memory_percent
    +env_vars
    +process_info
    +node_processes
    +cmdline_str
    +mcp_processes
    +cmdline_str
    +mcp_patterns
    +cwd_lower
    +confidence: float
    +cmdline_str
    +server_type
    +server_type
    +transport_type
    +cmdline_str
    +transport_type
    +transport_type
    +transport_type
    +port
    +port_str
    +all_processes
    +proc
    +env_vars
    +env_vars
    +process_info
    +result
    +results
    +process_result
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host): DetectionResult
    -_enumerate_processes(include_env, detailed)
    -_filter_node_processes(processes)
    -_analyze_mcp_processes(node_processes)
    -_has_mcp_indicators(process): bool
    -_calculate_confidence(process): float
    -_create_mcp_server_info(process, host): MCPServerInfo
    -_extract_port_from_cmdline(cmdline)
    -_process_to_dict(process)
    +get_all_node_processes(include_env)
    +analyze_process_by_pid(pid, include_env)
    +enumerate_mcp_processes(include_env, detailed_analysis)
  }

  class TransportDetector {
    +start_time
    +transport_results
    +best_transport
    +mcp_server
    +results
    +stdio_result
    +http_ports
    +http_result
    +ws_ports
    +ws_result
    +confidence: float
    +details
    +cmdline_str
    +stdio_score: int
    +has_network_indicators
    +config_content
    +confidence
    +confidence: float
    +details
    +security_config
    +http_response
    +cmdline_str
    +http_score: int
    +config_content
    +confidence: float
    +details
    +security_config
    +ws_response
    +cmdline_str
    +ws_score: int
    +config_content
    +ports
    +extracted_ports
    +extracted_ports
    +ports
    +extracted_ports
    +extracted_ports
    +ports
    +port
    +port
    +port
    +ports
    +content_str
    +port_patterns
    +matches
    +port
    +result
    +protocols
    +url
    +response
    +server_header
    +result
    +headers
    +protocols
    +http_protocol
    +url
    +response
    +sorted_results
    +best_result
    +cmdline_str
    +security_analysis
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host, port, process_info, config_info): DetectionResult
    -_analyze_all_transports(target_host, port, process_info, config_info)
    -_analyze_stdio_transport(process_info, config_info)
    -_analyze_http_transport(target_host, port, process_info, config_info)
    -_analyze_websocket_transport(target_host, port, process_info, config_info)
    -_get_candidate_http_ports(process_info, config_info)
    -_get_candidate_websocket_ports(process_info, config_info)
    -_extract_ports_from_cmdline(cmdline)
    -_extract_ports_from_config(config_info)
    -_is_port_open(host, port, timeout): bool
    -_test_http_connectivity(host, port)
    -_test_websocket_connectivity(host, port)
    -_select_best_transport(transport_results)
    -_determine_server_type(process_info, config_info): MCPServerType
    +analyze_transport_security(transport_type, host, port)
  }

  class EnvironmentAnalyzer {
    +start_time
    +analyze_system
    +analyze_processes
    +include_inherited
    +detection_data
    +mcp_servers
    +system_env
    +process_envs
    +best_server
    +scan_duration
    +env_vars
    +process_envs
    +proc_info
    +pid
    +name
    +cmdline
    +env_dict
    +mcp_env_vars
    +servers
    +host
    +port
    +transport_type
    +server_type
    +server
    +host_vars
    +port_vars
    +match
    +port
    +transport_vars
    +transport_value
    +all_values
    +all_values
    +indicators
    +key_lower
    +value_lower
    +confidence: float
    +known_vars
    +cmdline_str
    +indicators
    +indicators
    +all_env_vars
    +indicators
    +all_env_vars
    +match
    +port
    +indicators
    +all_env_vars
    +security_patterns
    +key_lower
    +value_lower
    +confidence: float
    +servers_with_confidence
    +env_info
    +env_vars
    +confidence
    +confidence: float
    +mcp_indicators
    +avg_indicator_confidence
    +transport_indicators
    +port_indicators
    +security_indicators
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host): DetectionResult
    -_analyze_system_environment()
    -_analyze_process_environments(include_inherited)
    -_is_mcp_related_env_var(key, value): bool
    -_extract_servers_from_env(env_vars, source)
    -_extract_host_from_env(env_vars)
    -_extract_port_from_env(env_vars)
    -_extract_transport_from_env(env_vars): TransportType
    -_determine_server_type_from_env(env_vars, source): MCPServerType
    -_extract_env_indicators(env_vars)
    -_calculate_process_env_confidence(env_vars, cmdline): float
    -_extract_mcp_indicators(detection_data)
    -_extract_transport_indicators(detection_data)
    -_extract_port_indicators(detection_data)
    -_extract_security_indicators(detection_data)
    -_get_env_var_confidence(key, value): float
    -_select_best_mcp_server(servers)
    -_calculate_confidence(server, detection_data): float
  }

  class DockerInspector {
    +start_time
    +check_running
    +check_images
    +check_compose
    +detection_data
    +mcp_servers
    +running_containers
    +available_images
    +compose_files
    +best_server
    +scan_duration
    +result
    +result
    +containers
    +result
    +container_info
    +container_id
    +detailed_info
    +images
    +result
    +image_info
    +image_name
    +detailed_info
    +compose_files
    +compose_filenames
    +search_paths
    +filepath
    +compose_data
    +image
    +command
    +ports
    +repository
    +tag
    +image_name
    +result
    +container_data
    +result
    +image_data
    +services
    +image
    +command
    +command
    +environment
    +environment
    +ports
    +port_str
    +mcp_services
    +services
    +confidence: float
    +image
    +command
    +env_vars
    +ports
    +port_num
    +confidence: float
    +tags
    +command
    +env_vars
    +confidence: float
    +image
    +command
    +command
    +environment
    +environment
    +servers
    +port
    +server
    +servers
    +port
    +server
    +servers
    +port
    +server
    +ports
    +port_num
    +exposed_ports
    +port_num
    +service_config
    +ports
    +port_str
    +external_port
    +port_num
    +command
    +command
    +service_config
    +command
    +command
    +command
    +running_servers
    +confidence: float
    --
    -__init__(settings)
    +get_detection_method(): DetectionMethod
    +detect(target_host): DetectionResult
    -_is_docker_available(): bool
    -_get_docker_info()
    -_inspect_running_containers()
    -_inspect_available_images()
    -_find_compose_files()
    -_is_mcp_container(container_info): bool
    -_is_mcp_image(image_info): bool
    -_is_mcp_image_name(image_name): bool
    -_get_container_details(container_id)
    -_get_image_details(image_name)
    -_analyze_compose_file(filepath)
    -_has_mcp_services(compose_data): bool
    -_is_mcp_service(service_name, service_config): bool
    -_extract_mcp_services(compose_data)
    -_get_container_confidence(container_data): float
    -_get_image_confidence(image_data): float
    -_get_service_confidence(service_name, service_config): float
    -_analyze_containers(containers)
    -_analyze_images(images)
    -_analyze_compose_files(compose_files)
    -_extract_container_port(container)
    -_extract_image_port(image)
    -_extract_service_port(service)
    -_infer_transport_from_container(container): TransportType
    -_infer_transport_from_image(image): TransportType
    -_infer_transport_from_service(service): TransportType
    -_select_best_mcp_server(servers)
    -_calculate_confidence(server, detection_data): float
  }

}

package "src.hawkeye.detection.ai_threat" {
  class ComplianceStatus {
    +COMPLIANT: str
    +PARTIALLY_COMPLIANT: str
    +NON_COMPLIANT: str
    +NOT_APPLICABLE: str
    +UNKNOWN: str
  }

  class ControlCategory {
    +ACCESS_CONTROL: str
    +AUTHENTICATION: str
    +ENCRYPTION: str
    +MONITORING: str
    +INCIDENT_RESPONSE: str
    +RISK_MANAGEMENT: str
    +DATA_PROTECTION: str
    +NETWORK_SECURITY: str
    +SYSTEM_SECURITY: str
    +BUSINESS_CONTINUITY: str
  }

  class ComplianceControl {
    +id: str
    +framework: str
    +category: ControlCategory
    +title: str
    +description: str
    +requirements
    +evidence_requirements
    +testing_procedures
    +severity: str
    +applies_to_environment: bool
  }

  class ComplianceGap {
    +control_id: str
    +framework: str
    +gap_description: str
    +current_status: ComplianceStatus
    +required_status: ComplianceStatus
    +risk_level: str
    +remediation_recommendations
    +estimated_effort: str
    +business_impact: str
  }

  class ComplianceAssessment {
    +assessment_id: str
    +framework: str
    +assessment_date: datetime
    +overall_status: ComplianceStatus
    +compliance_percentage: float
    +total_controls: int
    +compliant_controls: int
    +non_compliant_controls: int
    +gaps
    +recommendations
    +executive_summary: str
  }

  class ComplianceMapper {
    +frameworks
    +mappings
    +mappings
    +assessments
    +assessment
    +framework_def
    +controls
    +applicable_controls
    +gaps
    +compliant_count: int
    +compliance_status
    +gap
    +total_controls
    +compliance_percentage
    +overall_status
    +overall_status
    +overall_status
    +recommendations
    +executive_summary
    +assessment
    +applicable_controls
    +addresses_identified_threats
    +threat_categories
    +category
    +category
    +control_category
    +category_mappings
    +mapped_categories
    +threat_name
    +threat_desc
    +indicator_lower
    +control_status
    +implementation_status
    +control_category
    +relevant_threats
    +relevant_threats
    +control_category
    +threat_category
    +relevant_threats
    +gap_description
    +risk_level: str
    +risk_level: str
    +risk_level: str
    +remediation_recommendations
    +gap
    +effort_map
    +recommendations
    +high_risk_gaps
    +framework_name
    +summary
    +mappings
    +framework_mappings
    +threat_categories
    +categories
    +category
    +category
    +roadmap
    +all_gaps
    +high_priority_gaps
    +medium_priority_gaps
    +low_priority_gaps
    +total_gaps
    --
    -__init__()
    -_initialize_compliance_frameworks()
    -_initialize_threat_mappings()
    -_initialize_environment_mappings()
    +generate_compliance_assessment(threat_analysis, environment_context, target_frameworks, current_controls)
    -_assess_framework_compliance(framework, threat_analysis, environment_context, current_controls)
    -_identify_applicable_controls(controls, environment_context, threat_analysis)
    -_control_addresses_threats(control, threat_analysis): bool
    -_categorize_threat_for_compliance(threat): str
    -_categorize_risk_indicator_for_compliance(indicator): str
    -_assess_control_compliance(control, threat_analysis, current_controls): ComplianceStatus
    -_find_relevant_threats(control, threat_analysis)
    -_create_compliance_gap(control, compliance_status, threat_analysis): ComplianceGap
    -_estimate_remediation_effort(control): str
    -_assess_business_impact(control, relevant_threats): str
    -_generate_compliance_recommendations(gaps, framework, environment_context)
    -_create_compliance_executive_summary(framework, overall_status, compliance_percentage, gap_count): str
    +map_threats_to_controls(threat_analysis, frameworks)
    -_extract_threat_categories(threat_analysis)
    +generate_compliance_roadmap(assessments, environment_context)
  }

  class VulnerabilityType {
    +CVE_KNOWN: str
    +CONFIGURATION_WEAKNESS: str
    +DESIGN_FLAW: str
    +IMPLEMENTATION_BUG: str
    +ZERO_DAY_POTENTIAL: str
    +MISCONFIGURATION: str
    +PRIVILEGE_ESCALATION: str
    +INJECTION: str
    +AUTHENTICATION_BYPASS: str
    +ACCESS_CONTROL: str
  }

  class CVESeverity {
    +NONE: str
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +CRITICAL: str
  }

  class ExploitabilityLevel {
    +THEORETICAL: str
    +PROOF_OF_CONCEPT: str
    +FUNCTIONAL: str
    +WEAPONIZED: str
    +WIDESPREAD: str
  }

  class ConfigurationRisk {
    +SAFE: str
    +WEAK: str
    +DANGEROUS: str
    +CRITICAL: str
  }

  class CVERecord {
    +cve_id: str
    +description: str
    +severity: CVESeverity
    +cvss_score: float
    +published_date: datetime
    +affected_products
    +attack_vector: str
    +attack_complexity: str
    +authentication_required: bool
    +exploit_available: bool
    +exploitability_level: ExploitabilityLevel
    +references
    +cwe_ids
  }

  class ConfigurationWeakness {
    +weakness_id: str
    +name: str
    +description: str
    +risk_level: ConfigurationRisk
    +affected_components
    +exploitation_methods
    +remediation_steps
    +detection_signatures
    +business_impact: str
    +likelihood: float
  }

  class ZeroDayPotential {
    +potential_id: str
    +attack_surface: str
    +vulnerability_class: str
    +complexity_score: float
    +discoverability_score: float
    +impact_score: float
    +overall_risk: float
    +exploitation_prerequisites
    +potential_attack_vectors
    +indicators_of_exploitation
    +mitigation_strategies
  }

  class VulnerabilityAssessment {
    +tool_name: str
    +assessment_id: str
    +cve_matches
    +configuration_weaknesses
    +zero_day_potentials
    +overall_vulnerability_score: float
    +highest_severity: CVESeverity
    +exploitable_vulnerabilities: int
    +critical_issues
    +recommended_actions
    +assessment_timestamp: datetime
    +confidence_score: float
  }

  class VulnerabilityMapper {
    +assessment_id
    +cve_matches
    +config_weaknesses
    +zero_day_potentials
    +vulnerability_score
    +highest_severity
    +exploitable_count
    +critical_issues
    +recommendations
    +confidence
    +assessment
    +cve_matches
    +tool_signatures
    +matches
    +capability_cves
    +unique_cves
    +weaknesses
    +category_weaknesses
    +env_weaknesses
    +access_weaknesses
    +potentials
    +attack_surfaces
    +potential
    +input_potentials
    +memory_potentials
    +logic_potentials
    +timestamp
    +tool_hash
    +signatures
    +matches
    +cve_record
    +capability_cve_mapping
    +matches
    +category
    +category_matches
    +cves
    +cve_record
    +seen_cves
    +unique_cves
    +weaknesses
    +capability_weakness_mapping
    +weakness
    +weaknesses
    +weakness
    +weakness
    +weaknesses
    +weakness
    +weaknesses
    +weakness
    +weaknesses
    +weakness
    +weaknesses
    +weakness
    +weaknesses
    +weakness
    +weaknesses
    +weakness
    +surfaces
    +capability_surface_mapping
    +analyzer
    +potential_id
    +complexity
    +discoverability
    +impact
    +overall_risk
    +attack_vectors
    +mitigations
    +potentials
    +has_input_processing
    +potential
    +potentials
    +has_memory_operations
    +potential
    +potentials
    +has_complex_logic
    +potential
    +score: float
    +avg_cvss
    +risk_scores
    +avg_config_score
    +avg_zd_score
    +highest
    +highest
    +config_severity_mapping
    +mapped_severity
    +highest: mapped_severity
    +critical_issues
    +critical_cves
    +critical_configs
    +high_risk_zd
    +recommendations
    +general_recs
    +unique_recommendations
    +base_confidence: float
    +base_complexity: float
    +surface_complexity
    +base_complexity
    +base_discoverability: float
    +base_discoverability: float
    +base_discoverability: float
    +base_impact: float
    +sensitivity_impact
    +base_impact
    +mitigation_mapping
    --
    -__init__()
    +map_vulnerabilities(tool_capabilities, environment_context): VulnerabilityAssessment
    -_match_cves(tool_capabilities)
    -_detect_configuration_weaknesses(tool_capabilities, environment_context)
    -_assess_zero_day_potential(tool_capabilities, environment_context)
    -_initialize_cve_database()
    -_initialize_weakness_patterns()
    -_initialize_zero_day_indicators()
    -_initialize_attack_surface_analyzers()
    -_generate_assessment_id(tool_name): str
    -_extract_tool_signatures(tool_capabilities)
    -_search_cve_database(signature)
    -_match_cves_by_capability(tool_capabilities)
    -_get_cves_for_category(category)
    -_deduplicate_cves(cve_list)
    -_analyze_capability_weaknesses(capability, tool_capabilities, environment_context)
    -_create_file_system_weaknesses(tool_capabilities, environment_context)
    -_create_network_weaknesses(tool_capabilities, environment_context)
    -_create_execution_weaknesses(tool_capabilities, environment_context)
    -_create_auth_weaknesses(tool_capabilities, environment_context)
    -_create_database_weaknesses(tool_capabilities, environment_context)
    -_detect_environment_weaknesses(tool_capabilities, environment_context)
    -_detect_access_control_weaknesses(tool_capabilities, environment_context)
    -_identify_attack_surfaces(tool_capabilities)
    -_analyze_attack_surface_for_zero_days(surface, tool_capabilities, environment_context)
    -_assess_input_validation_weaknesses(tool_capabilities)
    -_assess_memory_safety_issues(tool_capabilities)
    -_assess_logic_flaws(tool_capabilities)
    -_calculate_vulnerability_score(cve_matches, config_weaknesses, zero_day_potentials): float
    -_determine_highest_severity(cve_matches, config_weaknesses): CVESeverity
    -_count_exploitable_vulnerabilities(cve_matches): int
    -_identify_critical_issues(cve_matches, config_weaknesses, zero_day_potentials)
    -_generate_recommendations(cve_matches, config_weaknesses, zero_day_potentials)
    -_calculate_confidence_score(tool_capabilities, cve_matches, config_weaknesses): float
    -_calculate_zero_day_complexity(surface, tool_capabilities): float
    -_calculate_zero_day_discoverability(surface, tool_capabilities): float
    -_calculate_zero_day_impact(surface, environment_context): float
    -_generate_zero_day_mitigations(surface)
  }

  class ThreatPattern {
    +pattern_id: str
    +pattern_name: str
    +capability_signature: str
    +threat_indicators
    +common_attack_vectors
    +environment_factors
    +confidence_score: float
    +occurrence_count: int
    +last_seen: datetime
    +avg_threat_level: float
    +pattern_effectiveness: float
  }

  class SimilarityMatch {
    +target_tool_id: str
    +similar_tool_id: str
    +similarity_score: float
    +matching_capabilities
    +matching_categories
    +confidence_level: float
    +analysis_reusability: float
  }

  class LearningMetrics {
    +total_analyses_stored: int
    +patterns_discovered: int
    +similarity_matches_found: int
    +cache_hit_rate: float
    +pattern_accuracy_rate: float
    +learning_effectiveness: float
    +database_size_mb: float
    +last_learning_cycle: datetime
  }

  class ThreatIntelligenceDB {
    +tool_signature
    +threshold
    +tool_signature
    +similar_matches
    +best_match
    +similar_analysis
    +threshold
    +tool_signature
    +cached_matches
    +similar_matches
    +similarity_score
    +match
    +capability_groups
    +cap_signature
    +new_patterns
    +pattern
    +cap_signature
    +matching_patterns
    +similar_result
    +base_cost: float
    +adjustment_cost
    +total_cost
    +patterns
    +pattern_confidence
    +estimated_cost
    +total_queries
    +cache_hits
    +cutoff_date
    +cleanup_count
    +conn
    +cursor
    +conn
    +cursor
    +analysis_data
    +pattern_data
    +signature_data
    +signature_str
    +capabilities
    +caps1
    +caps2
    +intersection
    +union
    +category_similarity
    +funcs1
    +funcs2
    +func_intersection
    +func_union
    +function_similarity
    +similarity
    +caps1
    +caps2
    +similarity
    +hours_since_last
    +all_attack_vectors
    +threat_levels
    +environment_factors
    +vector_counts
    +common_vectors
    +threat_values
    +avg_threat_level
    +pattern_id
    +pattern
    +mapping
    +conn
    +cursor
    +analysis_json
    +metadata_json
    +capability_signature
    +conn
    +cursor
    +pattern_json
    +conn
    +cursor
    +feedback_json
    +conn
    +cursor
    +analyses_cleaned
    +feedback_cleaned
    --
    -__init__(db_path, enable_learning)
    +store_threat_analysis(tool_capabilities, threat_analysis, analysis_metadata): bool
    +retrieve_similar_analysis(tool_capabilities, similarity_threshold)
    +find_similar_tools(tool_capabilities, similarity_threshold)
    +discover_threat_patterns()
    +get_pattern_recommendations(tool_capabilities)
    +estimate_analysis_cost(tool_capabilities, analysis_type)
    +update_analysis_feedback(tool_signature, feedback): bool
    +get_learning_metrics(): LearningMetrics
    +cleanup_old_data(retention_days): int
    -_initialize_database()
    -_load_caches()
    -_generate_tool_signature(tool_capabilities): str
    -_generate_capability_signature(tool_capabilities): str
    -_calculate_tool_similarity(tool1, tool2): float
    -_find_matching_capabilities(tool1, tool2)
    -_find_matching_categories(tool1, tool2)
    -_calculate_reusability_score(tool1, tool2): float
    -_trigger_incremental_learning(tool_capabilities, threat_analysis)
    -_extract_threat_pattern(capability_signature, analyses)
    -_threat_level_to_numeric(threat_level): float
    -_pattern_matches_capabilities(pattern, capability_signature): bool
    -_store_analysis_db(tool_signature, tool_capabilities, threat_analysis, metadata)
    -_store_patterns_db(patterns)
    -_store_feedback_db(tool_signature, feedback)
    -_update_pattern_effectiveness(tool_signature, accuracy_rating)
    -_cleanup_old_data_db(cutoff_date): int
    -_cleanup_memory_caches(cutoff_date)
  }

  class ImpactCategory {
    +FINANCIAL: str
    +OPERATIONAL: str
    +REPUTATIONAL: str
    +COMPLIANCE: str
    +STRATEGIC: str
  }

  class ImpactSeverity {
    +NEGLIGIBLE: str
    +MINOR: str
    +MODERATE: str
    +MAJOR: str
    +CATASTROPHIC: str
  }

  class RecoveryPhase {
    +DETECTION: str
    +CONTAINMENT: str
    +ERADICATION: str
    +RECOVERY: str
    +LESSONS_LEARNED: str
  }

  class CostCategory {
    +IMMEDIATE_RESPONSE: str
    +INVESTIGATION: str
    +REMEDIATION: str
    +BUSINESS_DISRUPTION: str
    +LEGAL_REGULATORY: str
    +REPUTATION_RECOVERY: str
    +PREVENTIVE_MEASURES: str
    +INSURANCE_DEDUCTIBLE: str
  }

  class OrganizationSize {
    +STARTUP: str
    +SMALL_BUSINESS: str
    +MEDIUM_ENTERPRISE: str
    +LARGE_ENTERPRISE: str
    +FORTUNE_500: str
  }

  class IndustryVertical {
    +FINANCIAL_SERVICES: str
    +HEALTHCARE: str
    +GOVERNMENT: str
    +TECHNOLOGY: str
    +MANUFACTURING: str
    +RETAIL: str
    +EDUCATION: str
    +ENERGY: str
    +TELECOMMUNICATIONS: str
    +OTHER: str
  }

  class FinancialImpact {
    +direct_costs: float
    +indirect_costs: float
    +revenue_loss: float
    +regulatory_fines: float
    +legal_costs: float
    +insurance_costs: float
    +recovery_costs: float
    +total_estimated_cost: float
    +cost_confidence: float
    +currency: str
    +cost_breakdown
  }

  class OperationalImpact {
    +service_downtime_hours: float
    +affected_systems
    +affected_processes
    +productivity_loss_percentage: float
    +customer_impact_level: ImpactSeverity
    +recovery_time_estimate: float
    +business_continuity_risk: ImpactSeverity
    +operational_disruption_score: float
  }

  class ReputationImpact {
    +public_disclosure_likelihood: float
    +media_attention_level: ImpactSeverity
    +customer_trust_impact: ImpactSeverity
    +partner_confidence_impact: ImpactSeverity
    +brand_damage_duration: str
    +social_media_sentiment_impact: float
    +market_perception_change: float
    +reputation_recovery_months: int
  }

  class ComplianceImpact {
    +affected_frameworks
    +violation_risk: ThreatLevel
    +required_controls
  }

  class CascadingEffect {
    +effect_id: str
    +source_system: str
    +target_system: str
    +effect_type: str
    +propagation_delay: float
    +impact_magnitude: float
    +probability: float
    +mitigation_difficulty: DifficultyLevel
    +description: str
    +prerequisites
    +indicators
  }

  class RecoveryCost {
    +phase: RecoveryPhase
    +estimated_hours: float
    +personnel_costs: float
    +technology_costs: float
    +external_service_costs: float
    +opportunity_costs: float
    +total_phase_cost: float
    +confidence_level: float
    +cost_drivers
  }

  class BusinessImpactAssessment {
    +tool_name: str
    +assessment_id: str
    +organization_context
    +financial_impact: FinancialImpact
    +operational_impact: OperationalImpact
    +reputation_impact: ReputationImpact
    +compliance_impact: ComplianceImpact
    +cascading_effects
    +recovery_costs
    +overall_impact_score: float
    +impact_timeframe: str
    +business_criticality: ImpactSeverity
    +recommended_insurance_coverage: float
    +assessment_timestamp: datetime
    +confidence_score: float
  }

  class ImpactCalculator {
    +assessment_id
    +financial_impact
    +operational_impact
    +reputation_impact
    +compliance_impact
    +cascading_effects
    +recovery_costs
    +overall_score
    +criticality
    +insurance_coverage
    +confidence
    +assessment
    +size_multipliers
    +base_multiplier
    +industry_multiplier
    +direct_costs
    +indirect_costs
    +revenue_loss
    +regulatory_fines
    +legal_costs
    +recovery_costs
    +total_cost
    +cost_breakdown
    +base_downtime
    +exposure_multiplier
    +service_downtime
    +affected_systems
    +affected_processes
    +productivity_loss
    +customer_impact
    +recovery_time
    +continuity_risk
    +disruption_score
    +disclosure_likelihood
    +media_attention
    +customer_trust_impact
    +partner_impact
    +damage_duration
    +sentiment_impact
    +market_perception
    +recovery_months
    +affected_regulations
    +violation_likelihood
    +potential_fines
    +audit_requirements
    +reporting_obligations
    +certification_risks
    +remediation_requirements
    +cascading_effects
    +effects
    +env_effects
    +recovery_costs
    +size_rates
    +hourly_rate
    +phase_cost
    +timestamp
    +base_cost
    +complexity_multiplier
    +risk_multiplier
    +base_cost
    +sensitivity_multiplier
    +base_downtime
    +hourly_revenue_loss
    +fines: float
    +estimated_revenue
    +base_legal_cost: int
    +sensitivity_multiplier
    +base_hours
    +complexity_factor
    +risk_factor
    +affected_systems
    +capability_system_mapping
    +processes
    +base_rate
    +size_multipliers
    +base_recovery
    +size_multipliers
    +risk_score: int
    +high_risk_caps
    +downtime_score
    +productivity_score: productivity_loss
    +systems_score
    +financial_score
    +operational_score
    +reputation_score
    +compliance_score
    +base_criticality
    +base_criticality
    +base_criticality
    +base_criticality
    +base_criticality
    +high_impact_cascades
    +criticality_levels
    +current_index
    +base_confidence: float
    +base_confidence
    +effects
    +capability_key
    +effect
    +effects
    +effect
    +phase_key
    +cost_model
    +base_hours
    +personnel_costs
    +technology_costs
    +external_costs
    +opportunity_costs
    +total_cost
    +cost_drivers
    --
    -__init__()
    +calculate_business_impact(tool_capabilities, environment_context, organization_size, industry): BusinessImpactAssessment
    -_calculate_financial_impact(tool_capabilities, environment_context, organization_size, industry): FinancialImpact
    -_calculate_operational_impact(tool_capabilities, environment_context, organization_size): OperationalImpact
    -_calculate_reputation_impact(tool_capabilities, environment_context, industry): ReputationImpact
    -_calculate_compliance_impact(tool_capabilities, environment_context, industry): ComplianceImpact
    -_analyze_cascading_effects(tool_capabilities, environment_context)
    -_calculate_recovery_costs(tool_capabilities, financial_impact, operational_impact, organization_size)
    -_initialize_impact_models()
    -_initialize_cost_models()
    -_initialize_cascading_patterns()
    -_initialize_industry_multipliers()
    -_generate_assessment_id(tool_name): str
    -_calculate_direct_costs(tool_capabilities, base_multiplier, industry_multiplier): float
    -_calculate_indirect_costs(tool_capabilities, environment_context, base_multiplier): float
    -_calculate_revenue_loss(tool_capabilities, environment_context, base_multiplier, industry_multiplier): float
    -_calculate_regulatory_fines(environment_context, industry, base_multiplier): float
    -_calculate_legal_costs(environment_context, base_multiplier, industry_multiplier): float
    -_estimate_base_downtime(tool_capabilities): float
    -_identify_affected_systems(tool_capabilities)
    -_identify_affected_processes(tool_capabilities, environment_context)
    -_calculate_productivity_loss(tool_capabilities, downtime_hours, organization_size): float
    -_assess_customer_impact(tool_capabilities, environment_context): ImpactSeverity
    -_estimate_recovery_time(tool_capabilities, downtime_hours, organization_size): float
    -_assess_business_continuity_risk(tool_capabilities, environment_context): ImpactSeverity
    -_calculate_operational_disruption_score(downtime_hours, productivity_loss, affected_systems_count): float
    -_calculate_overall_impact_score(financial_impact, operational_impact, reputation_impact, compliance_impact): float
    -_determine_business_criticality(overall_score, cascading_effects): ImpactSeverity
    -_calculate_insurance_recommendation(financial_impact): float
    -_calculate_confidence_score(tool_capabilities, financial_impact, operational_impact): float
    -_get_cascading_effects_for_capability(capability, tool_capabilities, environment_context)
    -_get_environment_cascading_effects(tool_capabilities, environment_context)
    -_calculate_phase_recovery_cost(phase, tool_capabilities, financial_impact, operational_impact, hourly_rate): RecoveryCost
  }

  class AttackChainAnalyzer {
    +start_time
    +tool_capabilities
    +capability_graph
    +attack_paths
    +attack_chains
    +chain
    +feasibility
    +attack_chains
    +analysis_time
    +start_time
    +tool_capabilities
    +capability_graph
    +advanced_paths
    +multi_objective_paths
    +time_based_paths
    +conditional_paths
    +actor_paths
    +attack_chains
    +chain
    +feasibility
    +attack_chains
    +analysis_time
    +technical_feasibility
    +access_feasibility
    +detection_avoidance
    +environmental_suitability
    +resource_requirements
    +weights
    +overall_score
    +rationale
    +confidence_level
    +lateral_movement_categories
    +all_chains
    +lateral_chains
    +exfiltration_categories
    +all_chains
    +exfiltration_chains
    +nodes
    +edges
    +node
    +edge
    +stats
    +capabilities
    +tool_name
    +tool_functions
    +capability_categories
    +categories
    +name_lower
    +categories
    +graph
    +tools
    +tool1_categories
    +tool2_categories
    +chain_relationships
    +paths
    +filtered_paths
    +filtered_paths
    +chain_links
    +total_time: int
    +overall_difficulty
    +tool_caps
    +link
    +chain_id
    +threat_actor
    +attack_chain
    +categories
    +categories
    +artifacts
    +categories
    +categories
    +categories
    +path_str
    +actions
    +has_file_access
    +has_network
    +has_data_processing
    +difficulties
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +strategies
    +has_code_exec
    +has_file_access
    +difficulty_score
    +length_score
    +feasibility_score
    +chain_categories
    +categories
    +chain_categories
    +categories
    +chain_coherence: float
    +tool_availability: float
    +complexity_penalty
    +max_access_required
    +security_modifier
    +base_feasibility
    +length_factor
    +monitoring_factor
    +deployment_suitability
    +complexity_factor
    +time_factor
    +scores
    +factors
    +strongest
    +weakest
    +start_time
    +dependency_graph
    +pivot_points
    +chain_candidates
    +feasible_chains
    +feasibility_score
    +chain_narratives
    +narrative
    +overall_risk_assessment
    +discovery_results
    +nodes
    +edges
    +tool_id
    +capabilities
    +node_id
    +dependency_strength
    +connected_components
    +pivot_points
    +nodes
    +edges
    +incoming_edges
    +outgoing_edges
    +degree_centrality
    +betweenness_score
    +access_score
    +diversity_score
    +pivot_value
    +pivot_point
    +chain_candidates
    +nodes
    +edges
    +start_node
    +paths
    +chain_candidate
    +unique_candidates
    +technical_score
    +technical_score
    +resource_score
    +resource_score
    +environment_score
    +stealth_score
    +success_probability
    +feasibility_score
    +narrative
    +step_detail
    +high_risk_chains
    +medium_risk_chains
    +average_feasibility
    +max_chain_length
    +unique_tools_involved
    +risk_level: str
    +confidence: float
    +risk_level: str
    +confidence: float
    +risk_level: str
    +confidence: float
    +risk_level: str
    +confidence: float
    +risk_factors
    +recommendations
    +capabilities
    +tool_name
    +strength: float
    +source_outputs
    +target_prerequisites
    +matches
    +source_access
    +target_access
    +source_type
    +target_type
    +source_type
    +target_type
    +type_transitions
    +difficulty: float
    +source_access
    +target_access
    +access_levels
    +source_level
    +target_level
    +source_risk
    +target_risk
    +visited
    +components
    +component
    +nodes
    +edges
    +betweenness
    +shortest_paths
    +max_betweenness
    +nodes
    +edges
    +queue
    +all_paths
    +scores
    +nodes
    +edges
    +connected_capabilities
    +diversity: float
    +cap_node
    +max_diversity
    +strategic_value: float
    +high_risk_connected: bool
    +target_node
    +high_risk_connected: bool
    +critical_transitions: int
    +strategic_value: float
    +access_score
    +risk_level
    +difficulty
    +all_paths
    +new_paths
    +new_paths
    +complexity
    +unique_capabilities
    +penalty: float
    +current_node
    +next_node
    +risk_sum: float
    +node_data
    +seen_chains
    +unique_candidates
    +chain_id
    +rationale
    +strategic_value: float
    +high_risk_connected: bool
    +target_node
    +high_risk_connected: bool
    +critical_transitions: int
    +strategic_value: float
    +access_score
    +risk_level
    +difficulty
    +nodes
    +current_node
    +next_node
    +current_cap
    +next_cap
    +transition_type: str
    +transition_type
    +nodes
    +node_data
    +nodes
    +current_node
    +current_cap
    +nodes
    +tools
    +nodes
    +outputs
    +nodes
    +detection_risk: float
    +nodes
    +mitigations
    +nodes
    +iocs
    +nodes
    +opportunities
    +recommendations
    +access_levels
    +stealth_score: float
    +actions
    +has_file_access
    +has_network
    +has_data_processing
    +difficulties
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
    +strategies
    +has_code_exec
    +has_file_access
    +difficulty_score
    +length_score
    +feasibility_score
    +chain_categories
    +categories
    +chain_categories
    +categories
    +chain_coherence: float
    +tool_availability: float
    +complexity_penalty
    +max_access_required
    +security_modifier
    +base_feasibility
    +length_factor
    +monitoring_factor
    +deployment_suitability
    +complexity_factor
    +time_factor
    +scores
    +factors
    +strongest
    +weakest
    --
    -__init__()
    +identify_attack_chains(detected_tools, environment_context, max_chain_length, min_feasibility_score)
    +identify_advanced_attack_chains(detected_tools, environment_context, threat_actor_types, include_time_based_chains, include_conditional_chains)
    +assess_chain_feasibility(attack_chain, environment): ChainFeasibilityScore
    +find_lateral_movement_chains(detected_tools, environment_context)
    +find_data_exfiltration_chains(detected_tools, environment_context)
    +get_chain_visualization_data(attack_chain)
    +get_analysis_stats()
    -_extract_tool_capabilities(detected_tools)
    -_categorize_tool_function(function_name)
    -_build_capability_graph(tool_capabilities)
    -_can_tools_chain(tool1, tool2): bool
    -_find_attack_paths(capability_graph, max_length, environment_context)
    -_dfs_find_paths(graph, current, path, all_paths, max_length)
    -_filter_paths_by_environment(paths, environment_context)
    -_is_path_suitable_for_environment(path, environment_context): bool
    -_path_to_attack_chain(path, tool_capabilities, environment_context)
    -_generate_attack_action(tool_caps, is_first): str
    -_generate_prerequisites(tool_caps, is_first)
    -_generate_output_artifacts(tool_caps)
    -_determine_required_access(tool_caps): AccessLevel
    -_assess_link_difficulty(tool_caps): DifficultyLevel
    -_estimate_execution_time(tool_caps): int
    -_generate_chain_id(path): str
    -_generate_chain_name(path): str
    -_generate_chain_description(chain_links): str
    -_determine_threat_actor(chain_links, environment): ThreatActorType
    -_determine_attack_objective(chain_links): str
    -_assess_overall_difficulty(chain_links): DifficultyLevel
    -_assess_business_impact(chain_links, environment): BusinessImpact
    -_assess_detection_difficulty(chain_links): DifficultyLevel
    -_generate_mitigation_strategies(chain_links)
    -_generate_chain_prerequisites(chain_links)
    -_rank_attack_chains(attack_chains, environment)
    +chain_risk_score()
    -_is_lateral_movement_chain(chain, lateral_categories): bool
    -_is_data_exfiltration_chain(chain, exfiltration_categories): bool
    -_assess_technical_feasibility(attack_chain): float
    -_assess_access_feasibility(attack_chain, environment): float
    -_assess_detection_avoidance(attack_chain, environment): float
    -_assess_environmental_suitability(attack_chain, environment): float
    -_assess_resource_requirements(attack_chain, environment): float
    -_access_level_score(access_level): float
    -_generate_feasibility_rationale(technical, access, detection, environmental, resources): str
    -_build_capability_relationships()
    -_load_attack_patterns()
    +discover_attack_chains(detected_tools, environment_context, max_chain_depth, min_chain_score)
    -_build_capability_dependency_graph(detected_tools)
    -_identify_pivot_points(dependency_graph, detected_tools)
    -_generate_chain_candidates(dependency_graph, pivot_points, max_depth)
    -_calculate_chain_feasibility_score(chain_candidate, environment_context): float
    -_generate_attack_progression_narrative(chain, environment_context)
    -_assess_overall_chain_risk(chain_narratives, environment_context)
    -_extract_tool_capabilities_for_graph(tool)
    -_calculate_dependency_strength(source_node, target_node): float
    -_classify_dependency_type(source_node, target_node): str
    -_assess_transition_difficulty(source_node, target_node): float
    -_find_connected_components(nodes, edges)
    -_dfs_find_connected_components(node_id, nodes, edges, visited, component)
    -_calculate_betweenness_centrality(node_id, graph): float
    -_find_all_shortest_paths(start, end, graph)
    -_score_access_requirements(access_requirements): float
    -_calculate_capability_diversity_score(node_id, graph): float
    -_assess_strategic_value(node_data, incoming_edges, outgoing_edges): float
    -_assess_pivot_exploitation_difficulty(node_data): float
    -_find_attack_paths_dfs(current_node, graph, max_depth, visited, current_path)
    -_calculate_chain_complexity(path, graph): float
    -_calculate_cumulative_risk(path, nodes): float
    -_deduplicate_chain_candidates(candidates)
    -_generate_pivot_rationale(node_data, pivot_value): str
    -_assess_strategic_value(node_data, incoming_edges, outgoing_edges): float
    -_assess_pivot_exploitation_difficulty(node_data): float
    -_generate_step_description(step_index, chain, environment_context): str
    -_describe_capability(node_id): str
    -_determine_step_access_requirements(step_index, chain)
    -_identify_step_tools(step_index, chain)
    -_predict_step_outputs(step_index, chain)
    -_assess_step_detection_risk(step_index, chain, environment_context): float
    -_identify_step_mitigations(step_index, chain)
    -_generate_chain_iocs(chain)
    -_identify_defensive_opportunities(chain)
    -_generate_risk_recommendations(chain_narratives, risk_level, environment_context)
    -_prioritize_defensive_actions(chain_narratives)
    -_assess_enhanced_chain_feasibility(chain, environment): ChainFeasibilityScore
    -_optimize_attack_chains(attack_chains, environment)
    -_outputs_match_prerequisites(output, prerequisite): bool
    -_access_progression_valid(source_access, target_access): bool
    -_types_have_synergy(source_type, target_type): bool
    -_assess_chain_stealth(chain, environment): float
    -_estimate_chain_success_probability(chain): float
    -_describe_attack_step(node_data, index): str
    -_generate_chain_description(chain_links): str
    -_determine_threat_actor(chain_links, environment): ThreatActorType
    -_determine_attack_objective(chain_links): str
    -_assess_overall_difficulty(chain_links): DifficultyLevel
    -_assess_business_impact(chain_links, environment): BusinessImpact
    -_assess_detection_difficulty(chain_links): DifficultyLevel
    -_generate_mitigation_strategies(chain_links)
    -_generate_chain_prerequisites(chain_links)
    -_rank_attack_chains(attack_chains, environment)
    +chain_risk_score()
    -_is_lateral_movement_chain(chain, lateral_categories): bool
    -_is_data_exfiltration_chain(chain, exfiltration_categories): bool
    -_assess_technical_feasibility(attack_chain): float
    -_assess_access_feasibility(attack_chain, environment): float
    -_assess_detection_avoidance(attack_chain, environment): float
    -_assess_environmental_suitability(attack_chain, environment): float
    -_assess_resource_requirements(attack_chain, environment): float
    -_access_level_score(access_level): float
    -_generate_feasibility_rationale(technical, access, detection, environmental, resources): str
    -_build_capability_relationships()
    -_load_attack_patterns()
  }

  class MitigationCategory {
    +PREVENTIVE: str
    +DETECTIVE: str
    +RESPONSIVE: str
    +RECOVERY: str
  }

  class ImplementationDifficulty {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +VERY_HIGH: str
  }

  class MitigationEffectiveness {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +CRITICAL: str
  }

  class MitigationStrategy {
    +name: str
    +description: str
    +implementation_steps
    +effectiveness_score: float
    +complexity: DifficultyLevel
    +cost_estimate: str
  }

  class MitigationGenerator {
    +strategies
    +identified_threats
    +category_strategies
    +strategies
    +strategies
    +strategies
    +threats
    +category
    +category
    +category
    +threat_name
    +threat_desc
    +indicator_lower
    +vuln_type
    +vuln_desc
    +strategies
    +category_templates
    +strategy
    +strategy_id
    +threats_addressed
    +cost_estimate
    +time_estimate
    +compliance_frameworks
    +success_metrics
    +business_justification
    +dependencies
    +maintenance_requirements
    +strategy
    +base_cost_map
    +base_cost
    +cost_adjustments
    +base_cost
    +time_map
    +base_time
    +time_adjustments
    +base_time
    +frameworks
    +category_mapping
    +relevant_controls
    +framework_name
    +framework_controls
    +base_metrics
    +category_metrics
    +risk_reduction
    +threat_count
    +base_justification
    +effectiveness
    +dependencies
    +tech_requirements
    +difficulty
    +base_requirements
    +budget_filters
    +allowed_difficulties
    +effectiveness_scores
    +score
    +difficulty_adjustments
    +roadmap
    +phase_1_strategies
    +phase_2_strategies
    +phase_3_strategies
    +total_risk_reduction
    --
    -__init__()
    +generate_mitigation_strategies(threat_analysis, environment_context, compliance_requirements, budget_constraint)
    -_extract_threats_from_analysis(threat_analysis)
    -_categorize_threat(threat): str
    -_categorize_risk_indicator(indicator): str
    -_categorize_vulnerability(vulnerability): str
    -_generate_strategies_for_category(threat_category, threat_details, environment_context, compliance_requirements)
    -_create_strategy_from_template(template, threat_category, threat_details, mitigation_type, environment_context, compliance_requirements)
    -_estimate_implementation_cost(template, environment_context): str
    -_estimate_implementation_time(template, environment_context): str
    -_map_to_compliance_frameworks(threat_category, compliance_requirements)
    -_generate_success_metrics(template, threat_category)
    -_create_business_justification(template, threat_details, environment_context): str
    -_identify_dependencies(template, environment_context)
    -_generate_maintenance_requirements(template)
    -_filter_by_budget(strategies, budget_constraint)
    -_prioritize_strategies(strategies, environment_context)
    +priority_score()
    -_add_implementation_guidance(strategies, environment_context)
    +generate_implementation_roadmap(strategies, environment_context)
  }

  class ThreatIntelligenceCache {
    -__init__(ttl)
    +get(key)
    +set(key, analysis)
    +clear()
    +get_stats()
  }

  class ResponseTimeMonitor {
    +slow_op
    +overall_stats
    +by_operation
    +avg_time
    +p95_time
    +slow_ops_ratio
    +health: str
    +health: str
    +health: str
    +health: str
    +sorted_data
    +index
    +index
    --
    -__init__(window_size)
    +record_operation(operation_name, duration, metadata)
    +get_statistics()
    -_percentile(data, percentile): float
    +get_slow_operations(limit)
    +clear_statistics()
    +adjust_thresholds(warning_threshold, alert_threshold)
  }

  class AIThreatAnalyzer {
    +optimization_level
    +tool_name
    +analysis_start
    +memory_info
    +cleanup_stats
    +tool_capabilities
    +environment_context
    +cache_key
    +cached_analysis
    +analysis_duration
    +analysis
    +analysis
    +analysis_duration
    +analysis_duration
    +tool_capabilities
    +prompt_data
    +request
    +tools_capabilities
    +capabilities
    +prompt_data
    +primary_capabilities
    +request
    +analyses
    +environment_context
    +analysis
    +server_name
    +analysis
    +tool_name
    +stats
    +times
    +start_time
    +optimizer
    +environment_context
    +prioritized_servers
    +all_analyses
    +optimization_metrics
    +total_processed: int
    +current_batch_size: min_batch_size
    +batch_num: int
    +i: int
    +current_batch_size
    +batch_end
    +batch_servers
    +selected_provider: NoneType
    +selected_provider
    +batch_result
    +i: batch_end
    +total_time
    +statistics
    +metadata_size
    +batch_start
    +memory_start
    +analyses
    +successful_count: int
    +analysis
    +batch_time
    +memory_end
    +memory_used
    +optimization_metrics
    +process
    +providers
    +total_tools
    +successful_count
    +error_count: int
    +avg_batch_size
    +avg_memory_efficiency
    +provider_usage
    +provider
    +avg_batch_size: float
    +avg_memory_efficiency: float
    +provider_usage
    +base_stats
    +provider_name
    +config
    +fallback_name
    +fallback_name
    +config
    +ai_settings
    +config
    +request
    +estimated_cost
    +prompt_data
    +response
    +response
    +tool_name
    +attack_vectors
    +abuse_scenarios
    +mitigation_strategies
    +detection_indicators
    +threat_level
    +attack_vectors
    +capability_categories
    +tools_available
    +scenarios
    +capability_categories
    +tools_available
    +has_network_access
    +has_file_access
    +has_execution_capability
    +strategies
    +capability_categories
    +tools_available
    +indicators
    +capability_categories
    +tools_available
    +capability_categories
    +tools_available
    +threat_score: int
    +high_risk_capabilities
    +medium_risk_capabilities
    +base_risk
    +tool_name
    +tool_capabilities
    +environment_context
    +key_components
    +key_string
    +analysis
    +event
    +analysis
    +results
    +cache_cleared
    +cleanup_stats
    +total_stats
    +memory_status
    +response_stats
    +memory_health
    +response_health
    +overall_health: str
    +overall_health: str
    +overall_health: str
    +overall_health: str
    +current_usage
    +memory_pressure
    +memory_warnings
    +memory_cleanups
    +recommendations
    +current_usage
    +memory_pressure
    +response_health
    +overall_stats
    +slow_ops_ratio
    +cache_stats
    +cache_size
    --
    -__init__(config)
    +analyze_threats(mcp_server, environment_context, analysis_type, force_refresh): ThreatAnalysis
    +analyze_context_aware_threats(mcp_server, environment_context, similar_tools): ThreatAnalysis
    +analyze_attack_chains(mcp_servers, environment_context): ThreatAnalysis
    +analyze_multiple_threats(mcp_servers, environment_context, analysis_type)
    +assess_risk_level(mcp_server)
    +get_analysis_stats()
    +analyze_threats_batch_optimized(mcp_servers, adaptive_sizing, target_batch_time, min_batch_size, max_batch_size, enable_load_balancing, memory_limit_mb, priority_strategy, environment_context, analysis_type, progress_callback)
    -_prioritize_servers_for_optimization(mcp_servers, strategy)
    +get_priority_score(): float
    -_process_optimized_batch(batch_servers, environment_context, analysis_type, selected_provider, batch_size, memory_limit_mb)
    -_get_memory_usage_mb(): float
    -_get_provider_names()
    -_create_empty_optimized_batch_stats()
    -_calculate_optimized_batch_stats(all_analyses, optimization_metrics, total_time)
    +clear_cache()
    -_initialize_ai_provider(): AIProvider
    -_initialize_fallback_provider()
    -_build_provider_config()
    -_perform_enhanced_ai_analysis(tool_capabilities, environment_context, analysis_type): ThreatAnalysis
    -_build_analysis_prompt(tool_capabilities, environment_context, analysis_type)
    -_execute_ai_analysis_request(request): ThreatAnalysis
    -_create_rule_based_analysis(tool_capabilities, environment_context): ThreatAnalysis
    -_generate_enhanced_attack_vectors(tool_name, tool_capabilities)
    -_generate_enhanced_abuse_scenarios(tool_name, tool_capabilities)
    -_generate_enhanced_mitigations(tool_name, tool_capabilities)
    -_generate_enhanced_detection_indicators(tool_name, tool_capabilities)
    -_calculate_enhanced_threat_level(tool_name, tool_capabilities): ThreatLevel
    -_post_process_analysis(analysis, tool_capabilities): ThreatAnalysis
    -_create_fallback_analysis(mcp_server, tool_capabilities, environment_context, analysis_type): ThreatAnalysis
    -_generate_cache_key(tool_capabilities, environment_context, analysis_type): str
    +analyze_threats_streaming(mcp_servers, environment_context, analysis_type, progress_callback)
    +analyze_single_tool_streaming(mcp_server, environment_context, analysis_type, progress_callback)
    +analyze_threats_batch_streaming(mcp_servers, batch_size, environment_context, delay_between_batches, progress_callback)
    +get_memory_status()
    +get_response_time_statistics()
    +force_memory_cleanup()
    +adjust_memory_thresholds(warning_mb, cleanup_mb, max_memory_mb)
    +adjust_response_time_thresholds(warning_seconds, alert_seconds)
    +get_performance_health_report()
    -_assess_memory_health(memory_status): str
    -_generate_performance_recommendations(memory_status, response_stats)
    +shutdown_optimization()
  }

  class AdvancedThreatAnalysisPipeline {
    +pipeline_start
    +options
    +pipeline_result
    +stage_start
    +enhanced_context
    +stage_duration
    +enhanced_context
    +stage_start
    +individual_results
    +stage_duration
    +stage_start
    +attack_chain_results
    +stage_duration
    +stage_start
    +aggregated_results
    +stage_duration
    +pipeline_duration
    +pipeline_duration
    +enhanced_context: base_context
    +enhanced_context
    +deployment_info
    +security_assessment
    +results
    +server_id
    +analysis_type
    +analysis
    +attack_chain_results
    +server_groups
    +chain_analysis
    +aggregated
    +individual_analyses
    +threat_levels
    +all_attack_vectors
    +all_abuse_scenarios
    +all_mitigations
    +attack_chain_analyses
    +patterns
    +hosts
    +docker_indicators: int
    +cloud_indicators: int
    +metadata_str
    +assessment
    +metadata_str
    +groups
    +host_groups
    +host
    +group_id: int
    +high_risk_servers
    +file_access_servers
    +network_access_servers
    +server_id
    +analysis
    +recommendations
    +critical_servers
    +common_issues
    +issue_type
    +high_risk_chains
    +compliance_context
    +frameworks
    +framework
    +total_pipelines
    +stats
    --
    -__init__(threat_analyzer, config)
    +execute_comprehensive_analysis(mcp_servers, environment_context, analysis_options)
    +execute_workflow_analysis(mcp_servers, workflow_type, workflow_config)
    -_build_enhanced_context(mcp_servers, base_context, options): EnvironmentContext
    -_execute_individual_analyses(mcp_servers, environment_context, options)
    -_execute_attack_chain_analysis(mcp_servers, environment_context, individual_results, options)
    -_aggregate_and_enhance_results(pipeline_result, options)
    -_analyze_deployment_patterns(mcp_servers)
    -_assess_security_posture(mcp_servers)
    -_group_servers_for_attack_chains(mcp_servers, individual_results)
    -_generate_priority_recommendations(individual_analyses, attack_chain_analyses)
    -_execute_security_audit_workflow(mcp_servers, config)
    -_execute_compliance_workflow(mcp_servers, config)
    -_execute_penetration_test_workflow(mcp_servers, config)
    -_execute_risk_assessment_workflow(mcp_servers, config)
    -_update_average_pipeline_time()
    +get_pipeline_statistics()
  }

  class BatchOptimizationEngine {
    +optimal_size
    +recent_metrics
    +time_per_tool_values
    +avg_time_per_tool
    +estimated_optimal
    +optimal_size
    +memory_available
    +optimal_size
    +optimal_size
    +best_provider: NoneType
    +best_score
    +perf
    +score
    +best_score: score
    +best_provider: provider_name
    +provider
    +perf
    +alpha: float
    --
    -__init__(target_batch_time, min_batch_size, max_batch_size, memory_limit_mb, providers)
    +calculate_optimal_batch_size(remaining_servers, historical_metrics, current_memory_usage): int
    +select_optimal_provider(batch_servers)
    +update_performance_history(optimization_metrics)
  }

  class ExampleType {
    +CODE_SNIPPET: str
    +COMMAND_SEQUENCE: str
    +PAYLOAD: str
    +CONFIGURATION: str
    +EXPLOIT_POC: str
    +DETECTION_RULE: str
  }

  class ExampleLanguage {
    +PYTHON: str
    +JAVASCRIPT: str
    +BASH: str
    +POWERSHELL: str
    +SQL: str
    +JSON: str
    +YAML: str
  }

  class ExampleComplexity {
    +BASIC: str
    +INTERMEDIATE: str
    +ADVANCED: str
  }

  class GeneratedExample {
    +example_type: ExampleType
    +language: ExampleLanguage
    +title: str
    +description: str
    +code: str
    +complexity: ExampleComplexity
    +prerequisites
    +notes
    +related_tools
    +risk_level: str
    +timestamp: datetime
    +items
    +items
    --
    +to_html(): str
    -_render_prerequisites(): str
    -_render_notes(): str
  }

  class ExampleGenerationContext {
    +tool_capabilities: ToolCapabilities
    +environment_context: EnvironmentContext
    +threat_analysis
    +server_info
    +target_audience: str
    +include_mitigations: bool
    +sanitize_sensitive: bool
  }

  class DynamicExampleGenerator {
    +examples
    +capability_examples
    +chain_examples
    +mitigation_examples
    +template_key
    +template
    +template
    +code
    +commands
    +cmd
    +command_sequence
    +payload_generators
    +generator
    +examples
    +code_example
    +payload_example
    +config_example
    +examples
    +cmd_example
    +poc_example
    +examples
    +config_example
    +tool_name
    +code_generators
    +generator
    +code
    +tool_name
    +tool_name
    +tool_name
    +template
    +priorities
    +priorities
    --
    -__init__()
    +generate_examples_for_analysis(context)
    +generate_code_snippet(tool_name, capability, language, complexity): GeneratedExample
    +generate_command_sequence(attack_vector, context): GeneratedExample
    +generate_payload_example(capability, context)
    -_generate_capability_examples(capability, context)
    -_generate_attack_chain_examples(context)
    -_generate_mitigation_examples(context)
    -_generate_capability_code_example(capability, context)
    -_generate_file_system_code(context): str
    -_generate_network_code(context): str
    -_generate_code_execution_code(context): str
    -_generate_database_code(context): str
    -_generate_integration_code(context): str
    -_generate_step_command(step, context, step_num): str
    -_assess_attack_complexity(attack_vector): ExampleComplexity
    -_extract_prerequisites(attack_vector)
    -_generate_file_system_payload(context): GeneratedExample
    -_generate_network_payload(context): GeneratedExample
    -_generate_code_execution_payload(context): GeneratedExample
    -_generate_database_payload(context): GeneratedExample
    -_generate_capability_config_example(capability, context)
    -_generate_exploit_poc(attack_vector, context)
    -_generate_mitigation_config(mitigation, context): str
    -_initialize_templates()
    -_initialize_patterns()
    -_get_generic_template(capability, language): str
    -_fill_template(template, variables): str
    -_risk_priority(risk_level): int
    -_complexity_priority(complexity): int
  }

  class AttackVectorGenerator {
    +attack_vectors
    +risk_indicators
    +generated_vectors
    +attack_vectors
    +indicators
    +function_lower
    +risk_patterns
    +vectors
    +template
    +base_vector
    +vector
    +base_severity: str
    +impact_keywords
    +impact_lower
    +base_severity: severity
    +severity_levels
    +current_index
    +base_severity
    +base_likelihood: float
    +num_prerequisites
    +num_prerequisites
    +technique_complexity_keywords
    +mitigations
    +technique_lower
    +factors
    +severity_weights
    +severity_score
    +likelihood_score
    +exploitability_score
    +severity_dist
    +category_dist
    +total_likelihood: float
    +severity
    +category
    +top_categories
    --
    -__init__()
    +generate_attack_vectors(tool_capabilities, environment_context, max_vectors)
    -_get_function_risk_indicators(function_name)
    -_generate_vectors_for_indicator(func, indicator, environment_context)
    -_calculate_vector_severity(variation, environment_context): str
    -_calculate_likelihood(variation, environment_context): float
    -_calculate_exploitability(func, variation): str
    -_generate_mitigations(variation, func)
    -_analyze_environment_factors(variation, environment_context)
    -_prioritize_attack_vectors(vectors, environment_context)
    +calculate_priority_score()
    +generate_vector_summary(vectors)
  }

  class PromptTemplate {
    +system_prompt: str
    +user_prompt_template: str
    +response_schema
    +temperature: float
    +max_tokens: int
  }

  class ThreatAnalysisPrompts {
    +template
    +capability_text
    +context_text
    +user_prompt
    +template
    +user_prompt
    +template
    +vectors_text
    +user_prompt
    +template
    +capability_text
    +context_text
    +user_prompt
    +template
    +similar_tools_text: str
    +similar_tools_text
    +user_prompt
    +template
    +tools_text: str
    +user_prompt
    +lines
    +lines
    --
    -__init__()
    -_initialize_templates()
    +build_capability_analysis_prompt(capabilities, context)
    +build_attack_vector_prompt(capability_analysis, capabilities, context)
    +build_mitigation_prompt(attack_vectors, capabilities, context)
    +build_comprehensive_prompt(capabilities, context)
    +build_context_aware_prompt(capabilities, context, similar_tools)
    +build_attack_chain_prompt(tools, context)
    -_create_capability_analysis_template(): PromptTemplate
    -_create_attack_vector_template(): PromptTemplate
    -_create_mitigation_strategy_template(): PromptTemplate
    -_create_comprehensive_template(): PromptTemplate
    -_create_quick_assessment_template(): PromptTemplate
    -_create_context_aware_template(): PromptTemplate
    -_create_attack_chain_template(): PromptTemplate
    -_format_capabilities(capabilities): str
    -_format_context(context): str
  }

  class STRIDECategory {
    +SPOOFING: str
    +TAMPERING: str
    +REPUDIATION: str
    +INFORMATION_DISCLOSURE: str
    +DENIAL_OF_SERVICE: str
    +ELEVATION_OF_PRIVILEGE: str
  }

  class AttackTreeNodeType {
    +GOAL: str
    +AND_GATE: str
    +OR_GATE: str
    +LEAF: str
  }

  class ThreatActorCapability {
    +SCRIPT_KIDDIE: str
    +AMATEUR: str
    +PROFESSIONAL: str
    +EXPERT: str
    +NATION_STATE: str
  }

  class ThreatActorMotivation {
    +FINANCIAL_GAIN: str
    +ESPIONAGE: str
    +SABOTAGE: str
    +ACTIVISM: str
    +CURIOSITY: str
    +REVENGE: str
    +CHAOS: str
  }

  class STRIDEThreat {
    +category: STRIDECategory
    +threat_name: str
    +description: str
    +affected_assets
    +attack_vectors
    +impact: str
    +likelihood: float
    +severity: SeverityLevel
    +mitigations
  }

  class AttackTreeNode {
    +node_id: str
    +node_type: AttackTreeNodeType
    +description: str
    +parent_id
    +children
    +probability: float
    +cost: float
    +difficulty: DifficultyLevel
    +required_skills
    +required_resources
    +detection_likelihood: float
    +mitigation_options
  }

  class AttackTree {
    +tree_id: str
    +root_goal: str
    +target_asset: str
    +threat_actor: ThreatActorType
    +root_node: AttackTreeNode
    +all_nodes
    +critical_paths
    +overall_probability: float
    +estimated_cost: float
    +time_to_compromise: int
  }

  class ThreatActorProfile {
    +actor_type: ThreatActorType
    +sophistication: ThreatActorSophistication
    +primary_motivations
    +capabilities
    +resources
    +typical_targets
    +attack_methods
    +operational_security: float
    +persistence_level: float
    +risk_tolerance: float
    +stealth_preference: float
    +activity_patterns
    +geographical_focus
    +success_rate: float
    +detection_rate: float
  }

  class ThreatModelingResult {
    +tool_name: str
    +stride_analysis
    +attack_trees
    +threat_actor_profiles
    +high_priority_threats
    +recommended_countermeasures
    +overall_risk_rating: ThreatLevel
    +confidence_score: float
    +analysis_timestamp: str
  }

  class ThreatModeler {
    +stride_threats
    +threats
    +target_goals
    +attack_trees
    +tree
    +relevant_actors
    +profiles
    +profile
    +stride_threats
    +attack_trees
    +threat_actors
    +high_priority
    +countermeasures
    +overall_risk
    +confidence
    +result
    +threats
    +pattern
    +matching_capabilities
    +threat
    +pattern
    +threat_name
    +description_key: str
    +description_key: str
    +description_key: str
    +description_key: str
    +description_key: str
    +description_key: str
    +description_key: str
    +description
    +affected_assets
    +attack_vectors
    +impact
    +likelihood
    +severity
    +mitigations
    +goals
    +capability_goal_mapping
    +unique_goals
    +tree_id
    +root_node
    +critical_paths
    +attack_tree
    +or_node
    +file_node
    +network_node
    +and_node
    +access_node
    +exploit_node
    +best_child
    +critical_paths
    +relevant_actors
    +template
    +target_preferences
    +preferred_methods
    +profile
    +countermeasures
    +general_controls
    +critical_count
    +high_count
    +medium_count
    +high_prob_trees
    +base_confidence: float
    +asset_mapping
    +vectors
    +vectors
    +vectors
    +vectors
    +vectors
    +vectors
    +vectors
    +base_impacts
    +base_impact
    +base_likelihood: float
    +category_severity
    +base_severity
    +mitigation_mapping
    +preferences
    +preferences
    +preferences
    +preferences
    +preferences
    +preferences
    +duration_mapping
    +base_time: int
    +time: int
    +time: int
    +time: int
    +child_time
    +child_time
    --
    -__init__()
    +perform_stride_analysis(tool_capabilities, environment_context)
    +generate_attack_trees(tool_capabilities, environment_context, target_goals)
    +profile_threat_actors(tool_capabilities, environment_context)
    +conduct_comprehensive_analysis(tool_capabilities, environment_context): ThreatModelingResult
    -_initialize_stride_patterns()
    -_initialize_threat_actor_templates()
    -_initialize_attack_patterns()
    -_analyze_stride_category(category, tool_capabilities, environment_context)
    -_create_stride_threat(stride_category, capability_category, tool_capabilities, environment_context)
    -_identify_attack_goals(tool_capabilities)
    -_build_attack_tree(goal, tool_capabilities, environment_context)
    -_populate_attack_tree_nodes(parent_node, goal, tool_capabilities, environment_context)
    -_calculate_attack_tree_metrics(node)
    -_find_critical_paths(root_node)
    +traverse_path(current_path)
    -_identify_relevant_threat_actors(tool_capabilities, environment_context)
    -_create_threat_actor_profile(actor_type, tool_capabilities, environment_context): ThreatActorProfile
    -_generate_countermeasures(stride_threats, attack_trees)
    -_calculate_overall_risk(stride_threats, attack_trees): ThreatLevel
    -_calculate_confidence_score(tool_capabilities, stride_threats): float
    -_identify_affected_assets(capability_category, environment_context)
    -_generate_attack_vectors_for_stride(stride_category, capability_category, tool_capabilities)
    -_calculate_stride_impact(stride_category, environment_context): str
    -_calculate_stride_likelihood(tool_capabilities, capability_category, environment_context): float
    -_calculate_stride_severity(stride_category, likelihood, environment_context): SeverityLevel
    -_generate_stride_mitigations(stride_category, capability_category)
    -_determine_target_preferences(actor_type, tool_capabilities, environment_context)
    -_determine_geographical_focus(actor_type)
    -_determine_active_hours(actor_type): str
    -_determine_attack_duration(actor_type): str
    -_estimate_time_to_compromise(root_node): int
    +calculate_node_time(): int
    -_collect_all_nodes(node, all_nodes)
  }

  class PriorityLevel {
    +CRITICAL: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +INFORMATIONAL: str
  }

  class RiskFactor {
    +SEVERITY: str
    +LIKELIHOOD: str
    +BUSINESS_IMPACT: str
    +EXPLOITABILITY: str
    +DETECTABILITY: str
    +REMEDIATION_DIFFICULTY: str
    +ATTACK_SURFACE: str
    +REGULATORY_IMPACT: str
  }

  class TimeHorizon {
    +IMMEDIATE: str
    +SHORT_TERM: str
    +MEDIUM_TERM: str
    +LONG_TERM: str
  }

  class RemediationUrgency {
    +EMERGENCY: str
    +URGENT: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
  }

  class ScoreFactor {
    +factor_name: str
    +factor_type: RiskFactor
    +raw_score: float
    +weighted_score: float
    +weight: float
    +confidence: float
    +description: str
    +data_sources
  }

  class PriorityScore {
    +overall_score: float
    +priority_level: PriorityLevel
    +score_factors
    +confidence: float
    +score_rationale: str
    +key_drivers
    +calculation_timestamp: datetime
  }

  class ThreatPriorityItem {
    +item_id: str
    +item_name: str
    +item_type: str
    +description: str
    +priority_score: PriorityScore
    +time_horizon: TimeHorizon
    +remediation_urgency: RemediationUrgency
    +affected_assets
    +potential_impact: str
    +required_actions
    +dependencies
    +estimated_effort: str
    +success_probability: float
  }

  class PriorityMatrix {
    +tool_name: str
    +assessment_timestamp: datetime
    +ranked_items
    +critical_items
    +immediate_actions
    +short_term_actions
    +long_term_actions
    +resource_allocation_guidance
    +executive_summary: str
    +risk_appetite_alignment: str
  }

  class ScoringWeights {
    +severity_weight: float
    +likelihood_weight: float
    +business_impact_weight: float
    +exploitability_weight: float
    +detectability_weight: float
    +remediation_difficulty_weight: float
    +attack_surface_weight: float
    +regulatory_impact_weight: float
    +total
    --
    +normalize()
  }

  class PriorityRanker {
    +ranked_items
    +priority_item
    +critical_items
    +immediate_actions
    +short_term_actions
    +long_term_actions
    +resource_guidance
    +executive_summary
    +risk_appetite
    +matrix
    +score_factors
    +severity_factor
    +likelihood_factor
    +business_impact_factor
    +exploitability_factor
    +detectability_factor
    +remediation_factor
    +attack_surface_factor
    +regulatory_factor
    +overall_score
    +priority_level
    +confidence
    +rationale
    +key_drivers
    +adjusted_items
    +adjusted_item
    +priority_score
    +time_horizon
    +urgency
    +item_id
    +item_name
    +item_type
    +description
    +affected_assets
    +potential_impact
    +required_actions
    +dependencies
    +estimated_effort
    +success_probability
    +severity_str
    +raw_score
    +weighted_score
    +likelihood_str
    +raw_score
    +weighted_score
    +base_impact
    +impact_mapping
    +base_impact
    +sensitivity_multiplier
    +raw_score
    +weighted_score
    +complexity
    +base_score
    +raw_score
    +weighted_score
    +detectability
    +raw_score
    +weighted_score
    +difficulty
    +difficulty_scores
    +raw_score
    +weighted_score
    +base_surface
    +surface_contributors: int
    +raw_score
    +weighted_score
    +base_impact: float
    +compliance_count
    +base_impact
    +regulatory_keywords
    +threat_text
    +regulatory_mentions
    +base_impact
    +raw_score: base_impact
    +weighted_score
    +avg_confidence
    +unique_sources
    +source_diversity_bonus
    +top_factors
    +rationale_parts
    +contribution_pct
    +sorted_factors
    +key_drivers
    +total_score
    +driver_desc
    +horizon_str
    +severity
    +likelihood
    +key
    +assets
    +capability_assets
    +cap_name
    +severity
    +threat_type
    +impact_templates
    +base_description
    +actions
    +threat_type
    +base_effort
    +effort_mapping
    +base_probability: float
    +difficulty
    +difficulty_adjustments
    +immediate_actions
    +critical_items
    +actions
    +short_term_actions
    +relevant_items
    +actions
    +long_term_actions
    +medium_low_items
    +critical_count
    +high_count
    +total_items
    +high_priority_items
    +guidance
    +recommendations
    +critical_count
    +considerations
    +critical_count
    +high_count
    +emergency_items
    +urgent_items
    +total_items
    +critical_count
    +high_count
    +summary_parts
    +critical_count
    +high_count
    +total_items
    +high_risk_percentage
    +adjustment_factor
    +adjusted_score
    +adjusted_priority_level
    --
    -__init__(scoring_weights)
    +rank_threats(threats, tool_capabilities, environment_context): PriorityMatrix
    +calculate_priority_score(threat_data, tool_capabilities, environment_context): PriorityScore
    +adjust_priorities_for_context(priority_matrix, business_context): PriorityMatrix
    -_initialize_priority_thresholds()
    -_initialize_scoring_models()
    -_initialize_urgency_matrix()
    -_initialize_time_horizon_factors()
    -_score_and_rank_threat(threat, tool_capabilities, environment_context): ThreatPriorityItem
    -_calculate_severity_factor(threat_data): ScoreFactor
    -_calculate_likelihood_factor(threat_data): ScoreFactor
    -_calculate_business_impact_factor(threat_data, environment_context): ScoreFactor
    -_calculate_exploitability_factor(threat_data, tool_capabilities): ScoreFactor
    -_calculate_detectability_factor(threat_data): ScoreFactor
    -_calculate_remediation_difficulty_factor(threat_data): ScoreFactor
    -_calculate_attack_surface_factor(threat_data, tool_capabilities): ScoreFactor
    -_calculate_regulatory_impact_factor(threat_data, environment_context): ScoreFactor
    -_determine_priority_level(overall_score): PriorityLevel
    -_calculate_score_confidence(score_factors): float
    -_generate_score_rationale(score_factors, overall_score): str
    -_identify_key_drivers(score_factors)
    -_determine_time_horizon(threat_data): TimeHorizon
    -_determine_remediation_urgency(priority_level, time_horizon): RemediationUrgency
    -_identify_affected_assets(threat_data, tool_capabilities)
    -_generate_impact_description(threat_data, priority_score): str
    -_generate_required_actions(threat_data, priority_score)
    -_estimate_remediation_effort(threat_data, priority_score): str
    -_calculate_success_probability(threat_data, tool_capabilities): float
    -_generate_immediate_actions(ranked_items)
    -_generate_short_term_actions(ranked_items)
    -_generate_long_term_actions(ranked_items)
    -_generate_resource_allocation_guidance(ranked_items)
    -_generate_staffing_recommendations(ranked_items)
    -_generate_budget_considerations(ranked_items)
    -_generate_timeline_recommendations(ranked_items)
    -_create_executive_summary(ranked_items, critical_items): str
    -_assess_risk_appetite_alignment(ranked_items): str
    -_adjust_item_priority(item, business_context): ThreatPriorityItem
  }

  class SelectionCriteria {
    +COST_OPTIMIZED: str
    +PERFORMANCE_OPTIMIZED: str
    +QUALITY_OPTIMIZED: str
    +RELIABILITY_OPTIMIZED: str
    +BALANCED: str
  }

  class ProviderCapability {
    +BASIC: str
    +STANDARD: str
    +ADVANCED: str
    +EXPERT: str
  }

  class ProviderMetrics {
    +provider_name: str
    +avg_response_time: float
    +success_rate: float
    +uptime_percentage: float
    +avg_accuracy_score: float
    +avg_confidence_score: float
    +complexity_handling: float
    +cost_per_analysis: float
    +cost_efficiency_score: float
    +current_load: int
    +max_concurrent: int
    +queue_length: int
    +threat_analysis_capability: ProviderCapability
    +attack_chain_capability: ProviderCapability
    +context_understanding: ProviderCapability
    +total_requests: int
    +total_successes: int
    +total_failures: int
    +last_success
    +last_failure
    +is_healthy: bool
    +is_available: bool
    +maintenance_window
  }

  class SelectionContext {
    +tool_capabilities: ToolCapabilities
    +environment_context: EnvironmentContext
    +analysis_type: str
    +max_cost_limit
    +max_time_limit
    +min_accuracy_required: float
    +min_confidence_required: float
    +selection_criteria: SelectionCriteria
    +allow_experimental_providers: bool
    +require_fallback_provider: bool
    +is_urgent_analysis: bool
    +is_sensitive_data: bool
    +requires_compliance: bool
    +priority_level: int
  }

  class ProviderSelection {
    +primary_provider: str
    +fallback_providers
    +selection_score: float
    +selection_reasoning: str
    +estimated_cost: float
    +estimated_time: float
    +expected_quality: float
    +confidence_level: float
    +alternative_selections
    +selection_timestamp: datetime
    +selection_criteria_used: SelectionCriteria
  }

  class EnhancedProviderSelector {
    +available_providers
    +provider_scores
    +score
    +primary_provider
    +fallback_providers
    +selection
    +available_providers
    +selected_provider
    +selected_provider
    +selected_provider
    +selected_provider
    +fallback_providers
    +selection
    +metrics
    +alpha: float
    +recent_failure_rate
    +recommendations
    +available_providers
    +score
    +metrics
    +recommendation
    +optimization_plan
    +total_requests
    +provider_capacity
    +capacity_utilization
    +estimated_requests
    +estimated_cost
    +estimated_time
    +total_selections
    +provider_usage
    +criteria_usage
    +success_rates
    +provider
    +criteria
    +capabilities
    +now
    +recent_failures
    +available
    +metrics
    +weights
    +max_cost
    +cost_score
    +max_time
    +performance_score
    +quality_score
    +reliability_score
    +load_factor
    +capability_bonus
    +total_score
    +capabilities
    +bonus: float
    +threat_cap
    +chain_cap
    +context_cap
    +candidates
    +primary_metrics
    +reasoning
    +alternatives
    +alt_metrics
    +metrics
    +score
    +reasoning_parts
    +alt_metrics
    +sel_metrics
    +available_providers
    +provider_name
    +metrics
    +provider_name
    +provider
    +weights
    +score
    +total_weight
    +random_value
    +cumulative_weight: int
    +metrics
    +metrics
    +recent_failure_rate
    +metrics
    +score
    +metrics
    +strengths
    +metrics
    +weaknesses
    +capabilities
    +use_cases
    +recommendations
    +total_predicted
    +total_capacity
    --
    -__init__(providers)
    +select_optimal_provider(selection_context): ProviderSelection
    +select_load_balanced_provider(selection_context, load_balancing_strategy): ProviderSelection
    +update_provider_performance(provider_name, response_time, success, quality_score, cost)
    +get_provider_recommendations(selection_context)
    +optimize_provider_allocation(workload_prediction, time_horizon_hours)
    +get_selection_analytics()
    -_get_initial_provider_metrics(provider_name)
    -_update_real_time_metrics()
    -_filter_available_providers(context)
    -_calculate_provider_score(provider_name, context): float
    -_calculate_capability_bonus(provider_name, context): float
    -_select_fallback_providers(primary_provider, provider_scores, context)
    -_create_selection_result(primary_provider, fallback_providers, provider_scores, context): ProviderSelection
    -_generate_selection_reasoning(provider_name, provider_scores, context): str
    -_get_alternative_reason(alternative, selected, context): str
    -_create_fallback_selection(context): ProviderSelection
    -_record_selection(selection, context)
    -_select_round_robin(providers): str
    -_select_weighted_round_robin(providers, context): str
    -_select_least_connections(providers): str
    -_select_least_response_time(providers): str
    -_calculate_recent_failure_rate(provider_name, hours): float
    -_get_recent_failures(provider_name, hours): int
    -_get_provider_weight(provider_name): float
    -_assess_provider_suitability(provider_name, context): str
    -_identify_provider_strengths(provider_name)
    -_identify_provider_weaknesses(provider_name)
    -_get_provider_use_cases(provider_name)
    -_generate_allocation_recommendations(optimization_plan, workload_prediction)
  }

  class OptimizationStrategy {
    +COST_OPTIMIZED: str
    +QUALITY_OPTIMIZED: str
    +BALANCED: str
    +SPEED_OPTIMIZED: str
  }

  class OptimizationRecommendation {
    +strategy: OptimizationStrategy
    +use_cached_analysis: bool
    +use_pattern_based: bool
    +require_full_analysis: bool
    +estimated_cost: float
    +estimated_accuracy: float
    +estimated_time_seconds: float
    +confidence_level: float
    +reasoning: str
  }

  class AnalysisFeedback {
    +tool_signature: str
    +accuracy_rating: float
    +usefulness_rating: float
    +completeness_rating: float
    +cost_effectiveness: float
    +timestamp: datetime
    +user_comments
  }

  class ThreatAnalysisOptimizer {
    +config
    +similar_result
    +config
    +similar_result
    +patterns
    +cost_estimate
    +estimated_cost
    +feedback_data
    +optimization_results
    +config
    +base_estimate
    +optimization_savings: float
    +optimization_method: str
    +similar_result
    +optimization_savings
    +optimization_method: str
    +patterns
    +optimization_savings
    +optimization_method: str
    +optimized_cost
    +suggestions
    +patterns
    +similar_tools
    +current_avg
    +total_analyses
    +stats
    +total_recommendations
    +db_metrics
    +best_pattern
    +overall_quality
    +optimization_insights
    --
    -__init__(threat_intelligence_db)
    +should_use_cached_analysis(tool_capabilities, strategy): bool
    +get_optimization_recommendation(tool_capabilities, environment_context, strategy, budget_limit): OptimizationRecommendation
    +optimize_ai_prompts(feedback)
    +estimate_analysis_cost(tool_capabilities, strategy)
    +get_quality_improvement_suggestions(tool_capabilities, current_analysis)
    +update_optimization_metrics(analysis_result, optimization_used, cost_saved, accuracy_achieved)
    +get_optimization_stats()
    -_create_cached_recommendation(similar_analysis, similarity_score, strategy, config): OptimizationRecommendation
    -_create_pattern_recommendation(patterns, strategy, config, tool_capabilities): OptimizationRecommendation
    -_create_budget_constrained_recommendation(tool_capabilities, budget_limit, strategy, config): OptimizationRecommendation
    -_create_full_analysis_recommendation(estimated_cost, strategy, config): OptimizationRecommendation
    -_create_fallback_recommendation(): OptimizationRecommendation
    -_analyze_feedback_patterns(feedback)
    -_update_optimization_strategies(feedback)
  }

  class ErrorType {
    +NETWORK_ERROR: str
    +RATE_LIMIT: str
    +API_ERROR: str
    +AUTHENTICATION_ERROR: str
    +QUOTA_EXCEEDED: str
    +PARSING_ERROR: str
    +TIMEOUT_ERROR: str
    +UNKNOWN_ERROR: str
  }

  class RetryStrategy {
    +EXPONENTIAL_BACKOFF: str
    +LINEAR_BACKOFF: str
    +FIXED_DELAY: str
    +NO_RETRY: str
  }

  class RetryConfig {
    +max_attempts: int
    +base_delay: float
    +max_delay: float
    +backoff_multiplier: float
    +jitter: bool
    +retry_on_errors
    --
    -__post_init__()
  }

  class CircuitBreakerConfig {
    +failure_threshold: int
    +recovery_timeout: float
    +success_threshold: int
    +monitoring_window: float
  }

  class CircuitBreakerState {
    +CLOSED: str
    +OPEN: str
    +HALF_OPEN: str
  }

  class ProviderHealth {
    +provider_name: str
    +total_requests: int
    +successful_requests: int
    +failed_requests: int
    +consecutive_failures: int
    +last_success
    +last_failure
    +average_response_time: float
    +circuit_breaker_state: CircuitBreakerState
    +circuit_breaker_until
    +error_rates
    --
    -__post_init__()
    +success_rate(): float
    +failure_rate(): float
    +is_healthy(): bool
  }

  class ErrorClassifier {
    +error_message_lower
    --
    -__init__()
    +classify_error(error_message): ErrorType
  }

  class AdvancedRetryHandler {
    +delay
    +delay
    +delay
    +jitter_amount
    +health
    +health
    +healthy_providers
    +health
    +response_time_score
    +stats
    --
    -__init__(retry_config, circuit_breaker_config)
    +should_retry(error, error_type, attempt): bool
    +calculate_delay(attempt, strategy): float
    +update_provider_health(provider_name, success, response_time, error_type)
    +is_circuit_breaker_open(provider_name): bool
    +get_best_provider(available_providers)
    +provider_score()
    +get_health_statistics()
  }

  class ResponseParser {
    +parsed_data
    +schema_valid: bool
    +schema_valid
    +threat_analysis
    +structured_data
    +threat_analysis
    +stripped_content
    +direct_data
    +json_patterns
    +stripped_content
    +direct_data
    +matches
    +json_str
    +json_str
    +data
    +threat_keys
    +cleaned_content
    +data
    +json_candidates
    +cleaned
    +data
    +json_str
    +json_str
    +json_str
    +json_str
    +json_str
    +json_str
    +json_str
    +json_str
    +json_str
    +extracted_data
    +threat_patterns
    +match
    +threat_level
    +attack_vector_patterns
    +matches
    +vectors
    +mitigation_patterns
    +matches
    +mitigations
    +confidence_patterns
    +match
    +confidence
    +items
    +list_patterns
    +lines
    +line
    +match
    +item
    +text
    +json_patterns
    +partial_data
    +content_lower
    +required_fields
    +properties
    +expected_type
    +required_fields
    +optional_fields
    +attack_vectors
    +vector_name
    +vector_description
    +severity_str
    +severity
    +attack_vector
    +server_info
    +transport
    +host
    +port
    +description
    +impact
    +description: str
    +impact: str
    +abuse_scenarios
    +attack_flow
    +attack_step
    +business_impact
    +scenario
    +mitigation_strategies
    +mitigation
    +threat_level_str
    +threat_level
    +analysis_metadata
    +compliance_impact
    +threat_analysis
    +total
    --
    -__init__()
    +parse_analysis_response(content, analysis_type, tool_capabilities, environment_context, response_schema)
    -_extract_json_data(content)
    -_clean_json_string(json_str): str
    -_extract_structured_text(content, analysis_type)
    -_parse_list_items(text)
    -_is_json_fragment(text): bool
    -_extract_partial_data(content, analysis_type)
    -_validate_response_schema(data, schema): bool
    -_validate_threat_analysis_structure(data): bool
    -_convert_to_threat_analysis(data, analysis_type, tool_capabilities, environment_context)
    +get_parsing_statistics()
  }

  class AnalysisRequest {
    +tool_capabilities: ToolCapabilities
    +environment_context: EnvironmentContext
    +analysis_type: str
    +max_tokens: int
    +temperature: float
  }

  class AnalysisResponse {
    +content: str
    +metadata: AnalysisMetadata
    +parsed_analysis
    +error
  }

  class AIProvider {
    +retry_config
    +circuit_breaker_config
    +stats
    +parsing_stats
    +health_stats
    +retry_config
    +max_attempts
    +last_exception: NoneType
    +start_time
    +result
    +response_time
    +last_exception: e
    +response_time
    +error_type
    +delay
    --
    -__init__(config)
    +generate_threat_analysis(request): AnalysisResponse
    +assess_risk_level(capabilities)
    +estimate_cost(request): float
    +get_usage_stats()
    -_update_stats(success, cost, tokens)
    -_execute_with_retry(operation, provider_name, operation_name): Any
  }

  class OpenAIProvider {
    +api_key
    +start_time
    +prompt_data
    +prompt_data
    +prompt_data
    +prompt_data
    +response
    +duration
    +content
    +prompt_tokens
    +completion_tokens
    +cost
    +metadata
    +parsed_analysis: NoneType
    +parsed_analysis
    +duration
    +prompt_data
    +response
    +content
    +parts
    +risk_level_str
    +confidence
    +risk_level
    +estimated_prompt_tokens
    +estimated_completion_tokens: int
    +prompt_cost
    +completion_cost
    +prompt_cost
    +completion_cost
    --
    -__init__(config)
    +generate_threat_analysis(request): AnalysisResponse
    +make_api_call()
    +assess_risk_level(capabilities)
    +estimate_cost(request): float
    -_calculate_openai_cost(prompt_tokens, completion_tokens): float
  }

  class AnthropicProvider {
    +model_name
    +model_name: str
    +api_key: NoneType
    +api_key
    +api_key
    +api_key
    +start_time
    +prompt_data
    +prompt_data
    +prompt_data
    +prompt_data
    +response
    +duration
    +content
    +input_tokens
    +output_tokens
    +cost
    +metadata
    +parsed_analysis: NoneType
    +parsed_analysis
    +duration
    +prompt_data
    +response
    +content
    +parts
    +risk_level_str
    +confidence
    +risk_level
    +estimated_input_tokens
    +estimated_output_tokens: int
    +input_cost
    +output_cost
    --
    -__init__(config)
    +generate_threat_analysis(request): AnalysisResponse
    +make_api_call()
    +assess_risk_level(capabilities)
    +estimate_cost(request): float
    -_calculate_anthropic_cost(input_tokens, output_tokens): float
  }

  class LocalLLMProvider {
    +start_time
    +prompt_data
    +prompt_data
    +prompt_data
    +prompt_data
    +full_prompt
    +response
    +result
    +duration
    +content
    +metadata
    +parsed_analysis: NoneType
    +parsed_analysis
    +duration
    +prompt_data
    +response
    +result
    +content
    +parts
    +risk_level_str
    +confidence
    +risk_level
    --
    -__init__(config)
    +generate_threat_analysis(request): AnalysisResponse
    +make_api_call()
    +assess_risk_level(capabilities)
    +estimate_cost(request): float
  }

  class NarrativeStyle {
    +EXECUTIVE: str
    +TECHNICAL: str
    +SECURITY: str
    +EDUCATIONAL: str
    +INVESTIGATIVE: str
  }

  class NarrativeLength {
    +BRIEF: str
    +STANDARD: str
    +DETAILED: str
    +COMPREHENSIVE: str
  }

  class StoryElement {
    +INITIAL_ACCESS: str
    +RECONNAISSANCE: str
    +PRIVILEGE_ESCALATION: str
    +LATERAL_MOVEMENT: str
    +DATA_EXFILTRATION: str
    +PERSISTENCE: str
    +IMPACT: str
    +TIMELINE: str
    +DETECTION_EVASION: str
    +BUSINESS_IMPACT: str
  }

  class AttackNarrative {
    +title: str
    +style: NarrativeStyle
    +length: NarrativeLength
    +summary: str
    +full_narrative: str
    +key_points
    +timeline
    +characters
    +impact_assessment: str
    +mitigation_context: str
    +technical_details
    +business_context: str
    +call_to_action: str
    +timestamp: datetime
    +paragraphs
    +timeline_items
    +points
    +details
    --
    +to_html(): str
    -_format_narrative_html(): str
    -_render_timeline(): str
    -_render_key_points(): str
    -_render_impact_assessment(): str
    -_render_technical_details(): str
    -_render_call_to_action(): str
  }

  class NarrativeBuilder {
    +threat_actor
    +title
    +summary
    +narrative_content
    +key_points
    +timeline
    +impact_assessment
    +technical_details
    +call_to_action
    +title
    +summary
    +narrative_content
    +key_points
    +title
    +summary
    +narrative_content
    +key_points
    +impact_assessment
    +call_to_action
    +high_complexity_attacks
    +tool_name
    +threat_level
    +actor_context
    +context
    +tool_name
    +threat_level
    +num_vectors
    +character
    +actor_name
    +actor_motivation
    +tool_name
    +opening
    +attack_sequence
    +impact_description
    +detection_evasion
    +business_context
    +content
    +top_vectors
    +sequence_parts
    +part
    +part
    +part
    +timeline
    +time_offset
    +points
    +confidence
    +details
    +tool_name
    +tool_name
    +threat_level
    +goals
    +likelihood_map
    --
    -__init__()
    +build_attack_narrative(threat_analysis, style, length): AttackNarrative
    +build_scenario_narrative(abuse_scenario, context, style): AttackNarrative
    +create_business_impact_story(threat_analysis, business_context): AttackNarrative
    -_identify_threat_actor(threat_analysis): ThreatActorType
    -_generate_narrative_title(threat_analysis, threat_actor): str
    -_create_executive_summary(threat_analysis, style): str
    -_build_narrative_content(threat_analysis, threat_actor, style, length): str
    -_create_opening(tool_name, actor_name, motivation, style): str
    -_create_attack_sequence(threat_analysis, actor_name, style): str
    -_create_impact_description(threat_analysis, style): str
    -_create_detection_evasion_section(threat_analysis, actor_name): str
    -_create_business_context_section(threat_analysis, style): str
    -_build_attack_timeline(threat_analysis)
    -_extract_key_points(threat_analysis, style)
    -_create_impact_assessment(threat_analysis, style): str
    -_extract_technical_details(threat_analysis)
    -_create_call_to_action(threat_analysis, style): str
    -_build_scenario_content(abuse_scenario, context, style): str
    -_create_scenario_summary(abuse_scenario, context): str
    -_generate_business_title(threat_analysis): str
    -_create_business_summary(threat_analysis, business_context): str
    -_build_business_narrative(threat_analysis, business_context): str
    -_create_detailed_business_impact(threat_analysis, business_context): str
    -_create_executive_call_to_action(threat_analysis): str
    -_get_attack_goal(vector): str
    -_assess_likelihood(difficulty): str
    -_initialize_templates()
    -_initialize_character_profiles()
    -_initialize_phrases()
  }

  class TechnicalImpactScore {
    +overall_score: float
    +confidentiality_impact: float
    +integrity_impact: float
    +availability_impact: float
    +scope_impact: float
    +complexity_factor: float
    +scoring_rationale: str
  }

  class BusinessImpactScore {
    +overall_score: float
    +financial_impact: float
    +operational_impact: float
    +reputational_impact: float
    +compliance_impact: float
    +strategic_impact: float
    +business_context: str
    +cost_estimate
  }

  class LikelihoodScore {
    +overall_score: float
    +threat_actor_capability: float
    +attack_complexity: float
    +attack_surface_accessibility: float
    +existing_controls_effectiveness: float
    +historical_frequency: float
    +likelihood_rationale: str
  }

  class EnvironmentalModifiers {
    +deployment_factor: float
    +security_posture_factor: float
    +network_exposure_factor: float
    +data_sensitivity_factor: float
    +monitoring_capability_factor: float
    +incident_response_factor: float
    +overall_modifier: float
    +modifier_explanation: str
  }

  class PrioritizedThreat {
    +threat_id: str
    +tool_name: str
    +threat_title: str
    +threat_description: str
    +priority_level: PriorityLevel
    +priority_score: float
    +technical_impact: TechnicalImpactScore
    +business_impact: BusinessImpactScore
    +likelihood: LikelihoodScore
    +environmental_modifiers: EnvironmentalModifiers
    +risk_score: float
    +confidence_level: float
    +recommended_actions
    +timeline_recommendation: str
    +resource_requirements
    +success_metrics
    +dependencies
    +prioritization_timestamp: str
  }

  class RiskPrioritizationAlgorithm {
    +start_time
    +prioritized_threats
    +tool_caps: NoneType
    +tool_caps
    +technical_impact
    +business_impact
    +likelihood
    +environmental_modifiers
    +priority_assessment
    +prioritization_time
    +confidentiality_impact
    +integrity_impact
    +availability_impact
    +scope_impact
    +complexity_factor
    +overall_score
    +scoring_rationale
    +financial_impact
    +operational_impact
    +reputational_impact
    +compliance_impact
    +strategic_impact
    +overall_score
    +cost_estimate
    +business_context_desc
    +threat_actor_capability
    +attack_complexity
    +attack_surface_accessibility
    +existing_controls_effectiveness
    +historical_frequency
    +overall_score
    +likelihood_rationale
    +deployment_factor
    +security_posture_factor
    +network_exposure_factor
    +data_sensitivity_factor
    +monitoring_capability_factor
    +incident_response_factor
    +overall_modifier
    +modifier_explanation
    +risk_score
    +final_score
    +final_score
    +priority_level
    +confidence_level
    +recommended_actions
    +timeline_recommendation
    +resource_requirements
    +success_metrics
    +dependencies
    +impact: float
    +impact: float
    +impact: float
    +scope: float
    +complexity: float
    +complexity: float
    +complexity: float
    +complexity: float
    +complexity: float
    +impact: float
    +revenue
    +impact: float
    +impact: float
    +impact: float
    +industry
    +impact: float
    +is_strategic
    +confidence_factors
    +actions
    +stats
    +accessibility: float
    +control_effectiveness
    +factors
    +factors
    +factors
    +dependencies
    --
    -__init__()
    +prioritize_threats(threat_analyses, tool_capabilities, environment_context, business_context)
    -_calculate_technical_impact_score(threat_analysis, tool_capabilities, environment_context): TechnicalImpactScore
    -_assess_business_impact(threat_analysis, tool_capabilities, environment_context, business_context): BusinessImpactScore
    -_evaluate_likelihood(threat_analysis, tool_capabilities, environment_context): LikelihoodScore
    -_apply_environmental_modifiers(threat_analysis, environment_context): EnvironmentalModifiers
    -_generate_priority_ranking(threat_analysis, technical_impact, business_impact, likelihood, environmental_modifiers, tool_capabilities): PrioritizedThreat
    -_assess_confidentiality_impact(threat_analysis, tool_capabilities): float
    -_assess_integrity_impact(threat_analysis, tool_capabilities): float
    -_assess_availability_impact(threat_analysis, tool_capabilities): float
    -_assess_scope_impact(threat_analysis, environment_context): float
    -_calculate_complexity_factor(threat_analysis): float
    -_calculate_financial_impact(threat_analysis, tool_capabilities, environment_context, business_context): float
    -_calculate_operational_impact(threat_analysis, tool_capabilities, environment_context): float
    -_calculate_reputational_impact(threat_analysis, environment_context, business_context): float
    -_calculate_compliance_impact(threat_analysis, environment_context, business_context): float
    -_calculate_strategic_impact(threat_analysis, business_context): float
    -_determine_priority_level(final_score): PriorityLevel
    -_calculate_confidence_level(technical_impact, business_impact, likelihood, tool_capabilities): float
    -_generate_recommended_actions(priority_level, technical_impact, business_impact, threat_analysis)
    -_generate_timeline_recommendation(priority_level, business_impact): str
    -_update_prioritization_statistics(prioritized_threats, prioritization_time)
    +get_prioritization_statistics()
    -_generate_technical_impact_rationale(conf, integ, avail, scope, complex): str
    -_estimate_business_cost(financial, operational, compliance, context)
    -_generate_business_context_description(financial, operational, reputational, compliance, strategic): str
    -_assess_threat_actor_capability(threat_analysis): float
    -_assess_attack_complexity(threat_analysis, tool_capabilities): float
    -_assess_attack_surface_accessibility(tool_capabilities, environment_context): float
    -_assess_existing_controls(environment_context): float
    -_assess_historical_frequency(threat_analysis): float
    -_generate_likelihood_rationale(actor, complexity, access, controls, history): str
    -_calculate_deployment_factor(deployment_type): float
    -_calculate_security_posture_factor(security_posture): float
    -_calculate_network_exposure_factor(environment_context): float
    -_calculate_data_sensitivity_factor(data_sensitivity): float
    -_calculate_monitoring_capability_factor(environment_context): float
    -_calculate_incident_response_factor(environment_context): float
    -_generate_modifier_explanation(deploy, security, network, data, monitor, incident): str
    -_determine_resource_requirements(priority_level, technical_impact, business_impact)
    -_define_success_metrics(priority_level, technical_impact, business_impact)
    -_identify_dependencies(threat_analysis, priority_level)
  }

  class ThreatLevel {
    +MINIMAL: str
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +CRITICAL: str
    +value
    --
    +{class} from_string(value)
  }

  class SeverityLevel {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +CRITICAL: str
    +value
    --
    +{class} from_string(value)
  }

  class DifficultyLevel {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
  }

  class ThreatActorType {
    +INSIDER_THREAT: str
    +EXTERNAL_ATTACKER: str
    +SUPPLY_CHAIN: str
    +NATION_STATE: str
    +CYBERCRIMINAL: str
    +HACKTIVIST: str
  }

  class AccessLevel {
    +NONE: str
    +USER: str
    +ELEVATED: str
    +ADMIN: str
    +ROOT: str
  }

  class CapabilityCategory {
    +FILE_SYSTEM: str
    +NETWORK_ACCESS: str
    +CODE_EXECUTION: str
    +DATA_PROCESSING: str
    +SYSTEM_INFORMATION: str
    +EXTERNAL_INTEGRATION: str
    +DATABASE_ACCESS: str
    +CLOUD_SERVICES: str
    +AUTHENTICATION: str
    +CRYPTOGRAPHY: str
  }

  class DeploymentType {
    +LOCAL: str
    +REMOTE: str
    +CLOUD: str
    +HYBRID: str
    +EDGE: str
  }

  class SecurityPosture {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +PARANOID: str
  }

  class DataSensitivity {
    +PUBLIC: str
    +INTERNAL: str
    +CONFIDENTIAL: str
    +RESTRICTED: str
    +TOP_SECRET: str
  }

  class NetworkExposure {
    +ISOLATED: str
    +INTERNAL: str
    +INTERNET_FACING: str
    +PUBLIC: str
  }

  class UserPrivileges {
    +STANDARD: str
    +ELEVATED: str
    +ADMIN: str
    +ROOT: str
  }

  class ComplianceFramework {
    +OWASP_TOP_10: str
    +NIST_CSF: str
    +PCI_DSS: str
    +GDPR: str
    +HIPAA: str
    +SOC2: str
    +ISO_27001: str
  }

  class RiskSurface {
    +file_access_paths
    +network_endpoints
    +system_commands
    +external_apis
    +risk_score: float
    --
    -__post_init__()
  }

  class AccessRequirements {
    +minimum_privilege: AccessLevel
    +authentication_required: bool
    +network_access_required: bool
    +file_system_access: bool
    +system_command_access: bool
  }

  class ExternalDependency {
    +name: str
    +type: str
    +endpoint
    +authentication_method
    +data_sensitivity: DataSensitivity
  }

  class ToolFunction {
    +name: str
    +description: str
    +input_schema
    +categories
    +risk_indicators
    +requires_privileges: bool
    +external_access: bool
  }

  class ToolCapabilities {
    +tool_name: str
    +tool_id: str
    +tool_functions
    +capability_categories
    +risk_indicators
    +requires_privileges: bool
    +external_access: bool
    +risk_score: float
    +confidence: float
    +risk_surface: RiskSurface
    +access_requirements: AccessRequirements
    +external_dependencies
    --
    -__post_init__()
  }

  class EnvironmentContext {
    +deployment_type: DeploymentType
    +security_posture: SecurityPosture
    +data_sensitivity: DataSensitivity
    +network_exposure: NetworkExposure
    +user_privileges: UserPrivileges
    +compliance_requirements
  }

  class AttackStep {
    +step_number: int
    +description: str
    +prerequisites
    +tools_required
  }

  class AttackVector {
    +vector_id: str
    +name: str
    +description: str
    +required_capabilities
    +complexity: AttackComplexity
    +required_access: AccessLevel
    +detection_difficulty: DetectionDifficulty
    +time_to_execute: float
    +success_probability: float
    +stealth_level: float
    +prerequisites
    +indicators
  }

  class BusinessImpact {
    +financial_impact: str
    +operational_impact: str
    +reputation_impact: str
  }

  class ChainLink {
    +tool_name: str
    +tool_capabilities
    +attack_action: str
    +prerequisites
    +output_artifacts
    +required_access: AccessLevel
    +difficulty: DifficultyLevel
    +time_estimate: int
  }

  class AttackChain {
    +chain_id: str
    +chain_name: str
    +description: str
    +threat_actor: ThreatActorType
    +attack_objective: str
    +chain_links
    +overall_difficulty: DifficultyLevel
    +overall_impact: BusinessImpact
    +total_time_estimate: int
    +detection_difficulty: DifficultyLevel
    +mitigation_strategies
    +prerequisites
    +success_probability: float
  }

  class ChainFeasibilityScore {
    +chain_id: str
    +overall_score: float
    +technical_feasibility: float
    +access_feasibility: float
    +detection_avoidance: float
    +environmental_suitability: float
    +resource_requirements: float
    +scoring_rationale: str
    +confidence_level: float
  }

  class AbuseScenario {
    +scenario_name: str
    +threat_actor: ThreatActorType
    +motivation: str
    +attack_flow
    +required_access: AccessLevel
    +detection_difficulty
    +business_impact: BusinessImpact
  }

  class DetectionIndicator {
    +indicator_name: str
    +indicator_type: str
    +pattern: str
    +confidence: float
    +false_positive_rate: float
  }

  class AnalysisMetadata {
    +provider: str
    +model: str
    +timestamp: datetime
    +analysis_duration: float
    +cost: float
    +prompt_tokens: int
    +completion_tokens: int
    +total_tokens: int
    +confidence_score: float
  }

  class ThreatAnalysis {
    +tool_signature: str
    +tool_capabilities: ToolCapabilities
    +environment_context: EnvironmentContext
    +threat_level: ThreatLevel
    +attack_vectors
    +abuse_scenarios
    +mitigation_strategies
    +detection_indicators
    +compliance_impact: ComplianceImpact
    +confidence_score: float
    +analysis_metadata: AnalysisMetadata
    +attack_vectors
    +attack_vector
    +abuse_scenarios
    +attack_flow
    +attack_step
    +attack_step
    +business_impact
    +scenario
    +mitigation_strategies
    +strategy
    +detection_indicators
    +indicator
    +tool_capabilities
    +environment_context
    +compliance_impact
    +analysis_metadata
    +threat_analysis
    --
    +{class} from_dict(data)
  }

  class DiagramType {
    +ATTACK_FLOW: str
    +NETWORK_TOPOLOGY: str
    +TIMELINE: str
    +RISK_HEAT_MAP: str
    +ATTACK_TREE: str
    +DATA_FLOW: str
    +THREAT_LANDSCAPE: str
    +MITIGATION_MATRIX: str
  }

  class DiagramFormat {
    +MERMAID: str
    +GRAPHVIZ: str
    +SVG: str
    +HTML_CSS: str
    +JSON: str
    +PLANTUML: str
  }

  class DiagramStyle {
    +PROFESSIONAL: str
    +DARK_THEME: str
    +COLORFUL: str
    +MINIMAL: str
    +SECURITY_FOCUSED: str
  }

  class VisualDiagram {
    +title: str
    +diagram_type: DiagramType
    +format: DiagramFormat
    +style: DiagramStyle
    +content: str
    +description: str
    +legend
    +interactions
    +metadata
    +timestamp: datetime
    +legend_items
    +interaction_items
    +theme_mapping
    --
    +to_html(): str
    -_render_mermaid_html(): str
    -_render_html_css(): str
    -_render_svg_html(): str
    -_render_code_block(): str
    -_render_legend(): str
    -_render_interactions(): str
    -_get_mermaid_theme(): str
  }

  class DiagramGenerator {
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +content
    +tool_name
    +attack_vectors
    +mermaid_code
    +vector_id
    +severity_class
    +events
    +start_time
    +event_time
    +final_time
    +timeline_html: str
    +severity_class
    +time_str
    +risk_matrix
    +threat_analysis
    +risk_level
    +risk_class
    +risk_level: int
    +risk_class: str
    +heat_map_html: str
    +mermaid_code: str
    +vector_id
    +severity_class
    +mermaid_code: str
    +server_id
    +server_name
    +network: str
    +network: str
    +base_score
    +score
    +vector_bonus
    +score
    --
    -__init__()
    +generate_attack_flow_diagram(threat_analysis, format, style): VisualDiagram
    +generate_timeline_diagram(threat_analysis, time_window, format): VisualDiagram
    +generate_risk_heat_map(servers, threat_analyses, format): VisualDiagram
    +generate_attack_tree_diagram(attack_vectors, format): VisualDiagram
    +generate_network_topology_diagram(environment_context, servers, format): VisualDiagram
    -_generate_mermaid_attack_flow(threat_analysis): str
    -_generate_html_timeline(threat_analysis, time_window): str
    -_generate_html_heat_map(servers, threat_analyses): str
    -_generate_mermaid_attack_tree(attack_vectors): str
    -_generate_mermaid_topology(environment_context, servers): str
    -_get_attack_flow_legend()
    -_get_attack_tree_legend()
    -_calculate_risk_score(threat_analysis): int
    -_get_risk_class(risk_score): str
    -_initialize_color_schemes()
    -_initialize_templates()
    -_generate_graphviz_attack_flow(threat_analysis): str
    -_generate_json_attack_flow(threat_analysis): str
    -_generate_mermaid_timeline(threat_analysis, time_window): str
    -_generate_json_timeline(threat_analysis, time_window): str
    -_generate_svg_heat_map(servers, threat_analyses): str
    -_generate_json_heat_map(servers, threat_analyses): str
    -_generate_graphviz_attack_tree(attack_vectors): str
    -_generate_json_attack_tree(attack_vectors): str
    -_generate_graphviz_topology(environment_context, servers): str
    -_generate_json_topology(environment_context, servers): str
  }

  class PayloadType {
    +COMMAND_INJECTION: str
    +SQL_INJECTION: str
    +XSS: str
    +PATH_TRAVERSAL: str
    +REVERSE_SHELL: str
    +PRIVILEGE_ESCALATION: str
    +DATA_EXFILTRATION: str
    +RECONNAISSANCE: str
    +PERSISTENCE: str
    +BUFFER_OVERFLOW: str
  }

  class PayloadComplexity {
    +BASIC: str
    +INTERMEDIATE: str
    +ADVANCED: str
    +EXPERT: str
  }

  class ProgrammingLanguage {
    +PYTHON: str
    +JAVASCRIPT: str
    +BASH: str
    +POWERSHELL: str
    +C: str
    +CPP: str
    +JAVA: str
    +PHP: str
    +RUBY: str
    +GO: str
    +SQL: str
  }

  class CodeSnippet {
    +title: str
    +description: str
    +language: ProgrammingLanguage
    +payload_type: PayloadType
    +complexity: PayloadComplexity
    +code: str
    +explanation: str
    +prerequisites
    +references
    +risk_level: str
    +obfuscation_level: str
    +evasion_techniques
    +detection_signatures
    +mitigation_notes
    +timestamp: datetime
    +items
    +items
    +items
    --
    +to_html(): str
    -_render_prerequisites(): str
    -_render_evasion_techniques(): str
    -_render_mitigation_notes(): str
  }

  class CodeSnippetGenerator {
    +snippets
    +payload_mappings
    +payload_types
    +snippet
    +stages
    +stage_code
    +combined_payload
    +obfuscated_code
    +obfuscated_snippet
    +evasive_code
    +evasion_snippet
    +generators
    +generator
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +code: str
    +obfuscated
    +obfuscated
    +encoded
    +evasion_code: str
    --
    -__init__()
    +generate_payload_for_capability(capability, tool_capabilities, complexity)
    +generate_attack_chain_payload(attack_vectors, tool_name): CodeSnippet
    +generate_obfuscated_payload(base_payload, obfuscation_level): CodeSnippet
    +generate_evasion_variant(base_payload, evasion_technique): CodeSnippet
    -_generate_payload_snippet(payload_type, tool_name, complexity)
    -_generate_command_injection(tool_name, complexity): CodeSnippet
    -_generate_sql_injection(tool_name, complexity): CodeSnippet
    -_generate_path_traversal(tool_name, complexity): CodeSnippet
    -_generate_reverse_shell(tool_name, complexity): CodeSnippet
    -_generate_data_exfiltration(tool_name, complexity): CodeSnippet
    -_generate_reconnaissance(tool_name, complexity): CodeSnippet
    -_generate_privilege_escalation(tool_name, complexity): CodeSnippet
    -_generate_persistence(tool_name, complexity): CodeSnippet
    -_generate_xss(tool_name, complexity): CodeSnippet
    -_generate_attack_stage(vector, stage_num): str
    -_apply_obfuscation(code, language, level): str
    -_apply_evasion_technique(code, language, technique): str
    -_initialize_templates()
    -_initialize_evasion_patterns()
  }

  class SystemInfo {
    +platform: str
    +python_version: str
    +memory_total: int
    +cpu_count: int
    +disk_usage
    +network_interfaces
    +running_processes
    +environment_variables
    +installed_packages
    +user_groups
    +system_uptime: float
    +security_features
    +platform_info
    +python_version
    +memory
    +memory_total
    +cpu_count
    +disk_usage
    +usage
    +network_interfaces
    +interface_info
    +running_processes
    +running_processes
    +running_processes
    +safe_env_vars
    +safe_prefixes
    +installed_packages
    +installed_packages
    +installed_packages
    +user_groups
    +user_groups
    +user_groups
    +system_uptime
    +security_features
    +result
    +result
    +result
    +av_processes
    +proc_name
    +result
    +result
    +result
    +encryption_tools
    +result
    --
    +{class} gather_system_info()
    -{static} _detect_firewall(): bool
    -{static} _detect_antivirus(): bool
    -{static} _detect_docker(): bool
    -{static} _detect_selinux(): bool
    -{static} _detect_apparmor(): bool
    -{static} _detect_encryption_tools(): bool
  }

  class ThreatContextBuilder {
    +system_info
    +mcp_servers
    +deployment_type
    +security_posture
    +data_sensitivity
    +network_exposure
    +user_privileges
    +compliance_requirements
    +context
    +system_info
    +deployment_type
    +security_posture
    +data_sensitivity
    +network_exposure
    +user_privileges
    +compliance_requirements
    +analysis
    +transport
    +server_metadata
    +current_time
    +cloud_indicators: int
    +remote_indicators: int
    +local_indicators: int
    +metadata_str
    +cloud_env_indicators
    +security_score: int
    +total_checks: int
    +security_features
    +system_security_checks
    +privileged_groups
    +security_ratio
    +high_sensitivity_indicators
    +medium_sensitivity_indicators
    +metadata_str
    +env_key_lower
    +external_servers: int
    +localhost_servers: int
    +addr
    +privileged_groups
    +elevated_groups
    +group_lower
    +user
    +requirements
    +compliance_indicators
    +metadata_str
    +env_key_lower
    +ip
    +basic_context
    +advanced_detection
    +enhanced_context
    +basic_context
    +enhanced_analysis
    +threat_multiplier: float
    +infra
    +security_env
    +security_maturity
    +network_arch
    +exposure_level
    +deployment_class
    +env_type
    +tech_stack
    +language_count
    +compliance_requirements
    +compliance_indicators
    +requirement_name
    +monitoring_capabilities
    --
    -__init__()
    +build_context(detection_results, system_info): EnvironmentContext
    +build_context_from_servers(mcp_servers, system_info): EnvironmentContext
    +analyze_deployment_environment(mcp_servers)
    -_get_cached_system_info(): SystemInfo
    -_analyze_deployment_type(mcp_servers, system_info): DeploymentType
    -_analyze_security_posture(mcp_servers, system_info): SecurityPosture
    -_analyze_data_sensitivity(mcp_servers, system_info): DataSensitivity
    -_analyze_network_exposure(mcp_servers, system_info): NetworkExposure
    -_analyze_user_privileges(system_info): UserPrivileges
    -_analyze_compliance_requirements(mcp_servers, system_info)
    -_is_public_ip(ip_address): bool
    -_get_default_context(): EnvironmentContext
    +build_enhanced_context(mcp_servers, system_info)
    -_build_enhanced_analysis(basic_context, advanced_detection)
  }

  class EnvironmentDetector {
    +system_info
    +infrastructure
    +security_environment
    +network_architecture
    +deployment_classification
    +technology_stack
    +deployment_patterns
    +environment_profile
    +detection_results
    +infrastructure
    +cloud_provider
    +virtualization
    +containers
    +hardware
    +security_env
    +network_arch
    +classification
    +dev_indicators
    +staging_indicators
    +prod_indicators
    +scores
    +tech_stack
    +processes
    +language_indicators
    +web_server_indicators
    +db_indicators
    +tech_stack
    +patterns
    +serverless_indicators
    +virtualization
    +vm_indicators
    +result
    +product_name
    +containers
    +container_files
    +container_processes
    +cpu_type: str
    +cpu_type: str
    +cpu_type: str
    +cpu_type: str
    +memory_profile: str
    +memory_gb
    +memory_profile: str
    +memory_profile: str
    +memory_profile: str
    +storage_type: str
    +total_disk_space
    +storage_type: str
    +processes_str
    +controls
    +score: int
    +total: int
    +control_count
    +ratio
    +capabilities
    +indicators
    +compliance_keywords
    +maturity_score: int
    +analyzed_interfaces
    +interface_analysis
    +addr
    +addr_analysis
    +interface_count
    +has_public_ip: bool
    +has_wildcard_binding: bool
    +addr
    +has_public_ip: bool
    +has_wildcard_binding: bool
    +security_features
    +vpn_processes
    +proxy_processes
    +lb_processes
    +monitoring
    +pcap_tools
    +indicators
    +dev_keywords
    +metadata_str
    +env_key_lower
    +dev_tools
    +indicators
    +staging_keywords
    +metadata_str
    +env_key_lower
    +indicators
    +prod_keywords
    +metadata_str
    +monitoring_tools
    +characteristics
    +metadata_str
    +framework_indicators
    +indicators
    +lb_processes
    +cluster_processes
    +autoscale_env_vars
    +cloud_indicators
    +profile
    +complexity_factors: int
    +risk_factors: int
    +confidence_factors
    +ip
    --
    -__init__()
    +detect_comprehensive_environment(mcp_servers, system_info)
    -_detect_infrastructure(system_info)
    -_analyze_security_environment(system_info)
    -_discover_network_architecture(system_info)
    -_classify_deployment_environment(mcp_servers, system_info)
    -_detect_technology_stack(mcp_servers, system_info)
    -_analyze_deployment_patterns(mcp_servers, system_info)
    -_detect_cloud_provider(system_info)
    -_detect_virtualization(system_info)
    -_detect_container_runtime(system_info)
    -_analyze_hardware_profile(system_info)
    -_check_process_indicators(indicators, processes): bool
    -_analyze_security_controls(system_info)
    -_determine_security_posture(security_env): str
    -_analyze_monitoring_capabilities(security_env)
    -_detect_compliance_indicators(system_info)
    -_assess_security_maturity(security_env): str
    -_analyze_network_interfaces(system_info)
    -_determine_network_topology(system_info): str
    -_assess_network_exposure_level(system_info): str
    -_detect_network_security_features(system_info)
    -_analyze_connectivity_patterns(system_info)
    -_detect_network_monitoring(system_info)
    -_analyze_development_indicators(mcp_servers, system_info)
    -_analyze_staging_indicators(mcp_servers, system_info)
    -_analyze_production_indicators(mcp_servers, system_info)
    -_analyze_environment_characteristics(env_type, system_info)
    -_analyze_mcp_technology_indicators(mcp_servers, tech_stack)
    -_analyze_scalability_indicators(system_info)
    -_determine_architecture_pattern(patterns): str
    -_analyze_deployment_strategy(mcp_servers, system_info): str
    -_build_environment_profile(infrastructure, security_environment, network_architecture, deployment_classification, technology_stack, deployment_patterns)
    -_calculate_detection_confidence(environment_profile): float
    -_get_default_detection_results()
    -_is_public_ip(ip_address): bool
  }

  class MCPCapabilityAnalyzer {
    +tool_name
    +tool_functions
    +capability_categories
    +risk_indicators
    +requires_privileges
    +external_access
    +risk_score
    +risk_surface
    +access_requirements
    +external_dependencies
    +capabilities
    +categories
    +function_lower
    +functions
    +function
    +metadata_str
    +potential_functions
    +function
    +generic_function
    +categories
    +indicators
    +base_score: float
    +category_weights
    +high_risk_indicators
    +risk_surface
    +min_privilege
    +auth_required
    +network_required: bool
    +file_access: bool
    +system_access: bool
    +min_privilege
    +network_required: bool
    +file_access: bool
    +system_access: bool
    +min_privilege
    +dependencies
    +common_services
    +function_name_lower
    +dependency
    +metadata_str
    +dependency
    +function_patterns
    +functions
    +matches
    +exclude_words
    +indicators
    +function_lower
    +security_patterns
    +function_lower
    +privilege_patterns
    +function_lower
    +external_patterns
    +security_relevant
    +risk_indicators
    +enhanced_func
    +high_risk_indicators
    +medium_risk_indicators
    +attack_vectors
    +attack_vector_mapping
    +scenarios
    +scenario_templates
    +controls
    +control_mapping
    +attack_surface
    +risk_indicators
    +function_vectors
    +attack_paths
    +function_names
    +attack_patterns
    +gaps
    +dangerous_functions
    +priorities
    +critical_gaps
    +tool_name
    +function_analysis
    +impact_categorization
    +privilege_assessment
    +attack_technique_mapping
    +exploitation_difficulty
    +threat_scenarios
    +threat_mapping
    +signatures
    +signature_analysis
    +param_analysis
    +param_str
    +impact_categories
    +impact_level: str
    +impact_level: str
    +impact_level: str
    +impact_level: str
    +impact_level: str
    +total_functions
    +impact_distribution
    +privilege_assessment
    +access_req
    +attack_techniques
    +technique_mappings
    +technique
    +category_techniques
    +unique_techniques
    +seen_techniques
    +tech_key
    +severity_order
    +difficulty_factors
    +func_count
    +overall_difficulty
    +overall_difficulty
    +difficulty_level: str
    +difficulty_level: str
    +difficulty_level: str
    +difficulty_level: str
    +difficulty_level: str
    +scenarios
    +scenario
    +combination_scenario
    +impact_score
    +ease_score
    +diversity_score
    +overall_score
    +confidence_factors
    +analyzed_funcs
    +total_funcs
    +metadata_score: float
    +param_str
    +high_risk_patterns
    +medium_risk_patterns
    +risk_indicators
    +prerequisites
    +techniques
    +category_mappings
    +technique
    +explanations
    +base_explanation
    +steps
    +impact
    +difficulty_score
    +indicators
    +mitigations
    --
    -__init__()
    +analyze_tool(mcp_server): ToolCapabilities
    +categorize_capabilities(tool_functions)
    +assess_risk_surface(capabilities): RiskSurface
    +build_environment_context(mcp_servers): EnvironmentContext
    -_extract_tool_functions(mcp_server)
    -_categorize_capabilities(tool_functions)
    -_identify_risk_indicators(tool_functions, mcp_server)
    -_assess_privilege_requirements(tool_functions): bool
    -_check_external_access(tool_functions, mcp_server): bool
    -_calculate_risk_score(capability_categories, risk_indicators, mcp_server): float
    -_build_risk_surface(tool_functions, mcp_server): RiskSurface
    -_build_access_requirements(tool_functions, mcp_server): AccessRequirements
    -_identify_external_dependencies(tool_functions, mcp_server)
    -_extract_functions_from_metadata(metadata_str)
    -_get_function_risk_indicators(function_name)
    -_function_requires_privileges(function_name): bool
    -_function_has_external_access(function_name): bool
    +identify_security_relevant_functions(tool_functions)
    -_calculate_function_security_risk(func, risk_indicators): str
    -_identify_function_attack_vectors(func, risk_indicators)
    -_generate_function_abuse_scenarios(func, risk_indicators)
    -_recommend_function_security_controls(func, risk_indicators)
    +analyze_attack_surface(tool_capabilities)
    -_identify_attack_paths(tool_capabilities)
    -_identify_security_gaps(tool_capabilities)
    -_prioritize_mitigations(attack_surface)
    -_create_minimal_capabilities(mcp_server): ToolCapabilities
    +map_capabilities_to_threats(tool_capabilities, environment_context)
    -_extract_function_signatures(tool_capabilities)
    -_categorize_security_impact(tool_capabilities, function_analysis)
    -_assess_privilege_requirements_detailed(tool_capabilities, environment_context)
    -_map_to_attack_techniques(tool_capabilities, function_analysis, impact_categorization)
    -_calculate_exploitation_difficulty(tool_capabilities, privilege_assessment, environment_context)
    -_generate_threat_scenarios(tool_capabilities, attack_techniques, exploitation_difficulty, environment_context)
    -_calculate_overall_threat_score(impact_categorization, exploitation_difficulty, technique_count): float
    -_calculate_mapping_confidence(tool_capabilities, function_analysis, environment_context): float
    -_assess_parameter_risk(param): str
    -_get_impact_justification(impact_level, analysis): str
    -_generate_exploitation_vector(func_name, analysis): str
    -_identify_prerequisites(analysis)
    -_assess_detection_difficulty(analysis): str
    -_get_category_specific_techniques(category, tool_capabilities)
    -_generate_difficulty_explanation(factors, level): str
    -_generate_attack_steps(technique, tool_capabilities)
    -_assess_scenario_impact(technique, tool_capabilities)
    -_calculate_scenario_likelihood(technique, exploitation_difficulty, environment_context): str
    -_generate_detection_indicators(technique)
    -_suggest_mitigations(technique, tool_capabilities)
    -_generate_combination_scenario(tool_capabilities, exploitation_difficulty, environment_context)
  }

  class ScenarioBuilder {
    +scenarios
    +threat_actors
    +actor_profile
    +scenario_template
    +scenario
    +scenarios
    +capability_categories
    +template_scores
    +score: int
    +best_template
    +scenario
    +risk_score: int
    +skill_weights
    +resource_weights
    +base_likelihood: float
    +actor_likelihood_modifiers
    +time_horizons
    +time_info
    +phases
    +phase_definitions
    +phase_def
    +phase
    +objectives
    +capability_categories
    +techniques
    +matching_functions
    +technique_lower
    +func_name_lower
    +technique_patterns
    +iocs
    +func_name
    +impact
    +scenario_name
    +impact_levels
    +current_level
    +current_index
    +opportunities
    +func_name
    +mitigations
    +scenario_name
    +lessons
    +scenario_name
    +tools
    +phase_tool_mappings
    +patterns
    +phase_techniques
    +base_techniques
    +advanced_keywords
    +base_techniques
    +base_durations
    +base_duration
    +duration_map
    +duration_map
    +duration_map
    +indicators
    +base_risks
    +base_risk
    +risk_levels
    +current_index
    +base_risk
    +risk_levels
    +current_index
    +base_risk
    +risk_weights
    +risk_score
    +likelihood_score
    --
    -__init__()
    +build_abuse_scenarios(tool_capabilities, environment_context, threat_actors, max_scenarios)
    -_select_scenario_template(tool_capabilities, actor_profile, environment_context)
    -_build_detailed_scenario(tool_capabilities, actor_profile, scenario_template, environment_context)
    -_calculate_scenario_risk(actor_profile, tool_capabilities, environment_context): str
    -_calculate_scenario_likelihood(actor_profile, environment_context): float
    -_generate_timeline(scenario_template, actor_profile)
    -_generate_attack_phases(scenario_template, tool_capabilities, actor_profile, environment_context)
    -_generate_objectives(actor_profile, tool_capabilities)
    -_map_techniques_to_capabilities(actor_profile, tool_capabilities)
    -_technique_matches_function(technique, func): bool
    -_generate_iocs(scenario_template, tool_capabilities)
    -_assess_business_impact(scenario_template, environment_context)
    -_identify_detection_opportunities(scenario_template, tool_capabilities)
    -_generate_mitigation_strategies(scenario_template, tool_capabilities)
    -_generate_lessons_learned(scenario_template, actor_profile)
    -_identify_tools_for_phase(phase_name, tool_capabilities)
    -_get_techniques_for_phase(phase_name, actor_profile)
    -_estimate_phase_duration(phase_name, actor_profile): str
    -_define_success_indicators(phase_name)
    -_assess_detection_risk(phase_name, actor_profile, environment_context): str
    -_prioritize_scenarios(scenarios)
    +calculate_priority_score()
  }

  class LikelihoodLevel {
    +VERY_LOW: str
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +VERY_HIGH: str
  }

  class AttackComplexity {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
  }

  class DetectionDifficulty {
    +EASY: str
    +MEDIUM: str
    +HARD: str
    +VERY_HARD: str
  }

  class TargetAttractiveness {
    +LOW: str
    +MEDIUM: str
    +HIGH: str
    +VERY_HIGH: str
  }

  class ThreatActorSophistication {
    +SCRIPT_KIDDIE: str
    +OPPORTUNISTIC: str
    +SKILLED: str
    +EXPERT: str
    +NATION_STATE: str
  }

  class AttackWindow {
    +IMMEDIATE: str
    +SHORT_TERM: str
    +MEDIUM_TERM: str
    +LONG_TERM: str
  }

  class EnvironmentalFactor {
    +factor_name: str
    +factor_type: str
    +impact_on_likelihood: float
    +confidence: float
    +description: str
    +mitigation_available: bool
  }

  class LikelihoodAssessment {
    +threat_id: str
    +tool_name: str
    +base_likelihood: float
    +adjusted_likelihood: float
    +likelihood_level: LikelihoodLevel
    +primary_threat_actors
    +attack_vectors
    +environmental_factors
    +target_attractiveness: TargetAttractiveness
    +attack_window: AttackWindow
    +confidence_score: float
    +assessment_rationale: str
    +key_risk_factors
    +mitigation_impact: float
    +assessment_timestamp: datetime
  }

  class ThreatLikelihoodMatrix {
    +tool_name: str
    +assessments
    +overall_risk_level: ThreatLevel
    +highest_likelihood_threats
    +recommended_monitoring
    +early_warning_indicators
    +assessment_summary: str
  }

  class LikelihoodAssessor {
    +threat_scenarios
    +assessments
    +assessment
    +overall_risk
    +high_likelihood
    +monitoring_recs
    +early_warnings
    +summary
    +matrix
    +relevant_actors
    +profiles
    +profile
    +base_prob
    +actor_adjustment
    +env_adjustment
    +tool_adjustment
    +adjusted_prob
    +scenarios
    +capability_scenarios
    +unique_scenarios
    +base_likelihood
    +threat_actors
    +attack_vectors
    +env_factors
    +env_adjustment
    +adjusted_likelihood
    +likelihood_level
    +attractiveness
    +attack_window
    +confidence
    +rationale
    +risk_factors
    +mitigation_impact
    +scenario_base_likelihood
    +base
    +risk_adjustment
    +scenario_actor_mapping
    +vectors
    +scenario_vector_mapping
    +vector_names
    +factors
    +attractiveness_score: int
    +sensitivity_scores
    +base_confidence: float
    +rationale_parts
    +positive_factors
    +negative_factors
    +risk_factors
    +scenario_risks
    +mitigation_impact: float
    +relevant_actors
    +template
    +activity_patterns
    +geo_focus
    +profile
    +sophistication_weight
    +base_score
    +score
    +profile
    +sophistication
    +base_multiplier
    +complexity_adjustment
    +adjustment: float
    +adjustment: float
    +very_high_count
    +high_count
    +avg_likelihood
    +high_likelihood
    +threat_name
    +recommendations
    +scenario
    +indicators
    +general_indicators
    +high_likelihood_count
    +medium_likelihood_count
    +summary_parts
    --
    -__init__()
    +assess_threat_likelihood(tool_capabilities, environment_context, threat_scenarios): ThreatLikelihoodMatrix
    +profile_threat_actors(tool_capabilities, environment_context)
    +calculate_attack_probability(attack_vector, tool_capabilities, environment_context, threat_actor): float
    -_initialize_threat_actor_profiles()
    -_initialize_attack_patterns()
    -_initialize_environmental_factors()
    -_initialize_complexity_models()
    -_generate_threat_scenarios(tool_capabilities)
    -_assess_scenario_likelihood(scenario, tool_capabilities, environment_context): LikelihoodAssessment
    -_calculate_base_likelihood(scenario, tool_capabilities): float
    -_identify_scenario_threat_actors(scenario)
    -_generate_scenario_attack_vectors(scenario, tool_capabilities)
    -_analyze_environmental_factors(scenario, environment_context)
    -_determine_likelihood_level(likelihood_score): LikelihoodLevel
    -_assess_target_attractiveness(scenario, tool_capabilities, environment_context): TargetAttractiveness
    -_determine_attack_window(scenario, threat_actors): AttackWindow
    -_calculate_likelihood_confidence(tool_capabilities, env_factors, vector_count): float
    -_generate_assessment_rationale(scenario, base_likelihood, env_factors, threat_actors): str
    -_identify_key_risk_factors(scenario, tool_capabilities, environment_context)
    -_calculate_mitigation_impact(scenario, environment_context): float
    -_identify_relevant_threat_actors(tool_capabilities, environment_context)
    -_create_detailed_threat_actor_profile(actor_type, tool_capabilities, environment_context): ThreatActorProfile
    -_calculate_actor_threat_score(profile): float
    -_calculate_actor_capability_adjustment(threat_actor, attack_vector): float
    -_calculate_environmental_adjustment(attack_vector, environment_context): float
    -_calculate_tool_specific_adjustment(attack_vector, tool_capabilities): float
    -_calculate_overall_risk_level(assessments): ThreatLevel
    -_identify_high_likelihood_threats(assessments)
    -_generate_monitoring_recommendations(assessments)
    -_generate_early_warning_indicators(assessments)
    -_create_assessment_summary(assessments, overall_risk): str
  }

}

package "src.hawkeye.detection.mcp_introspection" {
  class LegacyIntrospectionResult {
    +success: bool
    +server_name: str
    +server_version: str
    +protocol_version: str
    +tools
    +resources
    +capabilities
    +error_message
    +execution_time
  }

  class NodeJSCompatibilityLayer {
    +transport_type
    +script_content
    +start_time
    +server_config
    +result
    +execution_time
    +new_server_info
    +error_msg
    +execution_time
    +script_content
    +result
    +args_str
    +transport_type
    +config_data
    +legacy_tools
    +legacy_resources
    --
    -__init__(config)
    +generate_introspection_script(server_info, process_info): str
    +execute_introspection_script(script_content, server_info, process_info): LegacyIntrospectionResult
    +introspect_server_legacy(server_info, process_info): LegacyIntrospectionResult
    -_determine_transport_type(server_info, process_info): str
    -_convert_to_server_config(server_info, process_info): MCPServerConfig
    -_convert_to_legacy_result(new_server_info, execution_time): LegacyIntrospectionResult
  }

  class LegacyMCPIntrospector {
    +result
    +result
    --
    -__init__(config)
    +introspect_server(server_info, process_info)
    +generate_script(server_info, process_info): str
    +execute_script(script_content, server_info, process_info)
  }

  class PerformanceMetric {
    +name: str
    +value: float
    +timestamp: datetime
    +tags
    +metadata
  }

  class TimingMetric {
    +operation: str
    +start_time: float
    +end_time
    +duration
    +success: bool
    +error_message
    +tags
    --
    +finish(success, error_message)
  }

  class MetricsCollector {
    +metric
    +timing_metric
    +values
    +sorted_values
    +count
    +total_operations
    +total_errors
    +uptime
    +cutoff_time
    +operation_summary
    +timing_stats
    +duration_key
    +recent_metrics
    +recent_operations
    --
    -__init__(max_metrics)
    +record_metric(name, value, tags, metadata)
    +start_timing(operation, tags): TimingMetric
    +finish_timing(timing_metric, success, error_message)
    +increment_counter(name, value, tags)
    +set_gauge(name, value, tags)
    +get_counter(name): int
    +get_gauge(name)
    +get_histogram_stats(name)
    +get_operation_summary()
    +get_recent_metrics(minutes)
    +get_performance_report()
    +clear_metrics()
  }

  class PerformanceMonitor {
    +start_time
    +duration
    +durations
    --
    -__init__(logger)
    +record_metric(operation_name, duration)
    +get_stats(operation_name)
    +get_all_stats()
  }

  class TimingContext {
    +success
    +error_message
    --
    -__init__(metrics_collector, operation_name, tags)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
  }

  class IntrospectionConfig {
    +timeout: float
    +max_concurrent_servers: int
    +enable_detailed_analysis: bool
    +enable_risk_assessment: bool
    +aggregator_config
    +max_retries: int
    +enable_caching: bool
    +enable_fallback: bool
    --
    -__post_init__()
  }

  class MCPIntrospection {
    +mcp_client_config
    +start_time
    +cache_key
    +cached_result
    +loop
    +future
    +result
    +result
    +result
    +start_time
    +all_servers
    +successful_count: int
    +failed_count: int
    +server_info
    +error_server_info
    +overall_risk
    +introspection_time
    +result
    +server_info
    +command
    +risk_counts
    +error_server_info
    +cache_ttl
    +result
    +server_info
    --
    -__init__(config)
    +introspect_server(server_config): IntrospectionResult
    +introspect_multiple_servers(server_configs): IntrospectionResult
    -_introspect_single_server(server_config): MCPServerInfo
    -_create_server_command(server_config)
    -_calculate_overall_risk(risk_levels): RiskLevel
    -_create_error_result_simple(server_id, start_time, error_message): IntrospectionResult
    -_create_error_result(server_config, start_time, error_message): IntrospectionResult
    -_create_error_server_info(server_config, start_time, error_message): MCPServerInfo
    -_is_cache_valid(result): bool
    +clear_cache(server_id)
    +get_server_summary(server_id)
  }

  class MigrationConfig {
    +backup_enabled: bool
    +backup_directory: str
    +validate_migration: bool
    +preserve_old_config: bool
    +migration_log_level: str
  }

  class LegacyMCPConfig {
    +servers
    +nodejs_script_path
    +timeout_seconds: int
    +max_retries: int
    +enable_introspection: bool
  }

  class MigrationResult {
    +success: bool
    +migrated_servers: int
    +failed_servers: int
    +warnings
    +errors
    +backup_path
    +migration_timestamp: datetime
  }

  class ConfigurationMigrator {
    +result
    +legacy_config
    +migrated_config
    +validation_errors
    +backup_dir
    +config_file
    +timestamp
    +backup_filename
    +backup_path
    +data
    +data
    +content
    +data
    +data
    +migrated
    +migrated_server
    +migrated_server
    +errors
    +mcp_config
    +required_fields
    +server_errors
    +transport_errors
    +errors
    +required_fields
    +valid_transports
    +errors
    +valid_transports
    +output_file
    --
    -__init__(config)
    +migrate_configuration(legacy_config_path, output_config_path): MigrationResult
    -_create_backup(config_path): str
    -_load_legacy_config(config_path)
    -_migrate_config_structure(legacy_config, result)
    -_migrate_server_config(server_config)
    -_detect_transport_type(server_config): str
    -_validate_migrated_config(config)
    -_validate_server_config(server, index)
    -_validate_transport_config(transport)
    -_save_migrated_config(config, output_path)
    -_log_migration_summary(result)
  }

  class ConfigurationValidator {
    +errors
    +config
    +config
    +validation_errors
    +server_errors
    +errors
    +mcp_config
    +required_fields
    +errors
    +required_fields
    +valid_transports
    --
    -__init__()
    +validate_configuration(config_path)
    -_validate_config_structure(config)
    -_validate_server_configuration(server, index)
  }

  class FallbackStrategy {
    +SKIP: str
    +BASIC_INFO: str
    +CACHED_RESULT: str
    +HEURISTIC_ANALYSIS: str
    +MINIMAL_SAFE: str
    +RETRY_WITH_TIMEOUT: str
    +DEGRADED_SCAN: str
  }

  class FailureReason {
    +TIMEOUT: str
    +CONNECTION_ERROR: str
    +AUTHENTICATION_ERROR: str
    +PROTOCOL_ERROR: str
    +PERMISSION_ERROR: str
    +RESOURCE_ERROR: str
    +CONFIGURATION_ERROR: str
    +UNKNOWN_ERROR: str
  }

  class FallbackConfig {
    +primary_strategy: FallbackStrategy
    +secondary_strategy: FallbackStrategy
    +final_strategy: FallbackStrategy
    +enable_retry: bool
    +max_retries: int
    +retry_delay: float
    +retry_timeout_reduction: float
    +use_cached_results: bool
    +cache_expiry_hours: int
    +allow_stale_cache: bool
    +stale_cache_max_age_hours: int
    +enable_heuristic_analysis: bool
    +heuristic_confidence_threshold: float
    +enable_pattern_matching: bool
    +default_risk_level: RiskLevel
    +enable_conservative_defaults: bool
    +log_fallback_usage: bool
    +fallback_timeout: float
    +max_concurrent_fallbacks: int
  }

  class FallbackResult {
    +success: bool
    +strategy_used: FallbackStrategy
    +server_info
    +confidence_score: float
    +fallback_reason: str
    +original_error
    +processing_time: float
    +metadata
    --
    +is_degraded(): bool
  }

  class FallbackStatistics {
    +total_fallbacks: int
    +successful_fallbacks: int
    +failed_fallbacks: int
    +strategy_usage
    +failure_reasons
    +average_confidence: float
    +average_processing_time: float
    +cache_hit_rate: float
    --
    +success_rate(): float
  }

  class HeuristicAnalyzer {
    +confidence_factors
    +tools
    +resources
    +capabilities
    +risk_level
    +command_analysis
    +command_risk
    +risk_level: command_risk
    +transport_analysis
    +name_analysis
    +env_analysis
    +overall_confidence
    +server_info
    +minimal_info
    +analysis
    +command_lower
    +args_str
    +analysis
    +analysis
    +name_lower
    +tool_patterns
    +analysis
    +error_type
    --
    -__init__(config)
    +analyze_server(server_config, error_context)
    -_analyze_command(command, args)
    -_analyze_transport(transport_type)
    -_analyze_name(name)
    -_analyze_environment(server_config, error_context)
    -_create_minimal_server_info(server_config): MCPServerInfo
    -_load_tool_patterns()
    -_load_risk_patterns()
    -_load_capability_patterns()
  }

  class FallbackManager {
    +start_time
    +failure_reason
    +result
    +result
    +result
    +result
    +server_info
    +cache_key
    +age_hours
    +server_info
    +error_str
    +cache_key
    +total_successful
    +total_fallbacks
    +cache_hits
    +current_time
    +valid_entries: int
    +stale_entries: int
    +age_hours
    --
    -__init__(config)
    +handle_failed_introspection(server_config, original_error, error_context): FallbackResult
    -_try_strategy(strategy, server_config, original_error, error_context): FallbackResult
    -_skip_strategy(server_config, original_error): FallbackResult
    -_basic_info_strategy(server_config, original_error): FallbackResult
    -_cached_result_strategy(server_config, original_error): FallbackResult
    -_heuristic_analysis_strategy(server_config, original_error, error_context): FallbackResult
    -_minimal_safe_strategy(server_config, original_error): FallbackResult
    -_retry_strategy(server_config, original_error, error_context): FallbackResult
    -_degraded_scan_strategy(server_config, original_error, error_context): FallbackResult
    -_categorize_failure(error, context): FailureReason
    -_finalize_result(result, start_time): FallbackResult
    -_update_statistics(result)
    +get_statistics(): FallbackStatistics
    +clear_cache()
    +get_cache_info()
  }

  class MCPIntrospector {
    -__init__(config)
    +introspect_server(server_info, process_info)
  }

  class MCPClientConfig {
    +timeout: float
    +max_retries: int
    +retry_delay: float
    +enable_tool_testing: bool
    +enable_resource_enumeration: bool
    +enable_capability_detection: bool
    +client_info
    +allowed_tools
    +disallowed_tools
    +debug: bool
    --
    -__post_init__()
  }

  class MCPServerDefinition {
    +name: str
    +transport_type: str
    +command
    +args
    +url
    +env
    +headers
    +working_directory
  }

  class MCPClient {
    +server_config
    +logger
    +mcp_servers
    +transport_type
    +server_def
    +server_def
    +tools
    +server_tools
    +server_tools
    +filtered_tools
    +params
    +tools
    +start_time
    +server_id
    +temp_server_def
    +tools_data
    +tools
    +security_risks
    +mcp_tool
    +tool_risks
    +server_info
    +risk_level
    +duration
    +result
    +connection
    +connection
    +connection
    +metadata
    +transport_type
    +command
    +env
    +cwd
    +cwd: NoneType
    +process
    +stderr_output
    +headers
    +connector
    +session
    +session_id
    +init_request
    +url
    +url
    +session_id
    +session_id
    +response_data
    +response_text
    +connection
    +metadata
    +request
    +request_json
    +response_line
    +response
    +result
    +tools
    +request
    +url
    +url
    +headers
    +session_id
    +session_info
    +response_data
    +result
    +tools
    +normalized
    +normalized_tool
    +filtered
    +tool_name
    +connection
    +metadata
    +request
    +request_json
    +response_line
    +response
    +request
    +url
    +url
    +response_data
    +properties
    +risks
    +risk_indicators
    +tool_text
    +risk_level
    +risks
    +sensitive_patterns
    +high_risks
    +medium_risks
    --
    -__init__(config, server_config)
    +{class} from_config_file(config_path, config)
    +{class} from_dict(server_config, config)
    -_parse_server_config(server_config)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    -_convert_legacy_config(server_config): MCPServerDefinition
    -_normalize_tools(tools, server_name)
    -_filter_tools(tools)
    -_convert_tool_to_internal(tool_data): MCPTool
    -_convert_tool_parameters(input_schema)
    -_extract_required_params(input_schema)
    -_assess_tool_security_risks(tool)
    -_assess_resource_security_risks(resource)
    -_calculate_risk_level(security_risks, tools, resources): RiskLevel
    -_create_error_result(server_id, start_time, error_message): IntrospectionResult
  }

  class SyncMCPClient {
    +async_client
    +result
    +logger
    +start_time
    +logger
    --
    -__init__(config)
    +introspect_server(server_config): IntrospectionResult
    +close()
  }

  class RiskLevel {
    +CRITICAL: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +MINIMAL: str
    +UNKNOWN: str
  }

  class TransportType {
    +STDIO: str
    +SSE: str
    +HTTP: str
    +WEBSOCKET: str
    +UNKNOWN: str
  }

  class RiskCategory {
    +FILE_SYSTEM: str
    +NETWORK_ACCESS: str
    +CODE_EXECUTION: str
    +DATA_ACCESS: str
    +SYSTEM_MODIFICATION: str
    +AUTHENTICATION: str
    +ENCRYPTION: str
    +EXTERNAL_API: str
    +DATABASE: str
    +CLOUD_SERVICES: str
    +UNKNOWN: str
  }

  class SecurityCategory {
    +FILE_SYSTEM: str
    +NETWORK_ACCESS: str
    +CODE_EXECUTION: str
    +DATA_ACCESS: str
    +SYSTEM_ACCESS: str
    +AUTHENTICATION: str
    +ENCRYPTION: str
    +EXTERNAL_API: str
    +DATABASE: str
    +CLOUD_SERVICES: str
    +UNKNOWN: str
  }

  class ComplianceStatus {
    +COMPLIANT: str
    +NON_COMPLIANT: str
    +PARTIALLY_COMPLIANT: str
    +NOT_APPLICABLE: str
    +UNKNOWN: str
  }

  class ValidationError {
    -__init__(message, context, original_error)
  }

  class MCPCapabilities {
    +supports_tools: bool
    +supports_resources: bool
    +supports_prompts: bool
    +supports_logging: bool
    +supports_completion: bool
    +supports_sampling: bool
    +experimental_capabilities
    +custom_capabilities
    +protocol_version
    +server_version
    +standard_caps
    --
    +get_capability_count(): int
    +has_dangerous_capabilities(): bool
    +has_capability(capability): bool
  }

  class MCPToolParameter {
    +name: str
    +type: str
    +description: str
    +required: bool
    +default
    +enum
    +metadata
  }

  class MCPTool {
    +name: str
    +description: str
    +parameters
    +input_schema
    +metadata
    +risk_categories
    +risk_level: RiskLevel
    +security_notes
    +properties
    +required
    --
    +has_risk_category(category): bool
    +get_required_parameters()
    +get_optional_parameters()
  }

  class MCPResource {
    +uri: str
    +name: str
    +description: str
    +mime_type
    +metadata
    +risk_categories
    +risk_level: RiskLevel
    +security_notes
    +scheme
    --
    +get_uri_scheme(): str
    +is_local_resource(): bool
  }

  class MCPServerConfig {
    +server_id: str
    +name
    +command
    +executable
    +args
    +url
    +env
    +transport_type: TransportType
    +transport_config
    +timeout: float
    --
    +get_display_name(): str
  }

  class MCPCapability {
    +name: str
    +description: str
    +capabilities
    +metadata
  }

  class SecurityRisk {
    +category: str
    +severity: RiskLevel
    +description: str
    +details
    +mitigation: str
  }

  class SecurityFinding {
    +id: str
    +title: str
    +description: str
    +severity: RiskLevel
    +category: SecurityCategory
    +affected_components
    +mitigation: str
    +metadata
    --
    +is_high_severity(): bool
  }

  class ComplianceCheck {
    +check_id: str
    +name: str
    +description: str
    +status: ComplianceStatus
    +framework: str
    +control_id: str
    +evidence
    +metadata
    --
    +is_compliant(): bool
  }

  class PerformanceMetrics {
    +operation: str
    +duration: float
    +memory_usage: int
    +cpu_usage: float
    +network_io: int
    +disk_io: int
    +metadata
    --
    +is_performant(max_duration): bool
  }

  class TransportConfig {
    +transport_type: TransportType
    +command
    +args
    +env
    +url
    +timeout: float
    +metadata
    --
    +validate_stdio_config(): bool
    +validate_sse_config(): bool
  }

  class RiskAssessment {
    +target_id: str
    +target_type: str
    +overall_risk: RiskLevel
    +findings
    +compliance_checks
    +assessment_date: datetime
    +assessor: str
    +metadata
    --
    +get_findings_by_severity(severity)
    +get_findings_by_category(category)
  }

  class MCPServerInfo {
    +server_id: str
    +server_url
    +host
    +port
    +is_secure: bool
    +has_authentication: bool
    +discovery_timestamp: datetime
    +tools
    +resources
    +capabilities
    +security_risks
    +overall_risk_level: RiskLevel
    +metadata
    --
    +get_tool_count(): int
    +get_resource_count(): int
    +get_high_risk_tools()
    +get_capability_count(): int
  }

  class DiscoveryResult {
    +server_id: str
    +discovery_type: str
    +timestamp: datetime
    +duration: Any
    +success: bool
    +error
    +tools
    +resources
    +capabilities
    +security_risks
    +metadata
  }

  class IntrospectionResult {
    +timestamp: datetime
    +duration: Any
    +success: bool
    +servers
    +total_servers: int
    +successful_servers: int
    +failed_servers: int
    +overall_risk_level: RiskLevel
    +error
    +metadata
  }

  class MCPIntrospectionResult {
    +servers
    +scan_timestamp: datetime
    +scan_duration: float
    +total_servers: int
    +successful_introspections: int
    +failed_introspections: int
    +critical_risk_servers: int
    +high_risk_servers: int
    +medium_risk_servers: int
    +tools
    +categories
    --
    +update_statistics()
    +get_servers_by_risk(risk_level)
    +get_all_tools()
    +get_all_risk_categories()
    +to_dict()
  }

  class ErrorHandler {
    -__init__(logger)
    +handle_error(error, context)
    +log_warning(message, context)
    +log_info(message, context)
  }

  class ErrorSeverity {
    +CRITICAL: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +INFO: str
  }

  class ErrorCategory {
    +CONNECTION: str
    +TIMEOUT: str
    +AUTHENTICATION: str
    +PROTOCOL: str
    +VALIDATION: str
    +RESOURCE: str
    +PERMISSION: str
    +UNKNOWN: str
  }

  class ErrorContext {
    +operation: str
    +server_name
    +transport_type
    +attempt_number: int
    +start_time: float
    +additional_info
    --
    -__post_init__()
  }

  class MCPIntrospectionError {
    -__init__(message, category, severity, context, original_error)
    +to_dict()
  }

  class ConnectionError {
    -__init__(message, context, original_error)
  }

  class TimeoutError {
    -__init__(message, context, original_error)
  }

  class ProtocolError {
    -__init__(message, context, original_error)
  }

  class AsyncBatch {
    +results
    +batch
    +tasks
    +task
    +batch_results
    --
    -__init__(max_concurrency, batch_size, logger)
  }

}

package "src.hawkeye.detection.mcp_introspection.optimization" {
  class PoolOptimizationConfig {
    +enable_adaptive_sizing: bool
    +min_pool_size: int
    +max_pool_size: int
    +target_utilization: float
    +scaling_factor: float
    +enable_load_balancing: bool
    +load_balance_strategy: str
    +health_check_interval: float
    +enable_connection_warming: bool
    +warm_connections_count: int
    +enable_predictive_scaling: bool
    +request_pattern_window: int
    +enable_circuit_breaker: bool
    +circuit_breaker_threshold: int
    +circuit_breaker_timeout: float
    +enable_connection_affinity: bool
  }

  class ConnectionMetrics {
    +connection_id: str
    +response_times: deque
    +error_count: int
    +success_count: int
    +last_error_time
    +health_score: float
    +load_factor: float
    +total
    --
    +add_response_time(response_time)
    +add_success()
    +add_error()
    +average_response_time(): float
    +error_rate(): float
  }

  class CircuitBreaker {
    -__init__(threshold, timeout)
    +record_success()
    +record_failure()
    +can_execute(): bool
  }

  class OptimizedConnectionPool {
    +base_stats
    +avg_health_score: float
    +avg_response_time: float
    +total_errors: int
    +health_scores
    +avg_health_score
    +response_times
    +avg_response_time
    --
    -__init__(config)
    +get_optimization_stats()
  }

  class MemoryOptimizationLevel {
    +MINIMAL: str
    +STANDARD: str
    +AGGRESSIVE: str
    +MAXIMUM: str
  }

  class MemoryConfig {
    +optimization_level: MemoryOptimizationLevel
    +max_memory_mb: int
    +warning_threshold_mb: int
    +cleanup_threshold_mb: int
    +enable_gc_optimization: bool
    +gc_threshold_0: int
    +gc_threshold_1: int
    +gc_threshold_2: int
    +force_gc_interval: float
    +enable_memory_monitoring: bool
    +monitoring_interval: float
    +track_memory_allocations: bool
    +max_allocation_traces: int
    +enable_cache_management: bool
    +max_cache_entries: int
    +cache_cleanup_interval: float
    +enable_data_compression: bool
    +enable_weak_references: bool
    +enable_object_pooling: bool
    +enable_leak_detection: bool
    +leak_detection_interval: float
    +leak_threshold_mb: int
  }

  class MemorySnapshot {
    +timestamp: float
    +total_memory_mb: float
    +available_memory_mb: float
    +process_memory_mb: float
    +memory_percent: float
    +gc_stats
    +object_counts
    +top_allocations
    --
    +memory_pressure(): str
  }

  class MemoryStatistics {
    +peak_memory_mb: float
    +average_memory_mb: float
    +total_gc_collections: int
    +objects_collected: int
    +cleanup_operations: int
    +memory_warnings: int
    +memory_errors: int
    +leak_detections: int
    +cache_evictions: int
    --
    +update_peak_memory(current_mb)
  }

  class MemoryEfficientCache {
    +current_time
    +oldest_key
    +count
    +current_time
    +expired_keys
    --
    -__init__(max_size, ttl)
    +get(key)
    +put(key, value)
    +clear(): int
    +cleanup_expired(): int
    +size(): int
  }

  class ObjectPool {
    -__init__(factory, max_size)
    +acquire(): Any
    +release(obj)
    +clear()
    +stats()
  }

  class MemoryProfiler {
    +current_time
    +memory
    +process
    +process_memory
    +gc_stats
    +object_counts
    +top_allocations
    +snapshot
    +top_stats
    +filename
    +snapshot
    +cutoff_time
    +recent_snapshots
    +memory_values
    --
    -__init__(config)
    +start_tracking()
    +stop_tracking()
    +take_snapshot(): MemorySnapshot
    +get_memory_trend(minutes)
  }

  class GarbageCollectionOptimizer {
    +initial_objects
    +collected
    +final_objects
    +objects_freed
    +stats
    +stats
    --
    -__init__(config)
    +optimize_gc_settings()
    +force_garbage_collection()
    +restore_original_settings()
    +get_gc_statistics()
  }

  class MemoryLeakDetector {
    +current_objects
    +leaks
    +current_count
    +growth
    +leak_info
    --
    -__init__(config)
    +set_baseline()
    +check_for_leaks()
    +reset_baseline()
    +get_leak_history()
  }

  class MemoryOptimizer {
    +snapshot
    +expired
    +gc_stats
    +leaks
    +dead_refs
    +cleanup_stats
    +gc_stats
    +initial_weak_refs
    +ref
    +snapshot
    +current_usage
    +initial_snapshot
    +start_time
    +final_snapshot
    +duration
    +memory_delta
    --
    -__init__(config)
    +start_optimization()
    +stop_optimization()
    -_start_monitoring()
    -_stop_monitoring()
    -_monitor_loop()
    -_cleanup_loop()
    -_cleanup_weak_references()
    +force_cleanup()
    +get_object_pool(name, factory, max_size): ObjectPool
    +add_weak_reference(obj, callback): weakref.ref
    +get_current_memory_usage()
    +get_optimization_statistics()
    +memory_context(operation_name)
  }

  class CacheStrategy {
    +LRU: str
    +LFU: str
    +FIFO: str
    +TTL_ONLY: str
  }

  class CacheConfig {
    +enabled: bool
    +default_ttl: float
    +max_size: int
    +strategy: CacheStrategy
    +server_info_ttl: float
    +tools_ttl: float
    +resources_ttl: float
    +capabilities_ttl: float
    +cleanup_interval: float
    +enable_compression: bool
    +enable_persistence: bool
    +persistence_file
  }

  class CacheEntry {
    +key: str
    +value: Any
    +created_at: float
    +last_accessed: float
    +access_count: int
    +ttl: float
    +compressed: bool
    +size_bytes: int
    --
    -__post_init__()
    -_calculate_size(): int
    +is_expired(): bool
    +touch()
  }

  class CacheStatistics {
    +hits: int
    +misses: int
    +evictions: int
    +expired_entries: int
    +total_size_bytes: int
    +average_access_time: float
    +cache_efficiency: float
    +total
    --
    +hit_rate(): float
  }

  class CacheKeyGenerator {
    +key_parts
    +key_string
    --
    +{static} generate_key(): str
    +{static} server_info_key(): str
    +{static} tools_key(): str
  }

  class ResultCache {
    +start_time
    +entry
    +access_time
    +ttl
    +entry
    +key
    +key
    +key
    +key
    +key_to_evict: NoneType
    +key_to_evict
    +key_to_evict
    +key_to_evict
    +key_to_evict
    +entry
    +current_time
    +expired_keys
    +alpha: float
    +hit_rate
    +memory_efficiency
    --
    -__init__(config)
    +get(key)
    +put(key, value, ttl)
    +get_server_info(server_config)
    +put_server_info(server_config, server_info)
    +get_tools(server_config)
    +put_tools(server_config, tools)
    +get_statistics(): CacheStatistics
    -_update_access_tracking(key)
    -_evict_entry()
    -_remove_entry(key)
    -_cleanup_expired_entries()
    -_start_cleanup_thread()
    +cleanup_loop()
    -_update_average_access_time(access_time)
    -_calculate_cache_efficiency(): float
    +hit_rate(): float
    +size(): int
    +memory_usage(): int
  }

  class ScalingConfig {
    +enable_batch_processing: bool
    +batch_size: int
    +max_batch_size: int
    +adaptive_batch_sizing: bool
    +batch_timeout: float
    +max_workers: int
    +worker_scaling_factor: float
    +adaptive_worker_scaling: bool
    +worker_timeout: float
    +enable_resource_monitoring: bool
    +max_memory_usage_mb: int
    +max_cpu_usage_percent: float
    +resource_check_interval: float
    +enable_result_streaming: bool
    +enable_early_termination: bool
    +failure_threshold_percent: float
    +enable_priority_queuing: bool
    +enable_load_balancing: bool
    +enable_circuit_breaker: bool
    +enable_backpressure: bool
    +backpressure_threshold: int
  }

  class BatchMetrics {
    +batch_id: str
    +server_count: int
    +start_time: float
    +end_time
    +successful_scans: int
    +failed_scans: int
    +timeout_scans: int
    +total_duration: float
    +average_scan_time: float
    +memory_usage_mb: float
    +cpu_usage_percent: float
    +total
    +total_scans
    --
    +success_rate(): float
    +is_complete(): bool
    +complete_batch()
  }

  class ScalingStatistics {
    +total_servers_processed: int
    +total_batches_processed: int
    +successful_scans: int
    +failed_scans: int
    +timeout_scans: int
    +average_batch_size: float
    +average_batch_duration: float
    +peak_memory_usage_mb: float
    +peak_cpu_usage_percent: float
    +total_processing_time: float
    +throughput_servers_per_second: float
    +total
    --
    +overall_success_rate(): float
  }

  class ResourceMonitor {
    +memory_usage
    +cpu_usage
    +timestamp
    +alert
    +alert
    +current
    --
    -__init__(config)
    +start_monitoring()
    +stop_monitoring()
    -_monitor_loop()
    +get_current_usage()
    +should_throttle(): bool
    +get_resource_history()
  }

  class BatchProcessor {
    +batches
    +max_workers
    +batch_futures
    +completed_batches: int
    +future
    +batch_id
    +results
    +batches
    +batch_size
    +batch_servers
    +batch_id
    +batch_size
    +batch_size
    +batch_size
    +current_usage
    +batch_size
    +batch_size
    +batch_metrics
    +results
    +failure_rate
    +start_time
    +result
    +duration
    +current_usage
    +completed_batches
    +total_servers
    +total_successful
    +total_failed
    +total_timeout
    +avg_batch_size
    +avg_batch_duration
    +avg_success_rate
    --
    -__init__(config, introspection)
    +process_servers_in_batches(servers, progress_callback)
    -_create_batches(servers)
    -_calculate_optimal_batch_size(total_servers): int
    -_process_batch(batch_id, servers)
    +get_batch_statistics()
  }

  class LargeScaleOptimizer {
    +all_results
    +total_batches: int
    +completed_batches: int
    +error_type
    +base_stats
    --
    -__init__(scaling_config, introspection_config, pool_config, cache_config)
    +optimize_large_scan(servers, progress_callback)
    -_update_statistics(batch_results)
    -_finalize_statistics()
    +get_optimization_statistics()
    +optimization_context()
  }

}

package "src.hawkeye.detection.mcp_introspection.transport" {
  class RetryStrategy {
    +EXPONENTIAL: str
    +LINEAR: str
    +FIXED: str
    +FIBONACCI: str
  }

  class CircuitState {
    +CLOSED: str
    +OPEN: str
    +HALF_OPEN: str
  }

  class RetryConfig {
    +max_attempts: int
    +base_delay: float
    +max_delay: float
    +strategy: RetryStrategy
    +backoff_multiplier: float
    +jitter: bool
    +jitter_range: float
    +failure_threshold: int
    +recovery_timeout: float
    +half_open_max_calls: int
  }

  class RetryState {
    +attempt_count: int
    +total_delay: float
    +last_attempt
    +last_error
    +consecutive_failures: int
    +circuit_state: CircuitState
    +circuit_opened_at
    +half_open_calls: int
  }

  class RetryManager {
    +delay
    +delay
    +delay
    +delay
    +delay
    +delay
    +jitter_amount
    +jitter
    +delay
    +retryable_errors
    +time_since_open
    +result
    +delay
    +now
    +recent_failures
    --
    -__init__(config, logger)
    +calculate_delay(attempt): float
    -_fibonacci(n): int
    +should_retry(error): bool
    -_should_attempt_recovery(): bool
    +record_attempt(error)
    +reset()
    +get_stats()
    -__repr__(): str
  }

  class StdioTransportHandler {
    +command
    +args
    +env
    +cwd
    +session
    +command_path
    +dangerous_patterns
    +command
    +args
    +validate_command
    --
    -__init__(timeout, max_retries, retry_delay, logger)
    -_validate_command(command, args): bool
    +get_server_info()
    -__repr__(): str
  }

  class TransportError {
  }

  class ConnectionTimeoutError {
  }

  class ConnectionFailedError {
  }

  class ConnectionError {
  }

  class TimeoutError {
  }

  class BaseTransportHandler {
    +last_error: NoneType
    +last_error
    +last_error
    --
    -__init__(timeout, max_retries, retry_delay, logger)
    +is_connected(): bool
    +get_connection_info()
  }

  class StreamableHTTPTransportHandler {
    +base_url
    +headers
    +auth
    +verify_ssl
    +proxy
    +streaming
    +auth_headers
    +all_headers
    +connector
    +session
    +parsed
    +parts
    +headers
    +key_header
    +credentials
    +connector
    +test_headers
    +auth_headers
    +test_endpoints
    +endpoints
    +common_paths
    +connector
    +url
    +base_url
    +test_connection
    +discover_endpoints
    +endpoints
    --
    -__init__(timeout, max_retries, retry_delay, logger)
    -_validate_url(url): bool
    -_prepare_auth_headers(auth)
    +get_server_info()
    -__repr__(): str
  }

  class SSETransportHandler {
    +url
    +headers
    +verify_ssl
    +proxy
    +connector
    +session
    +parsed
    +parts
    +connector
    +url
    +test_connection
    --
    -__init__(timeout, max_retries, retry_delay, logger)
    -_validate_url(url): bool
    +get_server_info()
    -__repr__(): str
  }

  class TransportFactory {
    -_handlers
    +transport_type
    +handler_class
    +handler_kwargs
    +transport_str
    +url
    +parsed
    +transport_type
    +handler
    +transport_type
    +handler
    +transport_type
    +connect_params
    +connect_params
    +connect_params
    +supported
    --
    -__init__(logger)
    +create_handler(transport_type): BaseTransportHandler
    +auto_detect_transport(config): TransportType
    +create_from_config(config): BaseTransportHandler
    +validate_config(config): bool
    +get_supported_transports()
    +register_handler(transport_type, handler_class)
    -__repr__(): str
  }

  class ValidationSeverity {
    +ERROR: str
    +WARNING: str
    +INFO: str
  }

  class ValidationIssue {
    +severity: ValidationSeverity
    +field: str
    +message: str
    +suggestion
  }

  class TransportConfigValidator {
    +issues
    +transport_type
    +url
    +issues
    +required
    +issues
    +command
    +args
    +env
    +issues
    +url
    +headers
    +sensitive_headers
    +issues
    +base_url
    +auth
    +valid_auth_keys
    +auth_keys
    +issues
    +parsed
    +issues
    +timeout
    +max_retries
    +issues
    +verify_ssl
    +sensitive_fields
    +issues
    +recommended
    +issues
    +error_count
    +warning_count
    +info_count
    --
    -__init__(logger)
    +validate_config(config, transport_type)
    -_detect_transport_type(config)
    -_validate_required_fields(config, transport_type)
    -_validate_stdio_config(config)
    -_validate_sse_config(config)
    -_validate_http_config(config)
    -_validate_url(url, field_name)
    -_validate_common_fields(config)
    -_validate_security(config, transport_type)
    -_validate_performance(config, transport_type)
    +is_valid(config, transport_type): bool
    +get_validation_summary(issues)
  }

  class ErrorSeverity {
    +CRITICAL: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +INFO: str
  }

  class ErrorCategory {
    +NETWORK: str
    +AUTHENTICATION: str
    +CONFIGURATION: str
    +PROTOCOL: str
    +TIMEOUT: str
    +PERMISSION: str
    +RESOURCE: str
    +UNKNOWN: str
  }

  class ErrorContext {
    +timestamp: datetime
    +operation: str
    +transport_type: str
    +error_type: str
    +error_message: str
    +severity: ErrorSeverity
    +category: ErrorCategory
    +details
    +stack_trace
    +recovery_suggestions
    --
    -__post_init__()
  }

  class TransportErrorHandler {
    +details
    +error_type
    +error_message
    +suggestions
    +context
    +pattern_key
    +message_lower
    +severity
    +suggestions
    +log_level
    +log_level
    +log_level
    +log_level
    +log_level
    +message
    +details_str
    +suggestions_str
    +context
    +category_counts
    +severity_counts
    +recent_errors
    --
    -__init__(logger)
    +classify_error(error, operation, transport_type, details): ErrorContext
    -_classify_error_type(error, message)
    -_generate_recovery_suggestions(error, category, transport_type)
    +log_error(context)
    +handle_error(error, operation, transport_type, details, raise_error): ErrorContext
    +get_error_stats()
    +get_recent_errors(limit)
    +clear_history()
  }

  class PoolStats {
    +total_connections: int
    +active_connections: int
    +idle_connections: int
    +failed_connections: int
    +total_requests: int
    +successful_requests: int
    +failed_requests: int
    +average_response_time: float
    +created_at: float
  }

  class ConnectionInfo {
    +handler: BaseTransportHandler
    +created_at: float
    +last_used: float
    +use_count: int
    +is_active: bool
    +connection_id: str
    --
    -__post_init__()
  }

  class ConnectionPool {
    +conn_id: NoneType
    +start_time
    +conn_id
    +connection
    +response_time
    +handler
    +current_time
    +conn_id
    +conn_info
    +conn_info
    +conn_info
    +current_time
    +to_remove
    +conn_info
    +idle_time
    +alpha: float
    +stats
    +unhealthy_connections
    --
    -__init__(max_connections, max_idle_time, cleanup_interval, connection_timeout, logger)
    -_update_average_response_time(response_time)
    +get_stats(): PoolStats
    +add_connection_callback(on_created, on_destroyed)
  }

}

package "src.hawkeye.detection.mcp_introspection.risk" {
  class ThreatCategory {
    +PRIVILEGE_ESCALATION: str
    +DATA_EXFILTRATION: str
    +LATERAL_MOVEMENT: str
    +DENIAL_OF_SERVICE: str
    +CODE_INJECTION: str
    +CONFIGURATION_TAMPERING: str
    +CREDENTIAL_THEFT: str
    +SUPPLY_CHAIN: str
    +INFORMATION_DISCLOSURE: str
    +UNAUTHORIZED_ACCESS: str
  }

  class AttackVector {
    +TOOL_ABUSE: str
    +RESOURCE_MANIPULATION: str
    +PROTOCOL_EXPLOITATION: str
    +CONFIGURATION_WEAKNESS: str
    +TRANSPORT_INTERCEPTION: str
    +AUTHENTICATION_BYPASS: str
    +INPUT_VALIDATION: str
    +DEPENDENCY_CONFUSION: str
  }

  class ThreatVector {
    +vector_id: str
    +name: str
    +description: str
    +category: ThreatCategory
    +attack_vector: AttackVector
    +likelihood: float
    +impact: RiskLevel
    +affected_assets
    +prerequisites
    +mitigations
    +references
  }

  class ThreatModel {
    +server_id: str
    +server_name
    +model_timestamp: datetime
    +threat_vectors
    +overall_threat_level: RiskLevel
    +critical_threats: int
    +high_threats: int
    +medium_threats: int
    +low_threats: int
    --
    +add_threat_vector(threat)
    +get_threats_by_category(category)
    +get_threats_by_attack_vector(attack_vector)
    +get_high_likelihood_threats(threshold)
    -_update_statistics()
  }

  class ThreatModelingEngine {
    +model
    +capability_threats
    +tool_threats
    +resource_threats
    +combination_threats
    +models
    +model
    +threats
    +capability_name
    +threat
    +threats
    +tool_name
    +tool_desc
    +threat
    +param_threats
    +threats
    +resource_uri
    +resource_name
    +threat
    +threats
    +has_file_tools
    +has_network_tools
    +has_exec_tools
    +threat
    +threat
    +threats
    +param_name
    +threat
    +threat
    --
    -__init__()
    +generate_threat_model(server_info): ThreatModel
    +generate_threat_models(servers)
    -_analyze_capability_threats(server_info)
    -_analyze_tool_threats(tools)
    -_analyze_resource_threats(resources)
    -_analyze_combination_threats(server_info)
    -_analyze_tool_parameter_threats(tool)
    -_initialize_threat_templates()
    -_initialize_capability_threats()
    -_initialize_tool_threats()
    -_initialize_resource_threats()
  }

  class ReportFormat {
    +JSON: str
    +HTML: str
    +MARKDOWN: str
    +CSV: str
    +PDF: str
  }

  class ReportLevel {
    +SUMMARY: str
    +DETAILED: str
    +COMPREHENSIVE: str
  }

  class RiskSummary {
    +total_servers: int
    +total_risks: int
    +critical_risks: int
    +high_risks: int
    +medium_risks: int
    +low_risks: int
    +minimal_risks: int
    +average_risk_score: float
    +highest_risk_server
    +most_common_risk_category
  }

  class ServerRiskReport {
    +server_id: str
    +server_name
    +server_url
    +assessment_timestamp: datetime
    +overall_risk_level: RiskLevel
    +risk_score: float
    +total_risks: int
    +risk_breakdown
    +category_breakdown
    +security_risks
    +threat_vectors
    +schema_risks
    +recommendations
    +mitigation_priorities
  }

  class ComprehensiveRiskReport {
    +report_id: str
    +generation_timestamp: datetime
    +assessment_period: str
    +report_level: ReportLevel
    +summary: RiskSummary
    +server_reports
    +risk_trends
    +threat_landscape
    +recommendations
    +executive_summary: str
    +technical_details
  }

  class RiskReporter {
    +report_id
    +server_reports
    +server_report
    +summary
    +threat_landscape
    +risk_trends
    +recommendations
    +executive_summary
    +technical_details
    +report
    +summary_lines
    +all_risks
    +risk_breakdown
    +category_breakdown
    +category
    +overall_risk_level
    +overall_risk_level
    +severities
    +overall_risk_level
    +overall_risk_level
    +overall_risk_level
    +overall_risk_level
    +recommendations
    +mitigation_priorities
    +total_servers
    +total_risks
    +critical_risks
    +high_risks
    +medium_risks
    +low_risks
    +minimal_risks
    +risk_scores
    +average_risk_score
    +highest_risk_server: NoneType
    +highest_risk_report
    +highest_risk_server
    +all_categories
    +most_common_risk_category: NoneType
    +category_counts
    +most_common_risk_category
    +all_threats
    +threat_categories
    +attack_vectors
    +high_likelihood_threats
    +risk_distribution
    +risk_scores
    +recommendations
    +high_risk_servers
    +server_names
    +lines
    +details
    +recommendations
    +critical_risks
    +categories
    +high_likelihood_threats
    +critical_schema_risks
    +priorities
    +critical_risks
    +high_risks
    +categories
    +report_dict
    +json_content
    +lines
    +markdown_content
    +html_content
    +risk_class
    +output
    +writer
    +csv_content
    --
    -__init__()
    +generate_comprehensive_report(servers, threat_models, risk_scores, schema_analyses, report_level): ComprehensiveRiskReport
    +export_report(report, format, output_path): str
    +generate_server_summary(server_report): str
    -_generate_server_report(server, threat_model, risk_score, schema_analysis): ServerRiskReport
    -_generate_risk_summary(server_reports): RiskSummary
    -_analyze_threat_landscape(threat_models)
    -_analyze_risk_trends(server_reports)
    -_generate_global_recommendations(server_reports, summary)
    -_generate_executive_summary(summary, recommendations): str
    -_generate_technical_details(server_reports, report_level)
    -_generate_server_recommendations(server, risks, threat_model, risk_score, schema_analysis)
    -_generate_mitigation_priorities(risks)
    -_export_json(report, output_path): str
    -_export_markdown(report, output_path): str
    -_export_html(report, output_path): str
    -_export_csv(report, output_path): str
    -_convert_report_to_dict(report)
  }

  class PolicyAction {
    +ALLOW: str
    +WARN: str
    +BLOCK: str
    +QUARANTINE: str
    +AUDIT: str
  }

  class PolicyScope {
    +GLOBAL: str
    +SERVER: str
    +TOOL: str
    +RESOURCE: str
    +CAPABILITY: str
  }

  class RiskThreshold {
    +critical: float
    +high: float
    +medium: float
    +low: float
    +info: float
    +thresholds
    --
    +get_level(score): RiskLevel
    +validate(): bool
  }

  class PolicyRule {
    +id: str
    +name: str
    +description: str
    +scope: PolicyScope
    +risk_categories
    +risk_levels
    +action: PolicyAction
    +enabled: bool
    +conditions
    +metadata
    +context_value
    +operator
    +value
    --
    +matches(risk, context): bool
    -_evaluate_condition(context_value, condition_value): bool
  }

  class PolicyViolation {
    +rule_id: str
    +rule_name: str
    +risk: SecurityRisk
    +action: PolicyAction
    +timestamp: datetime
    +context
    +resolved: bool
    +resolution_notes
  }

  class RiskPolicyEngine {
    +default_rules
    +violations
    +context
    +violation
    +all_violations
    +violations
    +violations
    +action_priority
    +most_restrictive
    +action
    +cutoff_time
    +original_count
    +cleared_count
    +config
    +threshold_data
    +thresholds
    +rule
    +config
    +rule_data
    +enabled_rules
    +disabled_rules
    +action_counts
    +scope_counts
    +unresolved_violations
    --
    -__init__(config_path)
    -_load_default_policies()
    +add_rule(rule): bool
    +remove_rule(rule_id): bool
    +enable_rule(rule_id): bool
    +disable_rule(rule_id): bool
    +evaluate_risk(risk, context)
    +evaluate_risks(risks, context)
    +get_action_for_risk(risk, context): PolicyAction
    +is_allowed(risk, context): bool
    +get_violations(resolved)
    +resolve_violation(violation_index, notes): bool
    +clear_violations(older_than)
    +update_thresholds(thresholds): bool
    +load_policies(config_path): bool
    +save_policies(config_path): bool
    +get_policy_summary()
  }

  class PolicyManager {
    +engine_name
    +engine
    +engine
    +engine
    +engine
    +config_path
    +summary
    --
    -__init__(config_dir)
    -_load_engines()
    +get_engine(name)
    +create_engine(name, config_path): RiskPolicyEngine
    +remove_engine(name): bool
    +list_engines()
    +evaluate_with_engine(engine_name, risks, context)
    +is_allowed_by_engine(engine_name, risk, context): bool
    +save_all_engines(): bool
    +get_global_summary()
  }

  class ToolRiskPattern {
    +FILE_OPERATIONS: str
    +NETWORK_ACCESS: str
    +CODE_EXECUTION: str
    +SYSTEM_COMMANDS: str
    +DATABASE_ACCESS: str
    +AUTHENTICATION: str
    +ENCRYPTION: str
    +EXTERNAL_API: str
    +CLOUD_SERVICES: str
    +DATA_MANIPULATION: str
  }

  class RiskIndicator {
    +pattern: str
    +category: RiskCategory
    +severity: RiskLevel
    +description: str
    +confidence: float
  }

  class ToolRiskAnalyzer {
    +risks
    +name_risks
    +desc_risks
    +param_risks
    +schema_risks
    +metadata_risks
    +unique_risks
    +results
    +risks
    +risks
    +risk_levels
    +risks
    +categories
    +category
    +risks
    +name
    +risk
    +risks
    +description
    +risk
    +risks
    +param_risks
    +risks
    +param_name
    +param_desc
    +risk
    +risk
    +risk
    +risks
    +properties
    +schema_risks
    +risk
    +risks
    +risk
    +risks
    +dangerous_keys
    +risk
    +unique_risks
    +seen_risks
    +signature
    +patterns
    --
    -__init__()
    +analyze_tool(tool)
    +analyze_tools(tools)
    +get_tool_risk_level(tool): RiskLevel
    +get_risk_categories(tool)
    -_analyze_tool_name(tool)
    -_analyze_tool_description(tool)
    -_analyze_tool_parameters(tool)
    -_analyze_parameter(param, tool_name)
    -_analyze_input_schema(tool)
    -_analyze_schema_property(prop_name, prop_schema, tool_name)
    -_analyze_tool_metadata(tool)
    -_deduplicate_risks(risks)
    -_initialize_risk_patterns()
    -_initialize_parameter_risks()
    -_initialize_schema_risks()
  }

  class SchemaRiskType {
    +INJECTION_VULNERABILITY: str
    +PATH_TRAVERSAL: str
    +COMMAND_INJECTION: str
    +SQL_INJECTION: str
    +SCRIPT_INJECTION: str
    +UNSAFE_DESERIALIZATION: str
    +BUFFER_OVERFLOW: str
    +INFORMATION_DISCLOSURE: str
    +PRIVILEGE_ESCALATION: str
    +WEAK_VALIDATION: str
  }

  class ParameterRiskLevel {
    +CRITICAL: str
    +HIGH: str
    +MEDIUM: str
    +LOW: str
    +MINIMAL: str
  }

  class SchemaRisk {
    +risk_type: SchemaRiskType
    +severity: RiskLevel
    +parameter_name: str
    +parameter_type: str
    +description: str
    +evidence
    +recommendations
    +cwe_ids
  }

  class SchemaAnalysisResult {
    +tool_name: str
    +total_parameters: int
    +risky_parameters: int
    +schema_risks
    +overall_risk_level: RiskLevel
    +security_score: float
    --
    +get_risks_by_type(risk_type)
    +get_critical_risks()
  }

  class SchemaAnalyzer {
    +result
    +param_risks
    +schema_risks
    +results
    +result
    +risks
    +uri_risks
    +metadata_risks
    +risks
    +param_name
    +param_type
    +risk
    +type_info
    +risk
    +injection_risks
    +validation_risks
    +risks
    +properties
    +prop_risks
    +risk
    +risks
    +prop_type
    +risk
    +risk
    +pattern_risks
    +risks
    +uri
    +risk
    +risk
    +risks
    +risks
    +param_name
    +risk
    +risk
    +risk
    +risks
    +has_constraints
    +risk
    +risks
    +redos_patterns
    +risk
    +severities
    +score: float
    +risky_percentage
    --
    -__init__()
    +analyze_tool_schema(tool): SchemaAnalysisResult
    +analyze_multiple_tools(tools)
    +analyze_resource_schema(resource)
    -_analyze_parameter_schema(param, tool_name)
    -_analyze_input_schema(schema, tool_name)
    -_analyze_schema_property(prop_name, prop_schema, tool_name)
    -_analyze_resource_uri(resource)
    -_analyze_resource_metadata(resource)
    -_check_injection_vulnerabilities(param, tool_name)
    -_check_validation_weaknesses(param)
    -_analyze_regex_pattern(prop_name, pattern)
    -_calculate_overall_risk_level(risks): RiskLevel
    -_calculate_security_score(result): float
    -_initialize_risk_patterns()
    -_initialize_dangerous_types()
    -_initialize_injection_patterns()
    -_initialize_validation_patterns()
  }

  class ScoreComponent {
    +SEVERITY: str
    +LIKELIHOOD: str
    +IMPACT: str
    +EXPOSURE: str
    +EXPLOITABILITY: str
    +BUSINESS_IMPACT: str
    +TECHNICAL_IMPACT: str
    +COMPLIANCE_IMPACT: str
  }

  class ScoreMethod {
    +CVSS_LIKE: str
    +WEIGHTED_AVERAGE: str
    +MULTIPLICATIVE: str
    +MAXIMUM: str
    +CUSTOM: str
  }

  class ScoreBreakdown {
    +total_score: float
    +severity_score: float
    +likelihood_score: float
    +impact_score: float
    +exposure_score: float
    +exploitability_score: float
    +business_impact_score: float
    +technical_impact_score: float
    +compliance_impact_score: float
    +method: ScoreMethod
    +confidence: float
    --
    +get_component_scores()
  }

  class CompositeRiskScore {
    +server_id: str
    +overall_score: float
    +risk_level: RiskLevel
    +score_breakdown: ScoreBreakdown
    +contributing_risks
    +threat_vectors
    +risk_profiles
    +recommendations
    --
    +get_risk_level_from_score(): RiskLevel
    +get_priority_rank(): int
  }

  class RiskScorer {
    +all_risks
    +severity_score
    +likelihood_score
    +impact_score
    +exposure_score
    +exploitability_score
    +business_impact_score
    +technical_impact_score
    +compliance_impact_score
    +overall_score
    +breakdown
    +composite_score
    +scores
    +threat_model
    +server_profiles
    +score
    +severity_weights
    +total_weight
    +risk_count_factor
    +high_severity_count
    +severity_factor
    +avg_likelihood
    +category_impacts
    +max_impact: float
    +category
    +impact
    +max_impact
    +max_impact
    +capability_multiplier: float
    +exposure: float
    +tool_count
    +resource_count
    +exploitable_categories
    +max_exploitability: float
    +category
    +exploitability
    +max_exploitability
    +max_exploitability
    +high_likelihood_threats
    +max_exploitability
    +business_categories
    +max_business_impact: float
    +category
    +impact
    +max_business_impact
    +max_business_impact
    +technical_categories
    +max_technical_impact: float
    +category
    +impact
    +max_technical_impact
    +max_technical_impact
    +compliance_categories
    +max_compliance_impact: float
    +category
    +impact
    +max_compliance_impact
    +max_compliance_impact
    +base_score
    +temporal_score
    +environmental_score
    +weights
    +weighted_sum
    +factors
    +normalized_factors
    +product: float
    +confidence: float
    +recommendations
    --
    -__init__(method)
    +calculate_server_score(server_info, threat_model, risk_profiles): CompositeRiskScore
    +calculate_multiple_scores(servers, threat_models, risk_profiles)
    +rank_servers_by_risk(scores)
    -_calculate_severity_score(risks): float
    -_calculate_likelihood_score(risks, threat_model): float
    -_calculate_impact_score(risks, server_info): float
    -_calculate_exposure_score(server_info): float
    -_calculate_exploitability_score(risks, threat_model): float
    -_calculate_business_impact_score(risks, risk_profiles): float
    -_calculate_technical_impact_score(risks, server_info): float
    -_calculate_compliance_impact_score(risks, risk_profiles): float
    -_calculate_composite_score(severity, likelihood, impact, exposure, exploitability, business_impact, technical_impact, compliance_impact): float
    -_calculate_confidence(risks, threat_model): float
    -_score_to_risk_level(score): RiskLevel
    -_generate_score_recommendations(score, breakdown)
    -_initialize_component_weights()
    -_initialize_severity_mappings()
    -_initialize_category_weights()
  }

  class RiskClassification {
    +CRITICAL_INFRASTRUCTURE: str
    +HIGH_IMPACT: str
    +MEDIUM_IMPACT: str
    +LOW_IMPACT: str
    +INFORMATIONAL: str
  }

  class RiskDomain {
    +SECURITY: str
    +PRIVACY: str
    +COMPLIANCE: str
    +OPERATIONAL: str
    +BUSINESS: str
    +TECHNICAL: str
  }

  class RiskProfile {
    +category: RiskCategory
    +classification: RiskClassification
    +domain: RiskDomain
    +severity: RiskLevel
    +count: int
    +risks
    +threat_vectors
    +severity_weights
    +total_weight
    +avg_weight
    --
    +add_risk(risk)
    +add_threat_vector(threat)
    +get_average_severity(): RiskLevel
  }

  class CategoryAnalysis {
    +category: RiskCategory
    +total_risks: int
    +severity_distribution
    +domain_distribution
    +classification_distribution
    +top_risks
    +recommendations
  }

  class RiskCategorizer {
    +profiles
    +category
    +classification
    +domain
    +categories
    +analysis
    +category
    +domain
    +classification
    +total_categories
    +analysis
    +domains
    +classifications
    +severity_weight
    +category_weight
    +classification_weight
    +risk_category
    +severity
    +category
    +category
    +domain_mapping
    +weights
    +weights
    +weights
    +recommendations
    +critical_count
    +high_count
    --
    -__init__()
    +categorize_risks(risks)
    +categorize_threat_vectors(threats)
    +analyze_risk_distribution(risks)
    +generate_category_analysis(category, risks): CategoryAnalysis
    +get_risk_priorities(risks)
    +priority_score(): float
    -_determine_risk_category(risk): RiskCategory
    -_determine_risk_classification(risk): RiskClassification
    -_determine_risk_domain(risk): RiskDomain
    -_get_severity_weight(severity): float
    -_get_category_weight(category): float
    -_get_classification_weight(classification): float
    -_generate_category_recommendations(category, analysis)
    -_initialize_category_rules()
    -_initialize_classification_rules()
    -_initialize_domain_rules()
  }

}

package "src.hawkeye.detection.mcp_introspection.discovery" {
  class AggregatorConfig {
    +timeout: float
    +enable_parallel_discovery: bool
    +enable_risk_aggregation: bool
    +tool_discovery_config
    +resource_discovery_config
    +capability_assessment_config
    --
    -__post_init__()
  }

  class ServerInfoAggregator {
    +server_id
    +server_url
    +start_time
    +cached_info
    +discovery_start
    +discovery_results
    +server_info
    +aggregation_time
    +results
    +all_tools
    +all_resources
    +all_capabilities
    +all_security_risks
    +tools_result
    +resources_result
    +capabilities_result
    +aggregated_risks
    +all_security_risks: aggregated_risks
    +overall_risk
    +server_name: NoneType
    +server_version: NoneType
    +server_name
    +server_version
    +aggregation_time
    +metadata
    +server_info
    +aggregated_risks
    +file_tools
    +file_resources
    +network_tools
    +network_resources
    +seen_risks
    +deduplicated_risks
    +risk_key
    +risk_counts
    +cache_ttl
    --
    -__init__(config)
    +aggregate_server_info(server_config, server_id, server_url): MCPServerInfo
    -_sequential_discovery(server_config, server_id)
    -_aggregate_results(server_id, server_url, discovery_results, start_time): MCPServerInfo
    -_aggregate_risks(tools, resources, capabilities, existing_risks)
    -_calculate_overall_risk(security_risks): RiskLevel
    -_create_error_discovery_result(server_id, discovery_type, error_message): DiscoveryResult
    -_create_error_server_info(server_id, server_url, start_time, error_message): MCPServerInfo
    -_is_cache_valid(server_info): bool
    +clear_cache(server_id)
  }

  class CapabilityAssessmentConfig {
    +timeout: float
    +max_retries: int
    +retry_delay: float
    +enable_risk_assessment: bool
    +high_risk_capabilities
    --
    -__post_init__()
  }

  class CapabilityAssessment {
    +server_id
    +start_time
    +cache_key
    +cached_result
    +start_assessment
    +capabilities_data
    +mcp_capabilities
    +security_risks
    +mcp_capabilities
    +risks
    +assessment_time
    +result
    +last_error: NoneType
    +request
    +result
    +server_command
    +result
    +capabilities
    +last_error: e
    +url
    +url
    +headers
    +config_headers
    +response
    +result
    +command
    +process
    +request_json
    +response
    +capabilities
    +server_name: NoneType
    +server_version: NoneType
    +server_info
    +server_name
    +server_version
    +cap_data
    +capability_indicators
    +metadata
    +risks
    +cap_lower
    +severity
    +cache_ttl
    +cache_key
    --
    -__init__(config)
    +assess_capabilities(server_config, server_id): DiscoveryResult
    -_get_capabilities_with_retry(server_config)
    -_communicate_via_http(server_config, request)
    -_build_server_command(server_config)
    -_communicate_with_server(server_command, request)
    -_convert_capabilities(capabilities_data): MCPCapability
    -_assess_capability_risks(capabilities_data, mcp_capabilities)
    -_is_cache_valid(result): bool
    -_create_error_result(server_id, start_time, error_message): DiscoveryResult
    +clear_cache(server_id)
  }

  class ResourceDiscoveryConfig {
    +timeout: float
    +max_retries: int
    +retry_delay: float
    +enable_schema_analysis: bool
    +enable_risk_assessment: bool
    +dangerous_patterns
    --
    -__post_init__()
  }

  class ResourceDiscovery {
    +server_id
    +start_time
    +cache_key
    +cached_result
    +start_discovery
    +resources_data
    +mcp_resources
    +security_risks
    +mcp_resource
    +risks
    +discovery_time
    +result
    +last_error: NoneType
    +request
    +result
    +server_command
    +result
    +resources
    +last_error: e
    +url
    +url
    +headers
    +config_headers
    +response
    +result
    +command
    +process
    +request_json
    +response
    +risks
    +uri_lower
    +name_lower
    +uri_scheme
    +mime_lower
    +executable_types
    +cache_ttl
    +cache_key
    --
    -__init__(config)
    +discover_resources(server_config, server_id): DiscoveryResult
    -_list_resources_with_retry(server_config)
    -_communicate_via_http(server_config, request)
    -_build_server_command(server_config)
    -_communicate_with_server(server_command, request)
    -_convert_resource(resource_data): MCPResource
    -_extract_uri_scheme(uri): str
    -_assess_resource_risks(resource)
    -_is_cache_valid(result): bool
    -_create_error_result(server_id, start_time, error_message): DiscoveryResult
    +clear_cache(server_id)
  }

  class ToolDiscoveryConfig {
    +timeout: float
    +max_retries: int
    +retry_delay: float
    +enable_schema_analysis: bool
    +enable_risk_assessment: bool
    +dangerous_patterns
    --
    -__post_init__()
  }

  class ToolDiscovery {
    +server_id
    +start_time
    +cache_key
    +cached_result
    +start_discovery
    +tools_data
    +mcp_tools
    +security_risks
    +mcp_tool
    +risks
    +discovery_time
    +result
    +last_error: NoneType
    +request
    +result
    +server_command
    +result
    +tools
    +last_error: e
    +url
    +url
    +session_id
    +headers
    +config_headers
    +session_info
    +response
    +result
    +init_request
    +headers
    +config_headers
    +response
    +session_id: NoneType
    +session_id
    +response_data
    +command
    +process
    +request_json
    +response
    +parameters
    +input_schema
    +parameters
    +parameters
    +properties
    +required
    +parameter
    +risks
    +tool_name_lower
    +desc_lower
    +param_name_lower
    +param_name_lower
    +cache_ttl
    +cache_key
    --
    -__init__(config)
    +discover_tools(server_config, server_id): DiscoveryResult
    -_list_tools_with_retry(server_config)
    -_communicate_via_http(server_config, request)
    -_initialize_mcp_session(url, server_config)
    -_build_server_command(server_config)
    -_communicate_with_server(server_command, request)
    -_convert_tool(tool_data): MCPTool
    -_extract_parameters(schema)
    -_assess_tool_risks(tool)
    -_is_cache_valid(result): bool
    -_create_error_result(server_id, start_time, error_message): DiscoveryResult
    +clear_cache(server_id)
  }

}

package "src.hawkeye.scanner" {
  class ScanTask {
    +target: ScanTarget
    +port: int
    +scanner_func: Callable
    +task_id: str
    --
    -__post_init__()
  }

  class ConnectionPool {
    +future
    +futures
    +future
    +futures
    +result
    +result
    +cancelled_count: int
    +stats
    +current_time
    +result
    +result
    --
    -__init__(settings)
    -__enter__()
    -__exit__(exc_type, exc_val, exc_tb)
    +start()
    +shutdown(wait)
    +submit_scan(task)
    +submit_multiple_scans(tasks)
    +wait_for_completion(timeout)
    +get_results_as_completed(futures, timeout)
    +cancel_all_tasks(): int
    +get_statistics()
    -_execute_scan_task(task): ScanResult
    -_task_completed(task_id, future)
    +is_active(): bool
    +get_active_task_count(): int
    +get_completed_results()
    +get_failed_tasks()
    +clear_results()
  }

  class PortState {
    +OPEN: str
    +CLOSED: str
    +FILTERED: str
    +UNKNOWN: str
  }

  class ScanType {
    +TCP_CONNECT: str
    +TCP_SYN: str
    +UDP: str
    +SERVICE_DETECTION: str
  }

  class ScanTarget {
    +host: str
    +ports
    +scan_types
    --
    -__post_init__()
    -_validate_host()
    -_validate_ports()
    +is_ipv6(): bool
    +is_ipv4(): bool
  }

  class ServiceInfo {
    +name
    +version
    +banner
    +product
    +extra_info
    +confidence: float
    +parts
    +result
    --
    -__str__(): str
  }

  class ScanResult {
    +target: ScanTarget
    +port: int
    +state: PortState
    +scan_type: ScanType
    +timestamp: float
    +response_time
    +service_info
    +error
    +raw_data
    +result
    --
    +is_open(): bool
    +has_service_info(): bool
    +to_dict(): Dict
  }

  class BaseScanner {
    +results
    +result
    +error_result
    +stats
    +sock
    +sock
    +addr_info
    +ips
    --
    -__init__(settings)
    +scan_port(target, port): ScanResult
    +scan_target(target)
    +get_scan_type(): ScanType
    +get_results()
    +get_open_ports()
    +get_scan_statistics(): Dict
    +clear_results()
    -_create_socket(target): socket.socket
    -_resolve_hostname(hostname)
  }

  class ScannerError {
  }

  class ScanTimeoutError {
  }

  class InvalidTargetError {
  }

  class ServiceSignature {
    +name: str
    +pattern: str
    +confidence: float
    +version_pattern
    +product_pattern
    +ports
    --
    -__post_init__()
  }

  class ServiceFingerprinter {
    +best_match: NoneType
    +best_confidence: float
    +match
    +confidence
    +best_confidence: confidence
    +best_match: signature
    +service_info
    +version_match
    +product_match
    +sock
    +result
    +http_request
    +response
    +service_info
    +version_match
    +server_match
    +server_info
    +version_match
    +version_match
    +powered_by_match
    +powered_by
    +well_known_ports
    --
    -__init__(settings)
    -_load_signatures()
    +analyze_banner(banner, port)
    -_extract_service_info(signature, banner, port): ServiceInfo
    +probe_http_service(target, port)
    -_analyze_http_response(response, port): ServiceInfo
    +identify_service_by_port(port)
  }

  class UDPScanner {
    +start_time
    +sock
    +test_data: bytes
    +response_time
    +response_time
    +response_time
    +response_time
    +sock
    +sock
    +probe_data
    +start_time
    +sock
    +response_time
    +service_info
    +result
    +probes
    --
    -__init__(settings)
    +scan_port(target, port): ScanResult
    +get_scan_type(): ScanType
    -_create_udp_socket(target): socket.socket
    +scan_with_service_probe(target, port): ScanResult
    -_get_service_probe(port): bytes
    -_analyze_udp_response(response, port)
  }

  class TCPScanner {
    +start_time
    +sock
    +result
    +response_time
    +state
    +state
    +response_time
    +response_time
    +response_time
    +timeout
    +sock
    +result
    +banner_data
    +banner
    +sock
    +result
    +http_request
    +response
    +response_str
    +result
    +banner
    +fingerprinter
    +service_info
    +http_response
    --
    -__init__(settings)
    +scan_port(target, port): ScanResult
    +get_scan_type(): ScanType
    +grab_banner(target, port, timeout)
    +test_http_service(target, port)
    +scan_with_banner_grab(target, port): ScanResult
  }

  class RateLimitConfig {
    +requests_per_second: float
    +burst_size: int
    +window_size: float
    --
    -__post_init__()
  }

  class TokenBucket {
    +now
    +elapsed
    +start_time
    +elapsed
    +tokens_needed
    +sleep_time
    +sleep_time
    +now
    +elapsed
    --
    -__init__(rate, capacity)
    +consume(tokens): bool
    +wait_for_tokens(tokens, timeout): bool
    +get_available_tokens(): float
  }

  class SlidingWindowRateLimiter {
    +now
    +cutoff_time
    +start_time
    +elapsed
    +oldest_request
    +sleep_time
    +sleep_time
    +sleep_time: float
    +now
    +cutoff_time
    --
    -__init__(rate, window_size)
    +is_allowed(): bool
    +wait_until_allowed(timeout): bool
    +get_current_rate(): float
  }

  class RateLimiter {
    +start_time
    +success
    +remaining_timeout: NoneType
    +elapsed
    +remaining_timeout
    +success
    +wait_time
    +token_allowed
    +window_allowed
    +success
    +stats
    +old_rate
    +available_tokens
    +token_wait: float
    +tokens_needed
    +token_wait
    +current_rate
    +window_wait: float
    +oldest_request
    +window_wait
    +window_wait
    +window_wait: float
    --
    -__init__(settings)
    +acquire(timeout): bool
    +try_acquire(): bool
    +get_statistics()
    +reset_statistics()
    +update_rate(new_rate)
    +get_estimated_wait_time(): float
  }

  class TargetEnumerator {
    +ports
    +targets
    +resolved_ips
    +ports
    +network
    +scan_types
    +ports
    +start_addr
    +end_addr
    +scan_types
    +current: start_addr
    +ports
    +scan_types
    +resolved_ips
    +ports
    +scan_types
    +line
    +scan_types
    +addr_info
    +ips
    +ips
    +start_port
    +end_port
    +common_ports
    --
    -__init__(settings)
    +enumerate_targets(target, ports)
    +enumerate_from_cidr(cidr, ports)
    +enumerate_from_range(start_ip, end_ip, ports)
    +enumerate_from_list(hosts, ports)
    +enumerate_localhost(ports)
    +enumerate_from_file(filename, ports)
    -_get_enabled_scan_types()
    -_resolve_host(host)
    +get_port_range(start_port, end_port)
    +get_common_ports()
    +validate_target(target): bool
  }

}

package "src.hawkeye.utils" {
  class HawkEyeLogger {
    +console_handler
    +formatter
    +formatter
    +log_file
    +file_handler
    +formatter
    +formatter
    --
    -__init__()
    +configure(): logging.Logger
    -_configure_structlog()
    -_add_console_handler()
    -_add_file_handler()
    +get_logger(name): logging.Logger
  }

  class AuditLogger {
    +audit_file
    +audit_handler
    +formatter
    --
    -__init__()
    -_configure_audit_logger()
    +log_scan_start(target, user)
    +log_scan_complete(target, findings_count, user)
    +log_detection_event(target, service_type, user)
    +log_security_event(event_type, details, user)
  }

}

package "src.hawkeye.config" {
  class ScanSettings {
    +max_threads: int
    +timeout_seconds: int
    +retry_attempts: int
    +rate_limit_requests: int
    +default_ports
    +port_range_start: int
    +port_range_end: int
    +enable_tcp_scan: bool
    +enable_udp_scan: bool
    +enable_ipv6: bool
    --
    +{class} validate_port_range(v, info)
  }

  class Config {
    +env_prefix: str
    +case_sensitive: bool
    +env_nested_delimiter: str
    +env_file: str
    +extra: str
  }

  class DetectionSettings {
    +enable_process_enum: bool
    +enable_config_discovery: bool
    +enable_docker_inspect: bool
    +enable_handshake_verify: bool
    +handshake_timeout: int
    +max_depth: int
    +config_file_patterns
  }

  class MCPIntrospectionSettings {
    +connection_timeout: float
    +max_retries: int
    +retry_delay: float
    +max_connections: int
    +max_idle_time: float
    +cleanup_interval: float
    +enable_tool_discovery: bool
    +enable_resource_discovery: bool
    +enable_capability_assessment: bool
    +enable_dynamic_risk_analysis: bool
    +enable_schema_analysis: bool
    +risk_analysis_timeout: float
    +enable_result_caching: bool
    +cache_ttl: int
    +cache_max_size: int
    +stdio_timeout: float
    +sse_timeout: float
    +http_timeout: float
    +enable_async_processing: bool
    +max_concurrent_introspections: int
  }

  class AssessmentSettings {
    +enable_cvss_scoring: bool
    +risk_threshold: float
    +check_default_configs: bool
    +check_weak_auth: bool
    +check_transport_security: bool
    +check_public_access: bool
  }

  class ReportingSettings {
    +default_format: str
    +enable_executive_summary: bool
    +output_directory: Path
    +timestamp_files: bool
    +include_raw_data: bool
    +max_findings_per_report: int
  }

  class AISettings {
    +provider: str
    +fallback_provider: str
    +openai_api_key
    +openai_model: str
    +openai_max_tokens: int
    +openai_temperature: float
    +openai_timeout: int
    +anthropic_api_key
    +anthropic_model: str
    +anthropic_max_tokens: int
    +anthropic_temperature: float
    +anthropic_timeout: int
    +local_llm_endpoint: str
    +local_llm_model: str
    +local_llm_timeout: int
    +cache_enabled: bool
    +cache_ttl: int
    +max_cost_per_analysis: float
    +debug_logging: bool
  }

  class LoggingSettings {
    +log_level: str
    +console_log_level: str
    +file_log_level: str
    +log_file
    +max_log_size_mb: int
    +log_backup_count: int
    +enable_structured_logging: bool
    +enable_color_logging: bool
  }

  class HawkEyeSettings {
    +app_name: str
    +app_version: str
    +debug: bool
    +scan: ScanSettings
    +detection: DetectionSettings
    +mcp_introspection: MCPIntrospectionSettings
    +assessment: AssessmentSettings
    +reporting: ReportingSettings
    +ai: AISettings
    +logging: LoggingSettings
    +require_authorization: bool
    +audit_trail: bool
  }

}

package "src.hawkeye.reporting" {
  class XMLReporter {
    +start_time
    +success: bool
    +xml_content
    +output_file
    +result
    +result: xml_content
    +success: bool
    +generation_time
    +root
    +metadata_elem
    +summary_elem
    +stats_elem
    +scan_summary_elem
    +detection_summary_elem
    +risk_summary_elem
    +introspection_summary_elem
    +scan_section
    +scan_elem
    +target_elem
    +service_elem
    +fingerprints_elem
    +fp_elem
    +detection_section
    +detection_elem
    +server_elem
    +process_elem
    +cmdline_elem
    +data_elem
    +item_elem
    +assessment_section
    +assessment_elem
    +findings_elem
    +finding_elem
    +vulns_elem
    +vuln_elem
    +pipeline_section
    +pipeline_elem
    +stats_elem
    +best_server_elem
    +risk_elem
    +list_elem
    +errors_elem
    +warnings_elem
    +introspection_section
    +servers_elem
    +server_elem
    +capabilities_elem
    +cap_elem
    +cap_dict
    +cap_dict: capabilities
    +cap_dict
    +capability_count: int
    +capability_count
    +has_dangerous: bool
    +has_dangerous
    +port
    +transport_type
    +server_type
    +version
    +tool_count: int
    +tool_count
    +tool_count
    +resource_count: int
    +resource_count
    +resource_count
    +capability_count: int
    +capability_count
    +capability_count
    +risk_level
    +risk_score
    +security_risks
    +discovery_timestamp
    +tools
    +tools_elem
    +tool_elem
    +parameters: NoneType
    +parameters
    +parameters
    +params_elem
    +param_elem
    +resources
    +resources_elem
    +resource_elem
    +recommendations_elem
    +rec_elem
    +rough_string
    +reparsed
    --
    -__init__(settings, pretty_print, encoding)
    +get_format(): ReportFormat
    +generate_report(data, output_path): str
    -_generate_xml_content(data): str
    -_add_metadata_section(parent, metadata)
    -_add_summary_section(parent, data)
    -_add_scan_results_section(parent, scan_results)
    -_add_detection_results_section(parent, detection_results)
    -_add_assessment_results_section(parent, assessment_results)
    -_add_pipeline_results_section(parent, pipeline_results)
    -_add_introspection_section(parent, data)
    -_add_mcp_server_details(parent, server)
    -_add_recommendations_section(parent, recommendations)
    -_prettify_xml(element): str
    -_save_xml_file(content, output_path)
    +validate_xml_output(xml_content): bool
  }

  class PipelineToReportConverter {
    +metadata
    +detection_results
    +mcp_servers
    +introspection_data
    +introspection_summary
    +recommendations
    +report_data
    +total_introspected
    +successful_introspections
    +failed_introspections
    +total_tools
    +total_resources
    +total_capabilities
    +risk_counts
    +risk_level
    +risk_level
    +tool_categories
    +tool_dict
    +name
    +description
    +total_duration
    +recommendations
    +high_risk_servers
    +code_execution_tools
    +tool_dict
    +file_access_tools
    +tool_dict
    +failed_count
    --
    -__init__()
    +convert_pipeline_results(pipeline_results, report_title, report_type, report_format): ReportData
    -_generate_introspection_summary(pipeline_results, mcp_servers): IntrospectionSummary
    -_generate_recommendations(pipeline_results, mcp_servers)
  }

  class ThreatAnalyzer {
    +ATTACK_SCENARIOS
    +ATTACK_CHAINS
    +detection_results
    +detected_servers
    +attack_vectors
    +abuse_scenarios
    +attack_chains
    +mitigation_strategies
    +detection_indicators
    +threat_levels
    +compliance_impact
    +detected_servers
    +method_str
    +process_data
    +cmdline
    +server_path
    +attack_vectors
    +scenario
    +scenarios
    +server_scenarios
    +applicable_chains
    +required_tools
    +levels
    +threat_level
    +overall: str
    +overall: str
    +overall: str
    +overall: str
    +target_hosts
    +sorted_hosts
    +strategies
    +indicators
    +impact
    +scenarios
    +server_info
    +html: str
    +steps
    +example_code
    +html: str
    +html: str
    +html: str
    +html: str
    +recommendations
    +html: str
    +html
    +servers
    +server
    +server_name
    +server_name
    +html: str
    +raw_data
    +process_data
    +cmdline
    +packages
    +processes
    +process
    +docker_info
    +labels
    +server_type
    +descriptions
    +transport
    +is_secure
    +descriptions
    +server_type
    +transport
    +capabilities
    +tool_count
    +name
    +host
    +port
    +server_type
    +transport_type
    +description
    +tools
    +capabilities
    +endpoint_url
    +address
    +address: host
    +display_address
    +html
    +tool_name
    +tool_desc
    +cap_name
    +cap_desc
    --
    +analyze_threats(data)
    -_identify_detected_servers(detection_results)
    -_generate_attack_vectors(detected_servers)
    -_generate_abuse_scenarios(detected_servers)
    -_generate_attack_chains(detected_servers)
    -_calculate_threat_levels(detected_servers)
    -_extract_scan_target(data): str
    -_generate_mitigation_strategies(detected_servers)
    -_generate_detection_indicators(detected_servers)
    -_generate_compliance_impact(detected_servers, threat_levels)
    -_format_key_scenarios(detected_servers): str
    -_format_attack_vectors(attack_vectors): str
    -_format_abuse_scenarios(abuse_scenarios): str
    -_format_attack_chains(attack_chains): str
    -_format_mitigation_strategies(strategies): str
    -_format_detection_indicators(indicators): str
    -_format_security_recommendations(detected_servers): str
    -_format_compliance_impact(compliance_impact): str
    -_format_detected_servers(data): str
    -_extract_server_name(result, server): str
    -_extract_mcp_server_name(server): str
    -_generate_server_description(result, server): str
    -_generate_mcp_server_description(server): str
    -_format_single_server(server_info): str
  }

  class CSVReporter {
    +start_time
    +success: bool
    +csv_content
    +output_file
    +result
    +result: csv_content
    +success: bool
    +generation_time
    +output
    +writer
    +writer
    +writer
    +headers
    +row
    +writer
    +headers
    +server
    +row
    +writer
    +summary_headers
    +row
    +findings_headers
    +row
    +writer
    +writer
    +headers
    +best_server
    +row
    +writer
    +writer
    +headers
    +tools_str: str
    +tool_names
    +tools_str
    +resources_str: str
    +resource_names
    +resources_str
    +capabilities_str: str
    +capabilities_str
    +capabilities_str
    +row
    +writer
    +headers
    +cap_dict
    +cap_dict: capabilities
    +cap_dict
    +row
    +generated_files
    +base_path
    +metadata_file
    +scan_file
    +detection_file
    +assessment_file
    +writer
    +writer
    +headers
    +row
    +writer
    +headers
    +server
    +row
    +writer
    +headers
    +row
    --
    -__init__(settings, delimiter, quoting)
    +get_format(): ReportFormat
    +generate_report(data, output_path): str
    -_generate_csv_content(data): str
    -_write_metadata_section(output, metadata)
    -_write_summary_section(output, data)
    -_write_scan_results_section(output, scan_results)
    -_write_detection_results_section(output, detection_results)
    -_write_assessment_results_section(output, assessment_results)
    -_write_recommendations_section(output, recommendations)
    -_write_pipeline_results_section(output, pipeline_results)
    -_write_introspection_summary_section(output, introspection_summary)
    -_write_mcp_servers_section(output, mcp_servers)
    -_write_introspection_data_section(output, introspection_data)
    -_save_csv_file(content, output_path)
    +generate_separate_files(data, base_path)
    -_generate_metadata_file(metadata, output_path)
    -_generate_scan_results_file(scan_results, output_path)
    -_generate_detection_results_file(detection_results, output_path)
    -_generate_assessment_results_file(assessment_results, output_path)
  }

  class HTMLReporter {
    +templates
    +start_time
    +html_content
    +generation_time
    +analyzer
    +analyzed_data
    +template_vars
    +analyzed_data
    +template_vars
    +results_data
    +result_dict
    --
    -__init__()
    -_register_default_templates()
    +generate_report(data, output_file, template_name): str
    +generate_executive_summary(data, output_file): str
    +generate_technical_report(data, output_file): str
    +generate_vulnerability_report(data, output_file): str
    +generate_compliance_report(data, output_file): str
    +generate_mcp_summary_report(data, output_file): str
    +generate_threat_analysis_report(data, output_file): str
    +list_available_templates()
    +register_custom_template(template)
    -_save_to_file(content, output_file)
    +get_supported_formats()
    +get_format(): ReportFormat
    -_prepare_technical_data(data)
  }

  class ReportFormat {
    +JSON: str
    +CSV: str
    +XML: str
    +HTML: str
    +PDF: str
    +MARKDOWN: str
  }

  class ReportType {
    +EXECUTIVE_SUMMARY: str
    +TECHNICAL_DETAILED: str
    +VULNERABILITY_REPORT: str
    +COMPLIANCE_REPORT: str
    +SCAN_RESULTS: str
    +DETECTION_RESULTS: str
    +RISK_ASSESSMENT: str
    +COMBINED_REPORT: str
    +THREAT_ANALYSIS: str
    +INTROSPECTION_REPORT: str
  }

  class ReportMetadata {
    +title: str
    +report_type: ReportType
    +format: ReportFormat
    +generated_at: float
    +generated_by: str
    +version: str
    +description
    +author
    +organization
    +classification: str
    +retention_period
    +report_type_val
    +format_val
    --
    +generated_timestamp(): str
    +to_dict()
  }

  class ScanSummary {
    +total_targets: int
    +total_ports_scanned: int
    +open_ports: int
    +closed_ports: int
    +filtered_ports: int
    +services_detected: int
    +scan_duration
    +scan_start_time
    +scan_end_time
    --
    +success_rate(): float
    +to_dict()
  }

  class DetectionSummary {
    +total_targets: int
    +mcp_servers_detected: int
    +detection_methods_used
    +transport_types_found
    +server_types_found
    +secure_servers: int
    +insecure_servers: int
    +authenticated_servers: int
    +unauthenticated_servers: int
    +detection_duration
    --
    +detection_rate(): float
    +security_rate(): float
    +to_dict()
  }

  class IntrospectionSummary {
    +total_servers_introspected: int
    +successful_introspections: int
    +failed_introspections: int
    +total_tools_discovered: int
    +total_resources_discovered: int
    +total_capabilities_discovered: int
    +critical_risk_servers: int
    +high_risk_servers: int
    +medium_risk_servers: int
    +low_risk_servers: int
    +minimal_risk_servers: int
    +file_access_tools: int
    +network_tools: int
    +code_execution_tools: int
    +data_access_tools: int
    +system_tools: int
    +stdio_servers: int
    +http_servers: int
    +sse_servers: int
    +websocket_servers: int
    +introspection_duration
    --
    +success_rate(): float
    +high_risk_rate(): float
    +average_tools_per_server(): float
    +average_resources_per_server(): float
    +to_dict()
  }

  class RiskSummary {
    +total_assessments: int
    +critical_risk_targets: int
    +high_risk_targets: int
    +medium_risk_targets: int
    +low_risk_targets: int
    +no_risk_targets: int
    +total_findings: int
    +total_vulnerabilities: int
    +exploitable_vulnerabilities: int
    +unpatched_vulnerabilities: int
    +compliance_violations
    +average_risk_score: float
    +assessment_duration
    --
    +high_risk_rate(): float
    +vulnerability_rate(): float
    +to_dict()
  }

  class ReportData {
    +metadata: ReportMetadata
    +scan_results
    +detection_results
    +assessment_results
    +pipeline_results
    +introspection_data
    +mcp_servers
    +scan_summary
    +detection_summary
    +risk_summary
    +introspection_summary
    +executive_summary
    +recommendations
    +raw_data
    +targets
    +findings
    +targets
    +servers
    +total: int
    +logger
    +total: int
    +logger
    +findings
    +tools
    --
    +total_targets(): int
    +has_scan_data(): bool
    +has_detection_data(): bool
    +has_assessment_data(): bool
    +has_pipeline_data(): bool
    +has_introspection_data(): bool
    +critical_findings()
    +high_risk_targets()
    +introspected_servers()
    +total_tools_discovered(): int
    +total_resources_discovered(): int
    +get_targets_by_risk_level(risk_level)
    +get_findings_by_category(category)
    +get_servers_by_risk_level(risk_level)
    +get_tools_by_category(category)
    +to_dict()
    -_pipeline_result_to_dict(result)
    -_capabilities_to_dict(capabilities)
    -_server_info_to_dict(server)
  }

  class BaseReporter {
    +stats
    +timestamp
    +filename
    +base_path
    --
    -__init__(settings)
    +generate_report(data, output_path): str
    +get_format(): ReportFormat
    +validate_data(data)
    +get_generation_statistics()
    +clear_statistics()
    -_update_statistics(success, generation_time)
    -_create_output_path(base_path, data): Path
  }

  class ReportingError {
  }

  class FormatError {
  }

  class TemplateError {
  }

  class ValidationError {
  }

  class ExecutiveFinding {
    +title: str
    +description: str
    +business_impact: str
    +risk_level: str
    +recommendation: str
    +priority: int
  }

  class ExecutiveMetrics {
    +total_systems_scanned: int
    +mcp_servers_detected: int
    +critical_vulnerabilities: int
    +high_risk_systems: int
    +compliance_issues: int
    +security_score: float
    +risk_reduction_potential: float
  }

  class ExecutiveSummaryGenerator {
    +metrics
    +findings
    +overview
    +key_findings
    +risk_assessment
    +recommendations
    +conclusion
    +summary
    +security_score
    +risk_reduction
    +findings
    +unprotected_count
    +compliance_issues
    +findings_text: str
    +risk_level
    +recommendations
    +immediate_actions
    +tone: str
    +tone: str
    +tone: str
    +header
    +score: float
    +critical_penalty
    +high_risk_penalty
    +unprotected
    +unprotected_penalty
    +critical_reduction
    +high_risk_reduction
    +best_practices_reduction: int
    +total_reduction
    +issues: int
    --
    -__init__()
    +generate_summary(data): str
    -_extract_metrics(data): ExecutiveMetrics
    -_identify_key_findings(data)
    -_generate_overview(metrics): str
    -_generate_key_findings(findings): str
    -_generate_risk_assessment(risk_summary, metrics): str
    -_generate_recommendations(findings): str
    -_generate_conclusion(metrics, findings): str
    -_combine_summary_sections(): str
    -_calculate_security_score(data): float
    -_calculate_risk_reduction_potential(data): float
    -_count_compliance_issues(data): int
    -_count_unprotected_deployments(data): int
    -_determine_overall_risk_level(metrics): str
    -_generate_fallback_summary(data): str
  }

  class TimeSeriesData {
    +timestamps
    +values
    +labels
    +first_half
    +second_half
    +first_avg
    +second_avg
    --
    +add_point(timestamp, value, label)
    +get_trend(): str
    +to_dict()
  }

  class DistributionData {
    +categories
    +total_count: int
    --
    +add_item(category, count)
    +get_percentages()
    +get_top_categories(n)
    +to_dict()
  }

  class DataAggregator {
    +enhanced_data: data
    +total_targets
    +total_ports_scanned
    +state_counts
    +open_ports
    +closed_ports
    +filtered_ports
    +services_detected
    +timestamps
    +scan_start_time
    +scan_end_time
    +scan_duration
    +total_targets
    +mcp_servers_detected
    +detection_methods_used
    +transport_types_found
    +server_types_found
    +secure_servers: int
    +insecure_servers: int
    +authenticated_servers: int
    +unauthenticated_servers: int
    +server
    +timestamps
    +detection_duration: NoneType
    +detection_duration
    +total_assessments
    +risk_level_counts
    +critical_risk_targets
    +high_risk_targets
    +medium_risk_targets
    +low_risk_targets
    +no_risk_targets
    +total_findings
    +total_vulnerabilities
    +exploitable_vulnerabilities
    +unpatched_vulnerabilities
    +compliance_violations
    +violations
    +risk_scores
    +average_risk_score
    +durations
    +assessment_duration
    +introspected_servers
    +total_servers_introspected
    +successful_introspections: total_servers_introspected
    +failed_introspections: int
    +total_tools_discovered
    +total_resources_discovered
    +total_capabilities_discovered
    +risk_counts
    +critical_risk_servers
    +high_risk_servers
    +medium_risk_servers
    +low_risk_servers
    +minimal_risk_servers
    +file_access_tools: int
    +network_tools: int
    +code_execution_tools: int
    +data_access_tools: int
    +system_tools: int
    +tool_name
    +tool_desc
    +stdio_servers: int
    +http_servers: int
    +sse_servers: int
    +websocket_servers: int
    +server
    +transport_info
    +introspection_duration: NoneType
    +durations
    +introspection_duration
    +summary_parts
    +risk_summary
    +detection_summary
    +scan_summary
    +introspection_summary
    +dangerous_tools
    +recommendations
    +risk_summary
    +detection_summary
    +scan_summary
    +introspection_summary
    +trends
    +timestamp
    +distributions
    --
    -__init__(settings)
    +aggregate_report_data(data): ReportData
    +generate_scan_summary(scan_results): ScanSummary
    +generate_detection_summary(detection_results): DetectionSummary
    +generate_risk_summary(assessment_results): RiskSummary
    +generate_introspection_summary(data)
    +generate_executive_summary(data): str
    +generate_recommendations(data)
    +generate_trend_analysis(historical_data)
    +generate_distribution_analysis(data)
  }

  class MCPDataAnalyzer {
    +MCP_SERVER_CATALOG
    +detection_results
    +stats
    +mcp_servers
    +introspected_servers
    +false_positives
    +additional_detections
    +security_assessment
    +performance_metrics
    +conclusions
    +mcp_servers
    +method_str
    +process_data
    +cmdline
    +server_path
    +server_info
    +false_positives
    +method_str
    +process_data
    +cmdline
    +additional
    +method_str
    +method_str
    +risk_counts
    +external_access_servers
    +file_access_servers
    +server_info
    +overall_status: str
    +status_class: str
    +overall_status: str
    +status_class: str
    +overall_status: str
    +status_class: str
    +total_processes: int
    +nodejs_processes: int
    +mcp_indicators
    +efficiency
    +server_count
    +status
    +conclusions
    +methods
    +method
    +method_str
    +method_name
    +html: str
    +server_info
    +security_class
    +html: str
    +html: str
    +method_name
    +html: str
    +html: str
    +methods
    +used_methods
    +method_str
    +html: str
    +protocols
    +transport
    +html: str
    +count
    +analysis_parts
    +tools_count
    +resources_count
    +risk_level
    +notable_tools
    +risk_class
    +server_analysis
    +tool_categories
    +name_lower
    +desc_lower
    +analysis_parts
    +all_risks
    +risk_groups
    +severity
    +analysis_parts
    +risk_class
    +assessment
    +introspection_risks
    +risk_level
    +conclusions
    +total_tools
    +total_resources
    +high_risk_servers
    +dangerous_tools
    +level
    +level
    +level
    +name_lower
    +desc_lower
    +dangerous_keywords
    +target_hosts
    +sorted_hosts
    --
    +analyze_detection_results(data)
    -_extract_statistics(detection_results)
    +get_method_str()
    -_analyze_mcp_servers(detection_results)
    -_identify_server_type(server_path, cmdline)
    -_determine_transport(server_info): str
    -_identify_false_positives(detection_results)
    -_extract_cursor_extension_name(cmdline): str
    -_analyze_additional_detections(detection_results)
    -_extract_additional_details(result): str
    -_perform_security_assessment(mcp_servers, additional_detections)
    -_generate_performance_metrics(detection_results, stats)
    -_generate_conclusions(mcp_servers, security_assessment): str
    -_format_detection_methods(detection_results): str
    -_format_mcp_servers_analysis(mcp_servers): str
    -_format_false_positives_analysis(false_positives): str
    -_format_additional_detections_analysis(additional_detections): str
    -_format_security_implications(security_assessment): str
    -_format_security_recommendations(security_assessment): str
    -_format_technical_detection_methods(detection_results): str
    -_format_transport_protocols(mcp_servers, additional_detections): str
    -_analyze_introspected_servers(data)
    -_format_introspected_servers_analysis(servers): str
    -_format_introspection_tools_analysis(servers): str
    -_format_introspection_security_analysis(servers): str
    -_perform_enhanced_security_assessment(mcp_servers, additional_detections, introspected_servers)
    -_generate_enhanced_conclusions(mcp_servers, introspected_servers, security_assessment): str
    -_get_risk_class(risk_level): str
    -_get_risk_class_from_string(level): str
    -_is_dangerous_tool(tool): bool
    -_extract_scan_target(data): str
  }

  class IntrospectionReporter {
    +start_time
    +analysis
    +report
    +report_content
    +output_path
    +generation_time
    +generation_time
    +servers
    +analysis
    +total_servers
    +total_tools
    +total_resources
    +risk_distribution
    +risk_level
    +high_risk_servers
    +key_findings
    +dangerous_tools
    +security_status: str
    +security_status: str
    +security_status: str
    +security_status: str
    +server_categories
    +tool_names
    +tool_frequency
    +most_common_tools
    +all_tools
    +categories
    +name_lower
    +desc_lower
    +high_risk_tools
    +all_resources
    +mime_types
    +uri_schemes
    +scheme
    +capability_counts
    +all_risks
    +risk_by_category
    +risk_by_severity
    +category
    +severity
    +critical_risks
    +risk_scores
    +total_score: int
    +risk_level
    +average_score
    +overall_risk: str
    +overall_risk: str
    +overall_risk: str
    +overall_risk: str
    +risk_factors
    +dangerous_tool_count
    +recommendations
    +high_risk_servers
    +dangerous_tools
    +findings
    +finding
    +count: int
    +name_lower
    +desc_lower
    +high_risk_keywords
    +factors
    +name_lower
    +desc_lower
    --
    -__init__(settings)
    +get_format(): ReportFormat
    +generate_report(data, output_path): str
    -_generate_introspection_analysis(data)
    -_generate_executive_summary(data, servers)
    -_analyze_servers(servers)
    -_analyze_tools(servers)
    -_analyze_resources(servers)
    -_analyze_capabilities(servers)
    -_analyze_security_risks(servers)
    -_generate_risk_assessment(servers)
    -_generate_recommendations(servers)
    -_generate_detailed_findings(servers)
    -_count_dangerous_tools(servers): int
    -_is_high_risk_tool(tool): bool
    -_get_tool_risk_factors(tool)
  }

  class JSONReporter {
    +start_time
    +success: bool
    +json_content
    +output_file
    +result
    +result: json_content
    +success: bool
    +generation_time
    +report_dict
    +json_content
    +report_dict
    +enhanced_results
    +enhanced_result
    +enhanced_results
    +enhanced_result
    +enhanced_results
    +enhanced_result
    +enhanced_results
    +enhanced_result
    +enhanced_results
    +enhanced_capabilities
    +enhanced_info
    +enhanced_tools
    +tool_dict
    +tool_dict
    +tool_dict
    +tool_dict
    +enhanced_resources
    +resource_dict
    +resource_dict
    +resource_dict
    +resource_dict
    +name
    +description
    +category
    +uri
    +mime_type
    +enhanced_data
    +enhanced_servers
    +enhanced_server
    +stats
    +open_ports
    +services_detected
    +mcp_detected
    +risk_counts
    +total_findings: int
    +total_vulnerabilities: int
    +successful_pipelines
    +total_detections
    +successful_detections
    +total_mcp_servers
    +total_introspections
    +total_duration
    +stats
    +tool_categories
    +tool_dict
    +category
    +resource_categories
    +resource_dict
    +category
    +risk_distribution
    +risk_level
    +risk_level
    --
    -__init__(settings, indent, sort_keys)
    +get_format(): ReportFormat
    +generate_report(data, output_path): str
    -_generate_json_content(data): str
    -_prepare_report_data(data)
    -_enhance_scan_results(scan_results)
    -_enhance_detection_results(detection_results)
    -_enhance_assessment_results(assessment_results)
    -_enhance_pipeline_results(pipeline_results)
    -_enhance_introspection_results(introspection_results)
    -_enhance_server_info(server_info)
    -_enhance_tools(tools)
    -_enhance_resources(resources)
    -_categorize_tool(tool): str
    -_assess_tool_risk(tool): str
    -_categorize_resource(resource): str
    -_enhance_introspection_data(introspection_data)
    -_enhance_mcp_servers(mcp_servers)
    -_generate_aggregated_statistics(data)
    -_calculate_scan_statistics(scan_results)
    -_calculate_detection_statistics(detection_results)
    -_calculate_risk_statistics(assessment_results)
    -_calculate_pipeline_statistics(pipeline_results)
    -_calculate_introspection_statistics(data)
    -_save_json_file(content, output_path)
    -_json_serializer(obj): Any
    +validate_json_output(json_content): bool
  }

}

package "src.hawkeye.reporting.templates" {
  class TemplateError {
  }

  class BaseTemplate {
    +template_vars
    +template_content
    +rendered_html
    +variables
    +template
    +safe_variables
    +rendered
    +safe_vars
    +html_items
    +rows
    +escaped_key
    +escaped_value
    --
    -__init__(template_name)
    +get_template_content(): str
    +get_css_content(): str
    +get_js_content(): str
    +render(data): str
    -_prepare_template_variables(data)
    -_render_template(template_content, variables): str
    -_make_template_safe(variables)
    -_render_list(items): str
    -_render_dict(data): str
    -_escape_html(text): str
    -_get_default_css(): str
    -_get_default_js(): str
  }

  class TemplateEngine {
    +template
    --
    -__init__()
    +register_template(template)
    +get_template(template_name)
    +list_templates()
    +render_template(template_name, data): str
    +clear_templates()
  }

  class AdaptiveTemplateEngine {
    +complexity
    +generator
    +content: template_content
    +content
    +formatter
    +placeholder
    +content
    +selected_template
    +template
    +template
    +dynamic_content
    +content
    +context_data
    +content
    +content
    +complexity_score: int
    +threat_level
    --
    -__init__()
    +register_content_generator(name, generator)
    +register_context_injector(context_type, injector)
    +register_severity_formatter(severity, formats)
    +select_adaptive_template(base_template_name, threat_analysis, server_capabilities): str
    +generate_dynamic_content(content_type, data, context): str
    +inject_context(template_content, context_data): str
    +apply_severity_formatting(content, severity): str
    +render_adaptive_template(template_name, data, threat_analysis): str
    -_assess_content_complexity(threat_analysis, server_capabilities): str
  }

  class TemplateCapabilityMatcher {
    -__init__()
    +register_capability_template(capability, template_name, patterns)
    +match_template_for_capabilities(capabilities)
  }

  class ExecutiveSummaryTemplate {
    -__init__()
    +get_template_content(): str
  }

  class TechnicalReportTemplate {
    -__init__()
    +get_template_content(): str
  }

  class VulnerabilityReportTemplate {
    -__init__()
    +get_template_content(): str
  }

  class ComplianceReportTemplate {
    +base_css
    +compliance_css: str
    --
    -__init__()
    +get_template_content(): str
    +get_css_content(): str
  }

  class ThreatAnalysisTemplate {
    -__init__()
    +get_template_content(): str
    +get_css_content(): str
    +get_js_content(): str
  }

  class MCPSummaryTemplate {
    -__init__()
    +get_template_content(): str
    +get_css_content(): str
    +get_js_content(): str
  }

}

/* Inheritance relationships */
unittest.TestCase <|-- TestTransportSecurityAssessor
RiskAssessor <|-- MockRiskAssessor
Enum <|-- MockServerType
unittest.TestCase <|-- TestTransportDetector
unittest.TestCase <|-- TestProtocolVerifier
unittest.TestCase <|-- TestProcessEnumerator
unittest.TestCase <|-- TestToolRiskAnalyzer
unittest.TestCase <|-- TestRiskCategorizer
BaseTransportHandler <|-- MockTransportHandler
unittest.TestCase <|-- TestCompositeRiskScore
unittest.TestCase <|-- TestRiskScorer
unittest.TestCase <|-- TestMigrationConfig
unittest.TestCase <|-- TestLegacyMCPConfig
unittest.TestCase <|-- TestMigrationResult
unittest.TestCase <|-- TestConfigurationMigrator
unittest.TestCase <|-- TestConfigurationValidator
unittest.TestCase <|-- TestConvenienceFunctions
unittest.TestCase <|-- TestThreatModel
unittest.TestCase <|-- TestThreatModelingEngine
unittest.TestCase <|-- MCPIntrospectionBenchmarks
BaseTemplate <|-- CustomTemplate
BaseTemplate <|-- SampleTemplate
BaseTemplate <|-- TestTemplate
BaseTemplate <|-- TestTemplate
BaseTemplate <|-- TestTemplate
logging.Handler <|-- TestHandler
unittest.TestCase <|-- TestMCPRiskAnalysisIntegration
Exception <|-- HawkEyeError
HawkEyeError <|-- ConfigurationError
HawkEyeError <|-- NetworkError
HawkEyeError <|-- ScanError
HawkEyeError <|-- DetectionError
HawkEyeError <|-- AssessmentError
HawkEyeError <|-- ReportingError
HawkEyeError <|-- ValidationError
click.Group <|-- HawkEyeGroup
ProgressTracker <|-- ScanProgressTracker
ProgressTracker <|-- DetectionProgressTracker
ProgressTracker <|-- AssessmentProgressTracker
ProgressTracker <|-- ReportingProgressTracker
Enum <|-- VerbosityLevel
click.ParamType <|-- ValidatedIPAddress
click.ParamType <|-- ValidatedTarget
click.ParamType <|-- ValidatedPortRange
click.ParamType <|-- ValidatedTimeout
click.ParamType <|-- ConfigFileType
RiskAssessor <|-- AuthenticationAnalyzer
Enum <|-- RiskLevel
Enum <|-- VulnerabilityCategory
Enum <|-- ComplianceFramework
ABC <|-- RiskAssessor
Exception <|-- AssessmentError
AssessmentError <|-- CVSSError
AssessmentError <|-- ConfigurationError
AssessmentError <|-- ComplianceError
Enum <|-- RemediationPriority
Enum <|-- RemediationComplexity
Enum <|-- RemediationCategory
BaseModel <|-- RemediationAction
BaseModel <|-- RemediationPlan
Exception <|-- AssessmentError
AssessmentError <|-- RemediationError
AssessmentError <|-- InvalidFindingError
RemediationError <|-- RemediationTemplateError
RemediationError <|-- PrioritizationError
AssessmentError <|-- RiskCalculationError
AssessmentError <|-- ComplianceError
RiskAssessor <|-- TransportSecurityAssessor
Enum <|-- ComplianceStatus
Enum <|-- ComplianceRequirement
RiskAssessor <|-- ComplianceChecker
RiskAssessor <|-- DefaultConfigurationDetector
RiskAssessor <|-- ConfigurationAnalyzer
MCPDetector <|-- ConfigFileDiscovery
MCPDetector <|-- NPXDetector
Enum <|-- TransportType
Enum <|-- DetectionMethod
Enum <|-- MCPServerType
ABC <|-- MCPDetector
Exception <|-- DetectionError
DetectionError <|-- MCPDetectionError
DetectionError <|-- ProcessDetectionError
DetectionError <|-- ConfigDetectionError
DetectionError <|-- ProtocolDetectionError
DetectionError <|-- DockerDetectionError
MCPDetector <|-- ProtocolVerifier
MCPDetector <|-- ProcessEnumerator
MCPDetector <|-- TransportDetector
MCPDetector <|-- EnvironmentAnalyzer
MCPDetector <|-- DockerInspector
Enum <|-- ComplianceStatus
Enum <|-- ControlCategory
Enum <|-- VulnerabilityType
Enum <|-- CVESeverity
Enum <|-- ExploitabilityLevel
Enum <|-- ConfigurationRisk
Enum <|-- ImpactCategory
Enum <|-- ImpactSeverity
Enum <|-- RecoveryPhase
Enum <|-- CostCategory
Enum <|-- OrganizationSize
Enum <|-- IndustryVertical
Enum <|-- MitigationCategory
Enum <|-- ImplementationDifficulty
Enum <|-- MitigationEffectiveness
Enum <|-- ExampleType
Enum <|-- ExampleLanguage
Enum <|-- ExampleComplexity
Enum <|-- STRIDECategory
Enum <|-- AttackTreeNodeType
Enum <|-- ThreatActorCapability
Enum <|-- ThreatActorMotivation
Enum <|-- PriorityLevel
Enum <|-- RiskFactor
Enum <|-- TimeHorizon
Enum <|-- RemediationUrgency
Enum <|-- SelectionCriteria
Enum <|-- ProviderCapability
Enum <|-- OptimizationStrategy
Enum <|-- ErrorType
Enum <|-- RetryStrategy
Enum <|-- CircuitBreakerState
ABC <|-- AIProvider
AIProvider <|-- OpenAIProvider
AIProvider <|-- AnthropicProvider
AIProvider <|-- LocalLLMProvider
Enum <|-- NarrativeStyle
Enum <|-- NarrativeLength
Enum <|-- StoryElement
Enum <|-- PriorityLevel
Enum <|-- ImpactCategory
Enum <|-- ThreatLevel
Enum <|-- SeverityLevel
Enum <|-- DifficultyLevel
Enum <|-- ThreatActorType
Enum <|-- AccessLevel
Enum <|-- CapabilityCategory
Enum <|-- DeploymentType
Enum <|-- SecurityPosture
Enum <|-- DataSensitivity
Enum <|-- NetworkExposure
Enum <|-- UserPrivileges
Enum <|-- ComplianceFramework
Enum <|-- DiagramType
Enum <|-- DiagramFormat
Enum <|-- DiagramStyle
Enum <|-- PayloadType
Enum <|-- PayloadComplexity
Enum <|-- ProgrammingLanguage
Enum <|-- ThreatActorType
Enum <|-- LikelihoodLevel
Enum <|-- AttackComplexity
Enum <|-- DetectionDifficulty
Enum <|-- TargetAttractiveness
Enum <|-- ThreatActorSophistication
Enum <|-- AttackWindow
BaseModel <|-- MigrationConfig
BaseModel <|-- LegacyMCPConfig
BaseModel <|-- MigrationResult
Enum <|-- FallbackStrategy
Enum <|-- FailureReason
str <|-- RiskLevel
Enum <|-- RiskLevel
str <|-- TransportType
Enum <|-- TransportType
str <|-- RiskCategory
Enum <|-- RiskCategory
str <|-- SecurityCategory
Enum <|-- SecurityCategory
str <|-- ComplianceStatus
Enum <|-- ComplianceStatus
Exception <|-- ValidationError
BaseModel <|-- MCPCapabilities
BaseModel <|-- MCPToolParameter
BaseModel <|-- MCPTool
BaseModel <|-- MCPResource
BaseModel <|-- MCPServerConfig
BaseModel <|-- MCPCapability
BaseModel <|-- SecurityRisk
BaseModel <|-- SecurityFinding
BaseModel <|-- ComplianceCheck
BaseModel <|-- PerformanceMetrics
BaseModel <|-- TransportConfig
BaseModel <|-- RiskAssessment
BaseModel <|-- MCPServerInfo
BaseModel <|-- DiscoveryResult
BaseModel <|-- IntrospectionResult
BaseModel <|-- MCPIntrospectionResult
str <|-- ErrorSeverity
Enum <|-- ErrorSeverity
str <|-- ErrorCategory
Enum <|-- ErrorCategory
Exception <|-- MCPIntrospectionError
MCPIntrospectionError <|-- ConnectionError
MCPIntrospectionError <|-- TimeoutError
MCPIntrospectionError <|-- ProtocolError
MCPIntrospectionError <|-- ValidationError
ConnectionPool <|-- OptimizedConnectionPool
Enum <|-- MemoryOptimizationLevel
Enum <|-- CacheStrategy
str <|-- RetryStrategy
Enum <|-- RetryStrategy
str <|-- CircuitState
Enum <|-- CircuitState
BaseTransportHandler <|-- StdioTransportHandler
Exception <|-- TransportError
TransportError <|-- ConnectionTimeoutError
TransportError <|-- ConnectionFailedError
TransportError <|-- ConnectionError
ConnectionTimeoutError <|-- TimeoutError
ABC <|-- BaseTransportHandler
BaseTransportHandler <|-- StreamableHTTPTransportHandler
BaseTransportHandler <|-- SSETransportHandler
str <|-- ValidationSeverity
Enum <|-- ValidationSeverity
str <|-- ErrorSeverity
Enum <|-- ErrorSeverity
str <|-- ErrorCategory
Enum <|-- ErrorCategory
str <|-- ThreatCategory
Enum <|-- ThreatCategory
str <|-- AttackVector
Enum <|-- AttackVector
str <|-- ReportFormat
Enum <|-- ReportFormat
str <|-- ReportLevel
Enum <|-- ReportLevel
Enum <|-- PolicyAction
Enum <|-- PolicyScope
Enum <|-- ToolRiskPattern
str <|-- SchemaRiskType
Enum <|-- SchemaRiskType
str <|-- ParameterRiskLevel
Enum <|-- ParameterRiskLevel
str <|-- ScoreComponent
Enum <|-- ScoreComponent
str <|-- ScoreMethod
Enum <|-- ScoreMethod
str <|-- RiskClassification
Enum <|-- RiskClassification
str <|-- RiskDomain
Enum <|-- RiskDomain
Enum <|-- PortState
Enum <|-- ScanType
ABC <|-- BaseScanner
Exception <|-- ScannerError
ScannerError <|-- ScanTimeoutError
ScannerError <|-- InvalidTargetError
BaseScanner <|-- UDPScanner
BaseScanner <|-- TCPScanner
BaseSettings <|-- ScanSettings
BaseSettings <|-- DetectionSettings
BaseSettings <|-- MCPIntrospectionSettings
BaseSettings <|-- AssessmentSettings
BaseSettings <|-- ReportingSettings
BaseSettings <|-- AISettings
BaseSettings <|-- LoggingSettings
BaseSettings <|-- HawkEyeSettings
BaseReporter <|-- XMLReporter
BaseReporter <|-- CSVReporter
BaseReporter <|-- HTMLReporter
Enum <|-- ReportFormat
Enum <|-- ReportType
ABC <|-- BaseReporter
Exception <|-- ReportingError
ReportingError <|-- FormatError
ReportingError <|-- TemplateError
ReportingError <|-- ValidationError
BaseReporter <|-- IntrospectionReporter
BaseReporter <|-- JSONReporter
ReportingError <|-- TemplateError
ABC <|-- BaseTemplate
TemplateEngine <|-- AdaptiveTemplateEngine
BaseTemplate <|-- ExecutiveSummaryTemplate
BaseTemplate <|-- TechnicalReportTemplate
BaseTemplate <|-- VulnerabilityReportTemplate
BaseTemplate <|-- ComplianceReportTemplate
BaseTemplate <|-- ThreatAnalysisTemplate
BaseTemplate <|-- MCPSummaryTemplate

@enduml