# HawkEye - MCP Security Reconnaissance Tool
# Docker Compose configuration for multi-service deployment

version: '3.8'

services:
  # Main HawkEye application
  hawkeye:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: hawkeye/hawkeye:${VERSION:-latest}
    container_name: hawkeye-main
    hostname: hawkeye-main
    restart: unless-stopped
    
    # Environment variables
    environment:
      - HAWKEYE_CONFIG=/app/config/hawkeye.yaml
      - HAWKEYE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HAWKEYE_DATA_DIR=/app/data
      - HAWKEYE_RESULTS_DIR=/app/results
      - HAWKEYE_LOGS_DIR=/app/logs
      - HAWKEYE_REDIS_URL=redis://redis:6379/0
      - HAWKEYE_DATABASE_URL=postgresql://hawkeye:${DB_PASSWORD:-hawkeye123}@postgres:5432/hawkeye
    
    # Volume mounts
    volumes:
      - hawkeye_config:/app/config
      - hawkeye_data:/app/data
      - hawkeye_results:/app/results
      - hawkeye_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For Docker inspection
    
    # Network configuration
    networks:
      - hawkeye-internal
      - hawkeye-external
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "application.py", "health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # HawkEye Web Interface
  hawkeye-web:
    build:
      context: .
      dockerfile: Dockerfile.web
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: hawkeye/hawkeye-web:${VERSION:-latest}
    container_name: hawkeye-web
    hostname: hawkeye-web
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${WEB_PORT:-8080}:8080"
    
    # Environment variables
    environment:
      - HAWKEYE_API_URL=http://hawkeye:8080
      - HAWKEYE_WEB_SECRET_KEY=${WEB_SECRET_KEY:-change-me-in-production}
      - HAWKEYE_WEB_DEBUG=${WEB_DEBUG:-false}
    
    # Volume mounts
    volumes:
      - hawkeye_results:/app/results:ro
      - hawkeye_logs:/app/logs:ro
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Dependencies
    depends_on:
      hawkeye:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: hawkeye-redis
    hostname: hawkeye-redis
    restart: unless-stopped
    
    # Configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-hawkeye123}
    
    # Environment variables
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-hawkeye123}
    
    # Volume mounts
    volumes:
      - hawkeye_redis_data:/data
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: hawkeye-postgres
    hostname: hawkeye-postgres
    restart: unless-stopped
    
    # Environment variables
    environment:
      - POSTGRES_DB=hawkeye
      - POSTGRES_USER=hawkeye
      - POSTGRES_PASSWORD=${DB_PASSWORD:-hawkeye123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    # Volume mounts
    volumes:
      - hawkeye_postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hawkeye -d hawkeye"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # Celery worker for background tasks
  hawkeye-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: hawkeye/hawkeye:${VERSION:-latest}
    container_name: hawkeye-worker
    hostname: hawkeye-worker
    restart: unless-stopped
    
    # Override command to run Celery worker
    command: celery -A hawkeye.services.celery worker --loglevel=info --concurrency=4
    
    # Environment variables
    environment:
      - HAWKEYE_CONFIG=/app/config/hawkeye.yaml
      - HAWKEYE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HAWKEYE_REDIS_URL=redis://redis:6379/0
      - HAWKEYE_DATABASE_URL=postgresql://hawkeye:${DB_PASSWORD:-hawkeye123}@postgres:5432/hawkeye
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    
    # Volume mounts
    volumes:
      - hawkeye_config:/app/config:ro
      - hawkeye_data:/app/data
      - hawkeye_results:/app/results
      - hawkeye_logs:/app/logs
    
    # Network configuration
    networks:
      - hawkeye-internal
      - hawkeye-external
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "celery", "-A", "hawkeye.services.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.3'
          memory: 256M

  # Celery beat scheduler
  hawkeye-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: hawkeye/hawkeye:${VERSION:-latest}
    container_name: hawkeye-scheduler
    hostname: hawkeye-scheduler
    restart: unless-stopped
    
    # Override command to run Celery beat
    command: celery -A hawkeye.services.celery beat --loglevel=info --schedule=/app/data/celerybeat-schedule
    
    # Environment variables
    environment:
      - HAWKEYE_CONFIG=/app/config/hawkeye.yaml
      - HAWKEYE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HAWKEYE_REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    
    # Volume mounts
    volumes:
      - hawkeye_config:/app/config:ro
      - hawkeye_data:/app/data
      - hawkeye_logs:/app/logs
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hawkeye-nginx
    hostname: hawkeye-nginx
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    # Volume mounts
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - hawkeye_nginx_logs:/var/log/nginx
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Dependencies
    depends_on:
      hawkeye-web:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Security settings
    security_opt:
      - no-new-privileges:true

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hawkeye-prometheus
    hostname: hawkeye-prometheus
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Volume mounts
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - hawkeye_prometheus_data:/prometheus
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Security settings
    security_opt:
      - no-new-privileges:true

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hawkeye-grafana
    hostname: hawkeye-grafana
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volume mounts
    volumes:
      - hawkeye_grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Network configuration
    networks:
      - hawkeye-internal
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Security settings
    security_opt:
      - no-new-privileges:true

# Network definitions
networks:
  hawkeye-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  hawkeye-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volume definitions
volumes:
  hawkeye_config:
    driver: local
  hawkeye_data:
    driver: local
  hawkeye_results:
    driver: local
  hawkeye_logs:
    driver: local
  hawkeye_redis_data:
    driver: local
  hawkeye_postgres_data:
    driver: local
  hawkeye_nginx_logs:
    driver: local
  hawkeye_prometheus_data:
    driver: local
  hawkeye_grafana_data:
    driver: local

# Secrets (for production use)
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  web_secret_key:
    file: ./secrets/web_secret_key.txt 